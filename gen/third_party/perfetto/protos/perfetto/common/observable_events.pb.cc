// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/observable_events.proto

#include "protos/perfetto/common/observable_events.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2fobservable_5fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObservableEvents_DataSourceInstanceStateChange_protos_2fperfetto_2fcommon_2fobservable_5fevents_2eproto;
namespace perfetto {
namespace protos {
class ObservableEvents_DataSourceInstanceStateChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObservableEvents_DataSourceInstanceStateChange> _instance;
} _ObservableEvents_DataSourceInstanceStateChange_default_instance_;
class ObservableEventsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObservableEvents> _instance;
} _ObservableEvents_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_ObservableEvents_protos_2fperfetto_2fcommon_2fobservable_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_ObservableEvents_default_instance_;
    new (ptr) ::perfetto::protos::ObservableEvents();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObservableEvents_protos_2fperfetto_2fcommon_2fobservable_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObservableEvents_protos_2fperfetto_2fcommon_2fobservable_5fevents_2eproto}, {
      &scc_info_ObservableEvents_DataSourceInstanceStateChange_protos_2fperfetto_2fcommon_2fobservable_5fevents_2eproto.base,}};

static void InitDefaultsscc_info_ObservableEvents_DataSourceInstanceStateChange_protos_2fperfetto_2fcommon_2fobservable_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_ObservableEvents_DataSourceInstanceStateChange_default_instance_;
    new (ptr) ::perfetto::protos::ObservableEvents_DataSourceInstanceStateChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObservableEvents_DataSourceInstanceStateChange_protos_2fperfetto_2fcommon_2fobservable_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObservableEvents_DataSourceInstanceStateChange_protos_2fperfetto_2fcommon_2fobservable_5fevents_2eproto}, {}};

namespace perfetto {
namespace protos {
bool ObservableEvents_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ObservableEvents_Type_strings[3] = {};

static const char ObservableEvents_Type_names[] =
  "TYPE_ALL_DATA_SOURCES_STARTED"
  "TYPE_DATA_SOURCES_INSTANCES"
  "TYPE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ObservableEvents_Type_entries[] = {
  { {ObservableEvents_Type_names + 0, 29}, 2 },
  { {ObservableEvents_Type_names + 29, 27}, 1 },
  { {ObservableEvents_Type_names + 56, 16}, 0 },
};

static const int ObservableEvents_Type_entries_by_number[] = {
  2, // 0 -> TYPE_UNSPECIFIED
  1, // 1 -> TYPE_DATA_SOURCES_INSTANCES
  0, // 2 -> TYPE_ALL_DATA_SOURCES_STARTED
};

const std::string& ObservableEvents_Type_Name(
    ObservableEvents_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ObservableEvents_Type_entries,
          ObservableEvents_Type_entries_by_number,
          3, ObservableEvents_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ObservableEvents_Type_entries,
      ObservableEvents_Type_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ObservableEvents_Type_strings[idx].get();
}
bool ObservableEvents_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObservableEvents_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ObservableEvents_Type_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ObservableEvents_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ObservableEvents_Type ObservableEvents::TYPE_UNSPECIFIED;
constexpr ObservableEvents_Type ObservableEvents::TYPE_DATA_SOURCES_INSTANCES;
constexpr ObservableEvents_Type ObservableEvents::TYPE_ALL_DATA_SOURCES_STARTED;
constexpr ObservableEvents_Type ObservableEvents::Type_MIN;
constexpr ObservableEvents_Type ObservableEvents::Type_MAX;
constexpr int ObservableEvents::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ObservableEvents_DataSourceInstanceState_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ObservableEvents_DataSourceInstanceState_strings[2] = {};

static const char ObservableEvents_DataSourceInstanceState_names[] =
  "DATA_SOURCE_INSTANCE_STATE_STARTED"
  "DATA_SOURCE_INSTANCE_STATE_STOPPED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ObservableEvents_DataSourceInstanceState_entries[] = {
  { {ObservableEvents_DataSourceInstanceState_names + 0, 34}, 2 },
  { {ObservableEvents_DataSourceInstanceState_names + 34, 34}, 1 },
};

static const int ObservableEvents_DataSourceInstanceState_entries_by_number[] = {
  1, // 1 -> DATA_SOURCE_INSTANCE_STATE_STOPPED
  0, // 2 -> DATA_SOURCE_INSTANCE_STATE_STARTED
};

const std::string& ObservableEvents_DataSourceInstanceState_Name(
    ObservableEvents_DataSourceInstanceState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ObservableEvents_DataSourceInstanceState_entries,
          ObservableEvents_DataSourceInstanceState_entries_by_number,
          2, ObservableEvents_DataSourceInstanceState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ObservableEvents_DataSourceInstanceState_entries,
      ObservableEvents_DataSourceInstanceState_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ObservableEvents_DataSourceInstanceState_strings[idx].get();
}
bool ObservableEvents_DataSourceInstanceState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObservableEvents_DataSourceInstanceState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ObservableEvents_DataSourceInstanceState_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<ObservableEvents_DataSourceInstanceState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ObservableEvents_DataSourceInstanceState ObservableEvents::DATA_SOURCE_INSTANCE_STATE_STOPPED;
constexpr ObservableEvents_DataSourceInstanceState ObservableEvents::DATA_SOURCE_INSTANCE_STATE_STARTED;
constexpr ObservableEvents_DataSourceInstanceState ObservableEvents::DataSourceInstanceState_MIN;
constexpr ObservableEvents_DataSourceInstanceState ObservableEvents::DataSourceInstanceState_MAX;
constexpr int ObservableEvents::DataSourceInstanceState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ObservableEvents_DataSourceInstanceStateChange::_Internal {
 public:
  using HasBits = decltype(std::declval<ObservableEvents_DataSourceInstanceStateChange>()._has_bits_);
  static void set_has_producer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data_source_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ObservableEvents_DataSourceInstanceStateChange::ObservableEvents_DataSourceInstanceStateChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ObservableEvents.DataSourceInstanceStateChange)
}
ObservableEvents_DataSourceInstanceStateChange::ObservableEvents_DataSourceInstanceStateChange(const ObservableEvents_DataSourceInstanceStateChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  producer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_producer_name()) {
    producer_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_producer_name(),
      GetArena());
  }
  data_source_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data_source_name()) {
    data_source_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data_source_name(),
      GetArena());
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ObservableEvents.DataSourceInstanceStateChange)
}

void ObservableEvents_DataSourceInstanceStateChange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObservableEvents_DataSourceInstanceStateChange_protos_2fperfetto_2fcommon_2fobservable_5fevents_2eproto.base);
  producer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_source_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 1;
}

ObservableEvents_DataSourceInstanceStateChange::~ObservableEvents_DataSourceInstanceStateChange() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ObservableEvents.DataSourceInstanceStateChange)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ObservableEvents_DataSourceInstanceStateChange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  producer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_source_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ObservableEvents_DataSourceInstanceStateChange::ArenaDtor(void* object) {
  ObservableEvents_DataSourceInstanceStateChange* _this = reinterpret_cast< ObservableEvents_DataSourceInstanceStateChange* >(object);
  (void)_this;
}
void ObservableEvents_DataSourceInstanceStateChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObservableEvents_DataSourceInstanceStateChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObservableEvents_DataSourceInstanceStateChange& ObservableEvents_DataSourceInstanceStateChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObservableEvents_DataSourceInstanceStateChange_protos_2fperfetto_2fcommon_2fobservable_5fevents_2eproto.base);
  return *internal_default_instance();
}


void ObservableEvents_DataSourceInstanceStateChange::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ObservableEvents.DataSourceInstanceStateChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      producer_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      data_source_name_.ClearNonDefaultToEmpty();
    }
    state_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObservableEvents_DataSourceInstanceStateChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string producer_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_producer_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string data_source_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data_source_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ObservableEvents.DataSourceInstanceState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ObservableEvents_DataSourceInstanceState_IsValid(val))) {
            _internal_set_state(static_cast<::perfetto::protos::ObservableEvents_DataSourceInstanceState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObservableEvents_DataSourceInstanceStateChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ObservableEvents.DataSourceInstanceStateChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string producer_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_producer_name(), target);
  }

  // optional string data_source_name = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_data_source_name(), target);
  }

  // optional .perfetto.protos.ObservableEvents.DataSourceInstanceState state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ObservableEvents.DataSourceInstanceStateChange)
  return target;
}

size_t ObservableEvents_DataSourceInstanceStateChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ObservableEvents.DataSourceInstanceStateChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string producer_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_producer_name());
    }

    // optional string data_source_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_data_source_name());
    }

    // optional .perfetto.protos.ObservableEvents.DataSourceInstanceState state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObservableEvents_DataSourceInstanceStateChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ObservableEvents_DataSourceInstanceStateChange*>(
      &from));
}

void ObservableEvents_DataSourceInstanceStateChange::MergeFrom(const ObservableEvents_DataSourceInstanceStateChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ObservableEvents.DataSourceInstanceStateChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_producer_name(from._internal_producer_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_data_source_name(from._internal_data_source_name());
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObservableEvents_DataSourceInstanceStateChange::CopyFrom(const ObservableEvents_DataSourceInstanceStateChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ObservableEvents.DataSourceInstanceStateChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservableEvents_DataSourceInstanceStateChange::IsInitialized() const {
  return true;
}

void ObservableEvents_DataSourceInstanceStateChange::InternalSwap(ObservableEvents_DataSourceInstanceStateChange* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  producer_name_.Swap(&other->producer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_source_name_.Swap(&other->data_source_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(state_, other->state_);
}

std::string ObservableEvents_DataSourceInstanceStateChange::GetTypeName() const {
  return "perfetto.protos.ObservableEvents.DataSourceInstanceStateChange";
}


// ===================================================================

class ObservableEvents::_Internal {
 public:
  using HasBits = decltype(std::declval<ObservableEvents>()._has_bits_);
  static void set_has_all_data_sources_started(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ObservableEvents::ObservableEvents(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  instance_state_changes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ObservableEvents)
}
ObservableEvents::ObservableEvents(const ObservableEvents& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      instance_state_changes_(from.instance_state_changes_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  all_data_sources_started_ = from.all_data_sources_started_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ObservableEvents)
}

void ObservableEvents::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObservableEvents_protos_2fperfetto_2fcommon_2fobservable_5fevents_2eproto.base);
  all_data_sources_started_ = false;
}

ObservableEvents::~ObservableEvents() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ObservableEvents)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ObservableEvents::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ObservableEvents::ArenaDtor(void* object) {
  ObservableEvents* _this = reinterpret_cast< ObservableEvents* >(object);
  (void)_this;
}
void ObservableEvents::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObservableEvents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObservableEvents& ObservableEvents::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObservableEvents_protos_2fperfetto_2fcommon_2fobservable_5fevents_2eproto.base);
  return *internal_default_instance();
}


void ObservableEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ObservableEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instance_state_changes_.Clear();
  all_data_sources_started_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObservableEvents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perfetto.protos.ObservableEvents.DataSourceInstanceStateChange instance_state_changes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instance_state_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool all_data_sources_started = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_all_data_sources_started(&has_bits);
          all_data_sources_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObservableEvents::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ObservableEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.ObservableEvents.DataSourceInstanceStateChange instance_state_changes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_instance_state_changes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_instance_state_changes(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool all_data_sources_started = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_all_data_sources_started(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ObservableEvents)
  return target;
}

size_t ObservableEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ObservableEvents)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ObservableEvents.DataSourceInstanceStateChange instance_state_changes = 1;
  total_size += 1UL * this->_internal_instance_state_changes_size();
  for (const auto& msg : this->instance_state_changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool all_data_sources_started = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObservableEvents::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ObservableEvents*>(
      &from));
}

void ObservableEvents::MergeFrom(const ObservableEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ObservableEvents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instance_state_changes_.MergeFrom(from.instance_state_changes_);
  if (from._internal_has_all_data_sources_started()) {
    _internal_set_all_data_sources_started(from._internal_all_data_sources_started());
  }
}

void ObservableEvents::CopyFrom(const ObservableEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ObservableEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservableEvents::IsInitialized() const {
  return true;
}

void ObservableEvents::InternalSwap(ObservableEvents* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  instance_state_changes_.InternalSwap(&other->instance_state_changes_);
  swap(all_data_sources_started_, other->all_data_sources_started_);
}

std::string ObservableEvents::GetTypeName() const {
  return "perfetto.protos.ObservableEvents";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ObservableEvents_DataSourceInstanceStateChange* Arena::CreateMaybeMessage< ::perfetto::protos::ObservableEvents_DataSourceInstanceStateChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ObservableEvents_DataSourceInstanceStateChange >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ObservableEvents* Arena::CreateMaybeMessage< ::perfetto::protos::ObservableEvents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ObservableEvents >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
