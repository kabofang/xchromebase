// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/tracing_service_state.proto

#include "protos/perfetto/common/tracing_service_state.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2fdata_5fsource_5fdescriptor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DataSourceDescriptor_protos_2fperfetto_2fcommon_2fdata_5fsource_5fdescriptor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TracingServiceState_DataSource_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TracingServiceState_Producer_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TracingServiceState_TracingSession_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto;
namespace perfetto {
namespace protos {
class TracingServiceState_ProducerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TracingServiceState_Producer> _instance;
} _TracingServiceState_Producer_default_instance_;
class TracingServiceState_DataSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TracingServiceState_DataSource> _instance;
} _TracingServiceState_DataSource_default_instance_;
class TracingServiceState_TracingSessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TracingServiceState_TracingSession> _instance;
} _TracingServiceState_TracingSession_default_instance_;
class TracingServiceStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TracingServiceState> _instance;
} _TracingServiceState_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_TracingServiceState_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TracingServiceState_default_instance_;
    new (ptr) ::perfetto::protos::TracingServiceState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TracingServiceState_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TracingServiceState_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto}, {
      &scc_info_TracingServiceState_Producer_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto.base,
      &scc_info_TracingServiceState_DataSource_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto.base,
      &scc_info_TracingServiceState_TracingSession_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_TracingServiceState_DataSource_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TracingServiceState_DataSource_default_instance_;
    new (ptr) ::perfetto::protos::TracingServiceState_DataSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TracingServiceState_DataSource_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TracingServiceState_DataSource_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto}, {
      &scc_info_DataSourceDescriptor_protos_2fperfetto_2fcommon_2fdata_5fsource_5fdescriptor_2eproto.base,}};

static void InitDefaultsscc_info_TracingServiceState_Producer_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TracingServiceState_Producer_default_instance_;
    new (ptr) ::perfetto::protos::TracingServiceState_Producer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TracingServiceState_Producer_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TracingServiceState_Producer_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto}, {}};

static void InitDefaultsscc_info_TracingServiceState_TracingSession_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_TracingServiceState_TracingSession_default_instance_;
    new (ptr) ::perfetto::protos::TracingServiceState_TracingSession();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TracingServiceState_TracingSession_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TracingServiceState_TracingSession_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto}, {}};

namespace perfetto {
namespace protos {

// ===================================================================

class TracingServiceState_Producer::_Internal {
 public:
  using HasBits = decltype(std::declval<TracingServiceState_Producer>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sdk_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TracingServiceState_Producer::TracingServiceState_Producer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TracingServiceState.Producer)
}
TracingServiceState_Producer::TracingServiceState_Producer(const TracingServiceState_Producer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  sdk_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sdk_version()) {
    sdk_version_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sdk_version(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(pid_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TracingServiceState.Producer)
}

void TracingServiceState_Producer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TracingServiceState_Producer_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdk_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&pid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(pid_));
}

TracingServiceState_Producer::~TracingServiceState_Producer() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TracingServiceState.Producer)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TracingServiceState_Producer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdk_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TracingServiceState_Producer::ArenaDtor(void* object) {
  TracingServiceState_Producer* _this = reinterpret_cast< TracingServiceState_Producer* >(object);
  (void)_this;
}
void TracingServiceState_Producer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TracingServiceState_Producer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TracingServiceState_Producer& TracingServiceState_Producer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TracingServiceState_Producer_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto.base);
  return *internal_default_instance();
}


void TracingServiceState_Producer::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TracingServiceState.Producer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sdk_version_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pid_) -
        reinterpret_cast<char*>(&id_)) + sizeof(pid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TracingServiceState_Producer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sdk_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sdk_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TracingServiceState_Producer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TracingServiceState.Producer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional int32 uid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_uid(), target);
  }

  // optional string sdk_version = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sdk_version(), target);
  }

  // optional int32 pid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TracingServiceState.Producer)
  return target;
}

size_t TracingServiceState_Producer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TracingServiceState.Producer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string sdk_version = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sdk_version());
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_id());
    }

    // optional int32 uid = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_uid());
    }

    // optional int32 pid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TracingServiceState_Producer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TracingServiceState_Producer*>(
      &from));
}

void TracingServiceState_Producer::MergeFrom(const TracingServiceState_Producer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TracingServiceState.Producer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sdk_version(from._internal_sdk_version());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000010u) {
      pid_ = from.pid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TracingServiceState_Producer::CopyFrom(const TracingServiceState_Producer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TracingServiceState.Producer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracingServiceState_Producer::IsInitialized() const {
  return true;
}

void TracingServiceState_Producer::InternalSwap(TracingServiceState_Producer* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sdk_version_.Swap(&other->sdk_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TracingServiceState_Producer, pid_)
      + sizeof(TracingServiceState_Producer::pid_)
      - PROTOBUF_FIELD_OFFSET(TracingServiceState_Producer, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

std::string TracingServiceState_Producer::GetTypeName() const {
  return "perfetto.protos.TracingServiceState.Producer";
}


// ===================================================================

class TracingServiceState_DataSource::_Internal {
 public:
  using HasBits = decltype(std::declval<TracingServiceState_DataSource>()._has_bits_);
  static const ::perfetto::protos::DataSourceDescriptor& ds_descriptor(const TracingServiceState_DataSource* msg);
  static void set_has_ds_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_producer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::perfetto::protos::DataSourceDescriptor&
TracingServiceState_DataSource::_Internal::ds_descriptor(const TracingServiceState_DataSource* msg) {
  return *msg->ds_descriptor_;
}
void TracingServiceState_DataSource::clear_ds_descriptor() {
  if (ds_descriptor_ != nullptr) ds_descriptor_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TracingServiceState_DataSource::TracingServiceState_DataSource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TracingServiceState.DataSource)
}
TracingServiceState_DataSource::TracingServiceState_DataSource(const TracingServiceState_DataSource& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_ds_descriptor()) {
    ds_descriptor_ = new ::perfetto::protos::DataSourceDescriptor(*from.ds_descriptor_);
  } else {
    ds_descriptor_ = nullptr;
  }
  producer_id_ = from.producer_id_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TracingServiceState.DataSource)
}

void TracingServiceState_DataSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TracingServiceState_DataSource_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ds_descriptor_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&producer_id_) -
      reinterpret_cast<char*>(&ds_descriptor_)) + sizeof(producer_id_));
}

TracingServiceState_DataSource::~TracingServiceState_DataSource() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TracingServiceState.DataSource)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TracingServiceState_DataSource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ds_descriptor_;
}

void TracingServiceState_DataSource::ArenaDtor(void* object) {
  TracingServiceState_DataSource* _this = reinterpret_cast< TracingServiceState_DataSource* >(object);
  (void)_this;
}
void TracingServiceState_DataSource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TracingServiceState_DataSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TracingServiceState_DataSource& TracingServiceState_DataSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TracingServiceState_DataSource_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto.base);
  return *internal_default_instance();
}


void TracingServiceState_DataSource::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TracingServiceState.DataSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ds_descriptor_ != nullptr);
    ds_descriptor_->Clear();
  }
  producer_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TracingServiceState_DataSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ds_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 producer_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_producer_id(&has_bits);
          producer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TracingServiceState_DataSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TracingServiceState.DataSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ds_descriptor(this), target, stream);
  }

  // optional int32 producer_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_producer_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TracingServiceState.DataSource)
  return target;
}

size_t TracingServiceState_DataSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TracingServiceState.DataSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .perfetto.protos.DataSourceDescriptor ds_descriptor = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ds_descriptor_);
    }

    // optional int32 producer_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_producer_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TracingServiceState_DataSource::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TracingServiceState_DataSource*>(
      &from));
}

void TracingServiceState_DataSource::MergeFrom(const TracingServiceState_DataSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TracingServiceState.DataSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ds_descriptor()->::perfetto::protos::DataSourceDescriptor::MergeFrom(from._internal_ds_descriptor());
    }
    if (cached_has_bits & 0x00000002u) {
      producer_id_ = from.producer_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TracingServiceState_DataSource::CopyFrom(const TracingServiceState_DataSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TracingServiceState.DataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracingServiceState_DataSource::IsInitialized() const {
  return true;
}

void TracingServiceState_DataSource::InternalSwap(TracingServiceState_DataSource* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TracingServiceState_DataSource, producer_id_)
      + sizeof(TracingServiceState_DataSource::producer_id_)
      - PROTOBUF_FIELD_OFFSET(TracingServiceState_DataSource, ds_descriptor_)>(
          reinterpret_cast<char*>(&ds_descriptor_),
          reinterpret_cast<char*>(&other->ds_descriptor_));
}

std::string TracingServiceState_DataSource::GetTypeName() const {
  return "perfetto.protos.TracingServiceState.DataSource";
}


// ===================================================================

class TracingServiceState_TracingSession::_Internal {
 public:
  using HasBits = decltype(std::declval<TracingServiceState_TracingSession>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_consumer_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unique_session_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_data_sources(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_start_realtime_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

TracingServiceState_TracingSession::TracingServiceState_TracingSession(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  buffer_size_kb_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TracingServiceState.TracingSession)
}
TracingServiceState_TracingSession::TracingServiceState_TracingSession(const TracingServiceState_TracingSession& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      buffer_size_kb_(from.buffer_size_kb_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_state()) {
    state_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_state(),
      GetArena());
  }
  unique_session_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_unique_session_name()) {
    unique_session_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_unique_session_name(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_data_sources_) -
    reinterpret_cast<char*>(&id_)) + sizeof(num_data_sources_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TracingServiceState.TracingSession)
}

void TracingServiceState_TracingSession::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TracingServiceState_TracingSession_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto.base);
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unique_session_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&num_data_sources_) -
      reinterpret_cast<char*>(&id_)) + sizeof(num_data_sources_));
}

TracingServiceState_TracingSession::~TracingServiceState_TracingSession() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TracingServiceState.TracingSession)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TracingServiceState_TracingSession::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unique_session_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TracingServiceState_TracingSession::ArenaDtor(void* object) {
  TracingServiceState_TracingSession* _this = reinterpret_cast< TracingServiceState_TracingSession* >(object);
  (void)_this;
}
void TracingServiceState_TracingSession::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TracingServiceState_TracingSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TracingServiceState_TracingSession& TracingServiceState_TracingSession::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TracingServiceState_TracingSession_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto.base);
  return *internal_default_instance();
}


void TracingServiceState_TracingSession::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TracingServiceState.TracingSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffer_size_kb_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      state_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      unique_session_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_data_sources_) -
        reinterpret_cast<char*>(&id_)) + sizeof(num_data_sources_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TracingServiceState_TracingSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 consumer_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_consumer_uid(&has_bits);
          consumer_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string unique_session_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_unique_session_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 buffer_size_kb = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_buffer_size_kb(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_buffer_size_kb(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 duration_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_data_sources = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_num_data_sources(&has_bits);
          num_data_sources_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 start_realtime_ns = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_start_realtime_ns(&has_bits);
          start_realtime_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TracingServiceState_TracingSession::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TracingServiceState.TracingSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // optional int32 consumer_uid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_consumer_uid(), target);
  }

  // optional string state = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_state(), target);
  }

  // optional string unique_session_name = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_unique_session_name(), target);
  }

  // repeated uint32 buffer_size_kb = 5;
  for (int i = 0, n = this->_internal_buffer_size_kb_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_buffer_size_kb(i), target);
  }

  // optional uint32 duration_ms = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_duration_ms(), target);
  }

  // optional uint32 num_data_sources = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_num_data_sources(), target);
  }

  // optional int64 start_realtime_ns = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_start_realtime_ns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TracingServiceState.TracingSession)
  return target;
}

size_t TracingServiceState_TracingSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TracingServiceState.TracingSession)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 buffer_size_kb = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->buffer_size_kb_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_buffer_size_kb_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string state = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_state());
    }

    // optional string unique_session_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unique_session_name());
    }

    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_id());
    }

    // optional int32 consumer_uid = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_consumer_uid());
    }

    // optional uint32 duration_ms = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duration_ms());
    }

    // optional int64 start_realtime_ns = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_start_realtime_ns());
    }

    // optional uint32 num_data_sources = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_data_sources());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TracingServiceState_TracingSession::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TracingServiceState_TracingSession*>(
      &from));
}

void TracingServiceState_TracingSession::MergeFrom(const TracingServiceState_TracingSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TracingServiceState.TracingSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buffer_size_kb_.MergeFrom(from.buffer_size_kb_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_state(from._internal_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_unique_session_name(from._internal_unique_session_name());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      consumer_uid_ = from.consumer_uid_;
    }
    if (cached_has_bits & 0x00000010u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      start_realtime_ns_ = from.start_realtime_ns_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_data_sources_ = from.num_data_sources_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TracingServiceState_TracingSession::CopyFrom(const TracingServiceState_TracingSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TracingServiceState.TracingSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracingServiceState_TracingSession::IsInitialized() const {
  return true;
}

void TracingServiceState_TracingSession::InternalSwap(TracingServiceState_TracingSession* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  buffer_size_kb_.InternalSwap(&other->buffer_size_kb_);
  state_.Swap(&other->state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  unique_session_name_.Swap(&other->unique_session_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TracingServiceState_TracingSession, num_data_sources_)
      + sizeof(TracingServiceState_TracingSession::num_data_sources_)
      - PROTOBUF_FIELD_OFFSET(TracingServiceState_TracingSession, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

std::string TracingServiceState_TracingSession::GetTypeName() const {
  return "perfetto.protos.TracingServiceState.TracingSession";
}


// ===================================================================

class TracingServiceState::_Internal {
 public:
  using HasBits = decltype(std::declval<TracingServiceState>()._has_bits_);
  static void set_has_supports_tracing_sessions(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_sessions(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_sessions_started(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tracing_service_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TracingServiceState::TracingServiceState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  producers_(arena),
  data_sources_(arena),
  tracing_sessions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.TracingServiceState)
}
TracingServiceState::TracingServiceState(const TracingServiceState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      producers_(from.producers_),
      data_sources_(from.data_sources_),
      tracing_sessions_(from.tracing_sessions_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  tracing_service_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tracing_service_version()) {
    tracing_service_version_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tracing_service_version(),
      GetArena());
  }
  ::memcpy(&num_sessions_, &from.num_sessions_,
    static_cast<size_t>(reinterpret_cast<char*>(&supports_tracing_sessions_) -
    reinterpret_cast<char*>(&num_sessions_)) + sizeof(supports_tracing_sessions_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.TracingServiceState)
}

void TracingServiceState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TracingServiceState_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto.base);
  tracing_service_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&num_sessions_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&supports_tracing_sessions_) -
      reinterpret_cast<char*>(&num_sessions_)) + sizeof(supports_tracing_sessions_));
}

TracingServiceState::~TracingServiceState() {
  // @@protoc_insertion_point(destructor:perfetto.protos.TracingServiceState)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TracingServiceState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tracing_service_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TracingServiceState::ArenaDtor(void* object) {
  TracingServiceState* _this = reinterpret_cast< TracingServiceState* >(object);
  (void)_this;
}
void TracingServiceState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TracingServiceState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TracingServiceState& TracingServiceState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TracingServiceState_protos_2fperfetto_2fcommon_2ftracing_5fservice_5fstate_2eproto.base);
  return *internal_default_instance();
}


void TracingServiceState::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.TracingServiceState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  producers_.Clear();
  data_sources_.Clear();
  tracing_sessions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tracing_service_version_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&num_sessions_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&supports_tracing_sessions_) -
        reinterpret_cast<char*>(&num_sessions_)) + sizeof(supports_tracing_sessions_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TracingServiceState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perfetto.protos.TracingServiceState.Producer producers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_producers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_sources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 num_sessions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_sessions(&has_bits);
          num_sessions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_sessions_started = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_sessions_started(&has_bits);
          num_sessions_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tracing_service_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_tracing_service_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tracing_sessions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool supports_tracing_sessions = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_supports_tracing_sessions(&has_bits);
          supports_tracing_sessions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TracingServiceState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.TracingServiceState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.TracingServiceState.Producer producers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_producers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_producers(i), target, stream);
  }

  // repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_sources_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_data_sources(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 num_sessions = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_sessions(), target);
  }

  // optional int32 num_sessions_started = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_num_sessions_started(), target);
  }

  // optional string tracing_service_version = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tracing_service_version(), target);
  }

  // repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tracing_sessions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_tracing_sessions(i), target, stream);
  }

  // optional bool supports_tracing_sessions = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_supports_tracing_sessions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.TracingServiceState)
  return target;
}

size_t TracingServiceState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.TracingServiceState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.TracingServiceState.Producer producers = 1;
  total_size += 1UL * this->_internal_producers_size();
  for (const auto& msg : this->producers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.TracingServiceState.DataSource data_sources = 2;
  total_size += 1UL * this->_internal_data_sources_size();
  for (const auto& msg : this->data_sources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.TracingServiceState.TracingSession tracing_sessions = 6;
  total_size += 1UL * this->_internal_tracing_sessions_size();
  for (const auto& msg : this->tracing_sessions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string tracing_service_version = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tracing_service_version());
    }

    // optional int32 num_sessions = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_sessions());
    }

    // optional int32 num_sessions_started = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_sessions_started());
    }

    // optional bool supports_tracing_sessions = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TracingServiceState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TracingServiceState*>(
      &from));
}

void TracingServiceState::MergeFrom(const TracingServiceState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.TracingServiceState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  producers_.MergeFrom(from.producers_);
  data_sources_.MergeFrom(from.data_sources_);
  tracing_sessions_.MergeFrom(from.tracing_sessions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tracing_service_version(from._internal_tracing_service_version());
    }
    if (cached_has_bits & 0x00000002u) {
      num_sessions_ = from.num_sessions_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_sessions_started_ = from.num_sessions_started_;
    }
    if (cached_has_bits & 0x00000008u) {
      supports_tracing_sessions_ = from.supports_tracing_sessions_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TracingServiceState::CopyFrom(const TracingServiceState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.TracingServiceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracingServiceState::IsInitialized() const {
  return true;
}

void TracingServiceState::InternalSwap(TracingServiceState* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  producers_.InternalSwap(&other->producers_);
  data_sources_.InternalSwap(&other->data_sources_);
  tracing_sessions_.InternalSwap(&other->tracing_sessions_);
  tracing_service_version_.Swap(&other->tracing_service_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TracingServiceState, supports_tracing_sessions_)
      + sizeof(TracingServiceState::supports_tracing_sessions_)
      - PROTOBUF_FIELD_OFFSET(TracingServiceState, num_sessions_)>(
          reinterpret_cast<char*>(&num_sessions_),
          reinterpret_cast<char*>(&other->num_sessions_));
}

std::string TracingServiceState::GetTypeName() const {
  return "perfetto.protos.TracingServiceState";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::TracingServiceState_Producer* Arena::CreateMaybeMessage< ::perfetto::protos::TracingServiceState_Producer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TracingServiceState_Producer >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TracingServiceState_DataSource* Arena::CreateMaybeMessage< ::perfetto::protos::TracingServiceState_DataSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TracingServiceState_DataSource >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TracingServiceState_TracingSession* Arena::CreateMaybeMessage< ::perfetto::protos::TracingServiceState_TracingSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TracingServiceState_TracingSession >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::TracingServiceState* Arena::CreateMaybeMessage< ::perfetto::protos::TracingServiceState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::TracingServiceState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
