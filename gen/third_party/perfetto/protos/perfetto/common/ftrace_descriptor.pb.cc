// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/ftrace_descriptor.proto

#include "protos/perfetto/common/ftrace_descriptor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2fftrace_5fdescriptor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FtraceDescriptor_AtraceCategory_protos_2fperfetto_2fcommon_2fftrace_5fdescriptor_2eproto;
namespace perfetto {
namespace protos {
class FtraceDescriptor_AtraceCategoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FtraceDescriptor_AtraceCategory> _instance;
} _FtraceDescriptor_AtraceCategory_default_instance_;
class FtraceDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FtraceDescriptor> _instance;
} _FtraceDescriptor_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_FtraceDescriptor_protos_2fperfetto_2fcommon_2fftrace_5fdescriptor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_FtraceDescriptor_default_instance_;
    new (ptr) ::perfetto::protos::FtraceDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FtraceDescriptor_protos_2fperfetto_2fcommon_2fftrace_5fdescriptor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FtraceDescriptor_protos_2fperfetto_2fcommon_2fftrace_5fdescriptor_2eproto}, {
      &scc_info_FtraceDescriptor_AtraceCategory_protos_2fperfetto_2fcommon_2fftrace_5fdescriptor_2eproto.base,}};

static void InitDefaultsscc_info_FtraceDescriptor_AtraceCategory_protos_2fperfetto_2fcommon_2fftrace_5fdescriptor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_FtraceDescriptor_AtraceCategory_default_instance_;
    new (ptr) ::perfetto::protos::FtraceDescriptor_AtraceCategory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FtraceDescriptor_AtraceCategory_protos_2fperfetto_2fcommon_2fftrace_5fdescriptor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FtraceDescriptor_AtraceCategory_protos_2fperfetto_2fcommon_2fftrace_5fdescriptor_2eproto}, {}};

namespace perfetto {
namespace protos {

// ===================================================================

class FtraceDescriptor_AtraceCategory::_Internal {
 public:
  using HasBits = decltype(std::declval<FtraceDescriptor_AtraceCategory>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FtraceDescriptor_AtraceCategory::FtraceDescriptor_AtraceCategory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FtraceDescriptor.AtraceCategory)
}
FtraceDescriptor_AtraceCategory::FtraceDescriptor_AtraceCategory(const FtraceDescriptor_AtraceCategory& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceDescriptor.AtraceCategory)
}

void FtraceDescriptor_AtraceCategory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FtraceDescriptor_AtraceCategory_protos_2fperfetto_2fcommon_2fftrace_5fdescriptor_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FtraceDescriptor_AtraceCategory::~FtraceDescriptor_AtraceCategory() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceDescriptor.AtraceCategory)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void FtraceDescriptor_AtraceCategory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FtraceDescriptor_AtraceCategory::ArenaDtor(void* object) {
  FtraceDescriptor_AtraceCategory* _this = reinterpret_cast< FtraceDescriptor_AtraceCategory* >(object);
  (void)_this;
}
void FtraceDescriptor_AtraceCategory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FtraceDescriptor_AtraceCategory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FtraceDescriptor_AtraceCategory& FtraceDescriptor_AtraceCategory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FtraceDescriptor_AtraceCategory_protos_2fperfetto_2fcommon_2fftrace_5fdescriptor_2eproto.base);
  return *internal_default_instance();
}


void FtraceDescriptor_AtraceCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceDescriptor.AtraceCategory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FtraceDescriptor_AtraceCategory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FtraceDescriptor_AtraceCategory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FtraceDescriptor.AtraceCategory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FtraceDescriptor.AtraceCategory)
  return target;
}

size_t FtraceDescriptor_AtraceCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceDescriptor.AtraceCategory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string description = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FtraceDescriptor_AtraceCategory::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FtraceDescriptor_AtraceCategory*>(
      &from));
}

void FtraceDescriptor_AtraceCategory::MergeFrom(const FtraceDescriptor_AtraceCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceDescriptor.AtraceCategory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_description(from._internal_description());
    }
  }
}

void FtraceDescriptor_AtraceCategory::CopyFrom(const FtraceDescriptor_AtraceCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceDescriptor.AtraceCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceDescriptor_AtraceCategory::IsInitialized() const {
  return true;
}

void FtraceDescriptor_AtraceCategory::InternalSwap(FtraceDescriptor_AtraceCategory* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string FtraceDescriptor_AtraceCategory::GetTypeName() const {
  return "perfetto.protos.FtraceDescriptor.AtraceCategory";
}


// ===================================================================

class FtraceDescriptor::_Internal {
 public:
};

FtraceDescriptor::FtraceDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  atrace_categories_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FtraceDescriptor)
}
FtraceDescriptor::FtraceDescriptor(const FtraceDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      atrace_categories_(from.atrace_categories_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceDescriptor)
}

void FtraceDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FtraceDescriptor_protos_2fperfetto_2fcommon_2fftrace_5fdescriptor_2eproto.base);
}

FtraceDescriptor::~FtraceDescriptor() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void FtraceDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FtraceDescriptor::ArenaDtor(void* object) {
  FtraceDescriptor* _this = reinterpret_cast< FtraceDescriptor* >(object);
  (void)_this;
}
void FtraceDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FtraceDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FtraceDescriptor& FtraceDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FtraceDescriptor_protos_2fperfetto_2fcommon_2fftrace_5fdescriptor_2eproto.base);
  return *internal_default_instance();
}


void FtraceDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  atrace_categories_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FtraceDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perfetto.protos.FtraceDescriptor.AtraceCategory atrace_categories = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_atrace_categories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FtraceDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FtraceDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.FtraceDescriptor.AtraceCategory atrace_categories = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_atrace_categories_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_atrace_categories(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FtraceDescriptor)
  return target;
}

size_t FtraceDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.FtraceDescriptor.AtraceCategory atrace_categories = 1;
  total_size += 1UL * this->_internal_atrace_categories_size();
  for (const auto& msg : this->atrace_categories_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FtraceDescriptor::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FtraceDescriptor*>(
      &from));
}

void FtraceDescriptor::MergeFrom(const FtraceDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  atrace_categories_.MergeFrom(from.atrace_categories_);
}

void FtraceDescriptor::CopyFrom(const FtraceDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceDescriptor::IsInitialized() const {
  return true;
}

void FtraceDescriptor::InternalSwap(FtraceDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  atrace_categories_.InternalSwap(&other->atrace_categories_);
}

std::string FtraceDescriptor::GetTypeName() const {
  return "perfetto.protos.FtraceDescriptor";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceDescriptor_AtraceCategory* Arena::CreateMaybeMessage< ::perfetto::protos::FtraceDescriptor_AtraceCategory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FtraceDescriptor_AtraceCategory >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceDescriptor* Arena::CreateMaybeMessage< ::perfetto::protos::FtraceDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FtraceDescriptor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
