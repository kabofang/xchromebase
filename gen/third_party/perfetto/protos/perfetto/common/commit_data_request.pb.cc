// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/common/commit_data_request.proto

#include "protos/perfetto/common/commit_data_request.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommitDataRequest_ChunkToPatch_protos_2fperfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommitDataRequest_ChunkToPatch_Patch_protos_2fperfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommitDataRequest_ChunksToMove_protos_2fperfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto;
namespace perfetto {
namespace protos {
class CommitDataRequest_ChunksToMoveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommitDataRequest_ChunksToMove> _instance;
} _CommitDataRequest_ChunksToMove_default_instance_;
class CommitDataRequest_ChunkToPatch_PatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommitDataRequest_ChunkToPatch_Patch> _instance;
} _CommitDataRequest_ChunkToPatch_Patch_default_instance_;
class CommitDataRequest_ChunkToPatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommitDataRequest_ChunkToPatch> _instance;
} _CommitDataRequest_ChunkToPatch_default_instance_;
class CommitDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommitDataRequest> _instance;
} _CommitDataRequest_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_CommitDataRequest_protos_2fperfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_CommitDataRequest_default_instance_;
    new (ptr) ::perfetto::protos::CommitDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CommitDataRequest_protos_2fperfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CommitDataRequest_protos_2fperfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto}, {
      &scc_info_CommitDataRequest_ChunksToMove_protos_2fperfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto.base,
      &scc_info_CommitDataRequest_ChunkToPatch_protos_2fperfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto.base,}};

static void InitDefaultsscc_info_CommitDataRequest_ChunkToPatch_protos_2fperfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_CommitDataRequest_ChunkToPatch_default_instance_;
    new (ptr) ::perfetto::protos::CommitDataRequest_ChunkToPatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommitDataRequest_ChunkToPatch_protos_2fperfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CommitDataRequest_ChunkToPatch_protos_2fperfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto}, {
      &scc_info_CommitDataRequest_ChunkToPatch_Patch_protos_2fperfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto.base,}};

static void InitDefaultsscc_info_CommitDataRequest_ChunkToPatch_Patch_protos_2fperfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_CommitDataRequest_ChunkToPatch_Patch_default_instance_;
    new (ptr) ::perfetto::protos::CommitDataRequest_ChunkToPatch_Patch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommitDataRequest_ChunkToPatch_Patch_protos_2fperfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommitDataRequest_ChunkToPatch_Patch_protos_2fperfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto}, {}};

static void InitDefaultsscc_info_CommitDataRequest_ChunksToMove_protos_2fperfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_CommitDataRequest_ChunksToMove_default_instance_;
    new (ptr) ::perfetto::protos::CommitDataRequest_ChunksToMove();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommitDataRequest_ChunksToMove_protos_2fperfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommitDataRequest_ChunksToMove_protos_2fperfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto}, {}};

namespace perfetto {
namespace protos {

// ===================================================================

class CommitDataRequest_ChunksToMove::_Internal {
 public:
  using HasBits = decltype(std::declval<CommitDataRequest_ChunksToMove>()._has_bits_);
  static void set_has_page(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chunk(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CommitDataRequest_ChunksToMove::CommitDataRequest_ChunksToMove(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.CommitDataRequest.ChunksToMove)
}
CommitDataRequest_ChunksToMove::CommitDataRequest_ChunksToMove(const CommitDataRequest_ChunksToMove& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_buffer_) -
    reinterpret_cast<char*>(&page_)) + sizeof(target_buffer_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CommitDataRequest.ChunksToMove)
}

void CommitDataRequest_ChunksToMove::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&page_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&target_buffer_) -
      reinterpret_cast<char*>(&page_)) + sizeof(target_buffer_));
}

CommitDataRequest_ChunksToMove::~CommitDataRequest_ChunksToMove() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CommitDataRequest.ChunksToMove)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CommitDataRequest_ChunksToMove::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CommitDataRequest_ChunksToMove::ArenaDtor(void* object) {
  CommitDataRequest_ChunksToMove* _this = reinterpret_cast< CommitDataRequest_ChunksToMove* >(object);
  (void)_this;
}
void CommitDataRequest_ChunksToMove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommitDataRequest_ChunksToMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommitDataRequest_ChunksToMove& CommitDataRequest_ChunksToMove::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommitDataRequest_ChunksToMove_protos_2fperfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto.base);
  return *internal_default_instance();
}


void CommitDataRequest_ChunksToMove::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CommitDataRequest.ChunksToMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&page_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_buffer_) -
        reinterpret_cast<char*>(&page_)) + sizeof(target_buffer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CommitDataRequest_ChunksToMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_page(&has_bits);
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 chunk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_chunk(&has_bits);
          chunk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_buffer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_target_buffer(&has_bits);
          target_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommitDataRequest_ChunksToMove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.CommitDataRequest.ChunksToMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 page = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page(), target);
  }

  // optional uint32 chunk = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_chunk(), target);
  }

  // optional uint32 target_buffer = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_target_buffer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.CommitDataRequest.ChunksToMove)
  return target;
}

size_t CommitDataRequest_ChunksToMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CommitDataRequest.ChunksToMove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 page = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_page());
    }

    // optional uint32 chunk = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_chunk());
    }

    // optional uint32 target_buffer = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_buffer());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommitDataRequest_ChunksToMove::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CommitDataRequest_ChunksToMove*>(
      &from));
}

void CommitDataRequest_ChunksToMove::MergeFrom(const CommitDataRequest_ChunksToMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CommitDataRequest.ChunksToMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      page_ = from.page_;
    }
    if (cached_has_bits & 0x00000002u) {
      chunk_ = from.chunk_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_buffer_ = from.target_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommitDataRequest_ChunksToMove::CopyFrom(const CommitDataRequest_ChunksToMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CommitDataRequest.ChunksToMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitDataRequest_ChunksToMove::IsInitialized() const {
  return true;
}

void CommitDataRequest_ChunksToMove::InternalSwap(CommitDataRequest_ChunksToMove* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommitDataRequest_ChunksToMove, target_buffer_)
      + sizeof(CommitDataRequest_ChunksToMove::target_buffer_)
      - PROTOBUF_FIELD_OFFSET(CommitDataRequest_ChunksToMove, page_)>(
          reinterpret_cast<char*>(&page_),
          reinterpret_cast<char*>(&other->page_));
}

std::string CommitDataRequest_ChunksToMove::GetTypeName() const {
  return "perfetto.protos.CommitDataRequest.ChunksToMove";
}


// ===================================================================

class CommitDataRequest_ChunkToPatch_Patch::_Internal {
 public:
  using HasBits = decltype(std::declval<CommitDataRequest_ChunkToPatch_Patch>()._has_bits_);
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CommitDataRequest_ChunkToPatch_Patch::CommitDataRequest_ChunkToPatch_Patch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
}
CommitDataRequest_ChunkToPatch_Patch::CommitDataRequest_ChunkToPatch_Patch(const CommitDataRequest_ChunkToPatch_Patch& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
}

void CommitDataRequest_ChunkToPatch_Patch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommitDataRequest_ChunkToPatch_Patch_protos_2fperfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  offset_ = 0u;
}

CommitDataRequest_ChunkToPatch_Patch::~CommitDataRequest_ChunkToPatch_Patch() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CommitDataRequest_ChunkToPatch_Patch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommitDataRequest_ChunkToPatch_Patch::ArenaDtor(void* object) {
  CommitDataRequest_ChunkToPatch_Patch* _this = reinterpret_cast< CommitDataRequest_ChunkToPatch_Patch* >(object);
  (void)_this;
}
void CommitDataRequest_ChunkToPatch_Patch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommitDataRequest_ChunkToPatch_Patch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommitDataRequest_ChunkToPatch_Patch& CommitDataRequest_ChunkToPatch_Patch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommitDataRequest_ChunkToPatch_Patch_protos_2fperfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto.base);
  return *internal_default_instance();
}


void CommitDataRequest_ChunkToPatch_Patch::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  offset_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CommitDataRequest_ChunkToPatch_Patch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommitDataRequest_ChunkToPatch_Patch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 offset = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_offset(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
  return target;
}

size_t CommitDataRequest_ChunkToPatch_Patch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional uint32 offset = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_offset());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommitDataRequest_ChunkToPatch_Patch::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CommitDataRequest_ChunkToPatch_Patch*>(
      &from));
}

void CommitDataRequest_ChunkToPatch_Patch::MergeFrom(const CommitDataRequest_ChunkToPatch_Patch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      offset_ = from.offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommitDataRequest_ChunkToPatch_Patch::CopyFrom(const CommitDataRequest_ChunkToPatch_Patch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CommitDataRequest.ChunkToPatch.Patch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitDataRequest_ChunkToPatch_Patch::IsInitialized() const {
  return true;
}

void CommitDataRequest_ChunkToPatch_Patch::InternalSwap(CommitDataRequest_ChunkToPatch_Patch* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(offset_, other->offset_);
}

std::string CommitDataRequest_ChunkToPatch_Patch::GetTypeName() const {
  return "perfetto.protos.CommitDataRequest.ChunkToPatch.Patch";
}


// ===================================================================

class CommitDataRequest_ChunkToPatch::_Internal {
 public:
  using HasBits = decltype(std::declval<CommitDataRequest_ChunkToPatch>()._has_bits_);
  static void set_has_target_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_writer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chunk_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_has_more_patches(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CommitDataRequest_ChunkToPatch::CommitDataRequest_ChunkToPatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  patches_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.CommitDataRequest.ChunkToPatch)
}
CommitDataRequest_ChunkToPatch::CommitDataRequest_ChunkToPatch(const CommitDataRequest_ChunkToPatch& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      patches_(from.patches_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&target_buffer_, &from.target_buffer_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_more_patches_) -
    reinterpret_cast<char*>(&target_buffer_)) + sizeof(has_more_patches_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CommitDataRequest.ChunkToPatch)
}

void CommitDataRequest_ChunkToPatch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommitDataRequest_ChunkToPatch_protos_2fperfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&target_buffer_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&has_more_patches_) -
      reinterpret_cast<char*>(&target_buffer_)) + sizeof(has_more_patches_));
}

CommitDataRequest_ChunkToPatch::~CommitDataRequest_ChunkToPatch() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CommitDataRequest.ChunkToPatch)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CommitDataRequest_ChunkToPatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CommitDataRequest_ChunkToPatch::ArenaDtor(void* object) {
  CommitDataRequest_ChunkToPatch* _this = reinterpret_cast< CommitDataRequest_ChunkToPatch* >(object);
  (void)_this;
}
void CommitDataRequest_ChunkToPatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommitDataRequest_ChunkToPatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommitDataRequest_ChunkToPatch& CommitDataRequest_ChunkToPatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommitDataRequest_ChunkToPatch_protos_2fperfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto.base);
  return *internal_default_instance();
}


void CommitDataRequest_ChunkToPatch::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CommitDataRequest.ChunkToPatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  patches_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&target_buffer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_more_patches_) -
        reinterpret_cast<char*>(&target_buffer_)) + sizeof(has_more_patches_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CommitDataRequest_ChunkToPatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 target_buffer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_target_buffer(&has_bits);
          target_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 writer_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_writer_id(&has_bits);
          writer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 chunk_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_chunk_id(&has_bits);
          chunk_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_patches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool has_more_patches = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_has_more_patches(&has_bits);
          has_more_patches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommitDataRequest_ChunkToPatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.CommitDataRequest.ChunkToPatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 target_buffer = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target_buffer(), target);
  }

  // optional uint32 writer_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_writer_id(), target);
  }

  // optional uint32 chunk_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_chunk_id(), target);
  }

  // repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_patches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_patches(i), target, stream);
  }

  // optional bool has_more_patches = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_has_more_patches(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.CommitDataRequest.ChunkToPatch)
  return target;
}

size_t CommitDataRequest_ChunkToPatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CommitDataRequest.ChunkToPatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.CommitDataRequest.ChunkToPatch.Patch patches = 4;
  total_size += 1UL * this->_internal_patches_size();
  for (const auto& msg : this->patches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 target_buffer = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_buffer());
    }

    // optional uint32 writer_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_writer_id());
    }

    // optional uint32 chunk_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_chunk_id());
    }

    // optional bool has_more_patches = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommitDataRequest_ChunkToPatch::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CommitDataRequest_ChunkToPatch*>(
      &from));
}

void CommitDataRequest_ChunkToPatch::MergeFrom(const CommitDataRequest_ChunkToPatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CommitDataRequest.ChunkToPatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  patches_.MergeFrom(from.patches_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      target_buffer_ = from.target_buffer_;
    }
    if (cached_has_bits & 0x00000002u) {
      writer_id_ = from.writer_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      chunk_id_ = from.chunk_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      has_more_patches_ = from.has_more_patches_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommitDataRequest_ChunkToPatch::CopyFrom(const CommitDataRequest_ChunkToPatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CommitDataRequest.ChunkToPatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitDataRequest_ChunkToPatch::IsInitialized() const {
  return true;
}

void CommitDataRequest_ChunkToPatch::InternalSwap(CommitDataRequest_ChunkToPatch* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  patches_.InternalSwap(&other->patches_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommitDataRequest_ChunkToPatch, has_more_patches_)
      + sizeof(CommitDataRequest_ChunkToPatch::has_more_patches_)
      - PROTOBUF_FIELD_OFFSET(CommitDataRequest_ChunkToPatch, target_buffer_)>(
          reinterpret_cast<char*>(&target_buffer_),
          reinterpret_cast<char*>(&other->target_buffer_));
}

std::string CommitDataRequest_ChunkToPatch::GetTypeName() const {
  return "perfetto.protos.CommitDataRequest.ChunkToPatch";
}


// ===================================================================

class CommitDataRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CommitDataRequest>()._has_bits_);
  static void set_has_flush_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CommitDataRequest::CommitDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  chunks_to_move_(arena),
  chunks_to_patch_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.CommitDataRequest)
}
CommitDataRequest::CommitDataRequest(const CommitDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      chunks_to_move_(from.chunks_to_move_),
      chunks_to_patch_(from.chunks_to_patch_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  flush_request_id_ = from.flush_request_id_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CommitDataRequest)
}

void CommitDataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommitDataRequest_protos_2fperfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto.base);
  flush_request_id_ = PROTOBUF_ULONGLONG(0);
}

CommitDataRequest::~CommitDataRequest() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CommitDataRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CommitDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CommitDataRequest::ArenaDtor(void* object) {
  CommitDataRequest* _this = reinterpret_cast< CommitDataRequest* >(object);
  (void)_this;
}
void CommitDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommitDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommitDataRequest& CommitDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommitDataRequest_protos_2fperfetto_2fcommon_2fcommit_5fdata_5frequest_2eproto.base);
  return *internal_default_instance();
}


void CommitDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CommitDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunks_to_move_.Clear();
  chunks_to_patch_.Clear();
  flush_request_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CommitDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunks_to_move(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunks_to_patch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 flush_request_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_flush_request_id(&has_bits);
          flush_request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommitDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.CommitDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chunks_to_move_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_chunks_to_move(i), target, stream);
  }

  // repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chunks_to_patch_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_chunks_to_patch(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 flush_request_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_flush_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.CommitDataRequest)
  return target;
}

size_t CommitDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CommitDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.CommitDataRequest.ChunksToMove chunks_to_move = 1;
  total_size += 1UL * this->_internal_chunks_to_move_size();
  for (const auto& msg : this->chunks_to_move_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.CommitDataRequest.ChunkToPatch chunks_to_patch = 2;
  total_size += 1UL * this->_internal_chunks_to_patch_size();
  for (const auto& msg : this->chunks_to_patch_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 flush_request_id = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_flush_request_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommitDataRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CommitDataRequest*>(
      &from));
}

void CommitDataRequest::MergeFrom(const CommitDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CommitDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunks_to_move_.MergeFrom(from.chunks_to_move_);
  chunks_to_patch_.MergeFrom(from.chunks_to_patch_);
  if (from._internal_has_flush_request_id()) {
    _internal_set_flush_request_id(from._internal_flush_request_id());
  }
}

void CommitDataRequest::CopyFrom(const CommitDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CommitDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitDataRequest::IsInitialized() const {
  return true;
}

void CommitDataRequest::InternalSwap(CommitDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  chunks_to_move_.InternalSwap(&other->chunks_to_move_);
  chunks_to_patch_.InternalSwap(&other->chunks_to_patch_);
  swap(flush_request_id_, other->flush_request_id_);
}

std::string CommitDataRequest::GetTypeName() const {
  return "perfetto.protos.CommitDataRequest";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::CommitDataRequest_ChunksToMove* Arena::CreateMaybeMessage< ::perfetto::protos::CommitDataRequest_ChunksToMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::CommitDataRequest_ChunksToMove >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::CommitDataRequest_ChunkToPatch_Patch* Arena::CreateMaybeMessage< ::perfetto::protos::CommitDataRequest_ChunkToPatch_Patch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::CommitDataRequest_ChunkToPatch_Patch >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::CommitDataRequest_ChunkToPatch* Arena::CreateMaybeMessage< ::perfetto::protos::CommitDataRequest_ChunkToPatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::CommitDataRequest_ChunkToPatch >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::CommitDataRequest* Arena::CreateMaybeMessage< ::perfetto::protos::CommitDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::CommitDataRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
