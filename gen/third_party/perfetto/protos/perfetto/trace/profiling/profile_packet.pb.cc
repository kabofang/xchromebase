// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/profiling/profile_packet.proto

#include "protos/perfetto/trace/profiling/profile_packet.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Callstack_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Frame_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InternedString_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mapping_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PerfEvents_Timebase_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerfSample_ProducerEvent_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilePacket_HeapSample_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfilePacket_Histogram_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilePacket_Histogram_Bucket_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProfilePacket_ProcessHeapSamples_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfilePacket_ProcessStats_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto;
namespace perfetto {
namespace protos {
class ProfilePacket_HeapSampleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilePacket_HeapSample> _instance;
} _ProfilePacket_HeapSample_default_instance_;
class ProfilePacket_Histogram_BucketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilePacket_Histogram_Bucket> _instance;
} _ProfilePacket_Histogram_Bucket_default_instance_;
class ProfilePacket_HistogramDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilePacket_Histogram> _instance;
} _ProfilePacket_Histogram_default_instance_;
class ProfilePacket_ProcessStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilePacket_ProcessStats> _instance;
} _ProfilePacket_ProcessStats_default_instance_;
class ProfilePacket_ProcessHeapSamplesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilePacket_ProcessHeapSamples> _instance;
} _ProfilePacket_ProcessHeapSamples_default_instance_;
class ProfilePacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfilePacket> _instance;
} _ProfilePacket_default_instance_;
class StreamingAllocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamingAllocation> _instance;
} _StreamingAllocation_default_instance_;
class StreamingFreeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamingFree> _instance;
} _StreamingFree_default_instance_;
class StreamingProfilePacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamingProfilePacket> _instance;
} _StreamingProfilePacket_default_instance_;
class ProfilingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Profiling> _instance;
} _Profiling_default_instance_;
class PerfSample_ProducerEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerfSample_ProducerEvent> _instance;
} _PerfSample_ProducerEvent_default_instance_;
class PerfSampleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerfSample> _instance;
} _PerfSample_default_instance_;
class PerfSampleDefaultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerfSampleDefaults> _instance;
} _PerfSampleDefaults_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_PerfSample_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_PerfSample_default_instance_;
    new (ptr) ::perfetto::protos::PerfSample();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerfSample_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PerfSample_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto}, {
      &scc_info_PerfSample_ProducerEvent_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base,}};

static void InitDefaultsscc_info_PerfSample_ProducerEvent_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_PerfSample_ProducerEvent_default_instance_;
    new (ptr) ::perfetto::protos::PerfSample_ProducerEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerfSample_ProducerEvent_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PerfSample_ProducerEvent_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto}, {}};

static void InitDefaultsscc_info_PerfSampleDefaults_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_PerfSampleDefaults_default_instance_;
    new (ptr) ::perfetto::protos::PerfSampleDefaults();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerfSampleDefaults_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PerfSampleDefaults_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto}, {
      &scc_info_PerfEvents_Timebase_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto.base,}};

static void InitDefaultsscc_info_ProfilePacket_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_ProfilePacket_default_instance_;
    new (ptr) ::perfetto::protos::ProfilePacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ProfilePacket_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_ProfilePacket_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto}, {
      &scc_info_InternedString_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto.base,
      &scc_info_Mapping_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto.base,
      &scc_info_Frame_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto.base,
      &scc_info_Callstack_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fcommon_2eproto.base,
      &scc_info_ProfilePacket_ProcessHeapSamples_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base,}};

static void InitDefaultsscc_info_ProfilePacket_HeapSample_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_ProfilePacket_HeapSample_default_instance_;
    new (ptr) ::perfetto::protos::ProfilePacket_HeapSample();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilePacket_HeapSample_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfilePacket_HeapSample_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto}, {}};

static void InitDefaultsscc_info_ProfilePacket_Histogram_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_ProfilePacket_Histogram_default_instance_;
    new (ptr) ::perfetto::protos::ProfilePacket_Histogram();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfilePacket_Histogram_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProfilePacket_Histogram_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto}, {
      &scc_info_ProfilePacket_Histogram_Bucket_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base,}};

static void InitDefaultsscc_info_ProfilePacket_Histogram_Bucket_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_ProfilePacket_Histogram_Bucket_default_instance_;
    new (ptr) ::perfetto::protos::ProfilePacket_Histogram_Bucket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfilePacket_Histogram_Bucket_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfilePacket_Histogram_Bucket_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto}, {}};

static void InitDefaultsscc_info_ProfilePacket_ProcessHeapSamples_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_ProfilePacket_ProcessHeapSamples_default_instance_;
    new (ptr) ::perfetto::protos::ProfilePacket_ProcessHeapSamples();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProfilePacket_ProcessHeapSamples_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ProfilePacket_ProcessHeapSamples_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto}, {
      &scc_info_ProfilePacket_ProcessStats_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base,
      &scc_info_ProfilePacket_HeapSample_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base,}};

static void InitDefaultsscc_info_ProfilePacket_ProcessStats_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_ProfilePacket_ProcessStats_default_instance_;
    new (ptr) ::perfetto::protos::ProfilePacket_ProcessStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfilePacket_ProcessStats_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProfilePacket_ProcessStats_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto}, {
      &scc_info_ProfilePacket_Histogram_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base,}};

static void InitDefaultsscc_info_Profiling_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_Profiling_default_instance_;
    new (ptr) ::perfetto::protos::Profiling();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Profiling_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Profiling_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto}, {}};

static void InitDefaultsscc_info_StreamingAllocation_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_StreamingAllocation_default_instance_;
    new (ptr) ::perfetto::protos::StreamingAllocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamingAllocation_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamingAllocation_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto}, {}};

static void InitDefaultsscc_info_StreamingFree_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_StreamingFree_default_instance_;
    new (ptr) ::perfetto::protos::StreamingFree();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamingFree_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamingFree_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto}, {}};

static void InitDefaultsscc_info_StreamingProfilePacket_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_StreamingProfilePacket_default_instance_;
    new (ptr) ::perfetto::protos::StreamingProfilePacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamingProfilePacket_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamingProfilePacket_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto}, {}};

namespace perfetto {
namespace protos {
bool ProfilePacket_ProcessHeapSamples_ClientError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ProfilePacket_ProcessHeapSamples_ClientError_strings[3] = {};

static const char ProfilePacket_ProcessHeapSamples_ClientError_names[] =
  "CLIENT_ERROR_HIT_TIMEOUT"
  "CLIENT_ERROR_INVALID_STACK_BOUNDS"
  "CLIENT_ERROR_NONE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ProfilePacket_ProcessHeapSamples_ClientError_entries[] = {
  { {ProfilePacket_ProcessHeapSamples_ClientError_names + 0, 24}, 1 },
  { {ProfilePacket_ProcessHeapSamples_ClientError_names + 24, 33}, 2 },
  { {ProfilePacket_ProcessHeapSamples_ClientError_names + 57, 17}, 0 },
};

static const int ProfilePacket_ProcessHeapSamples_ClientError_entries_by_number[] = {
  2, // 0 -> CLIENT_ERROR_NONE
  0, // 1 -> CLIENT_ERROR_HIT_TIMEOUT
  1, // 2 -> CLIENT_ERROR_INVALID_STACK_BOUNDS
};

const std::string& ProfilePacket_ProcessHeapSamples_ClientError_Name(
    ProfilePacket_ProcessHeapSamples_ClientError value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ProfilePacket_ProcessHeapSamples_ClientError_entries,
          ProfilePacket_ProcessHeapSamples_ClientError_entries_by_number,
          3, ProfilePacket_ProcessHeapSamples_ClientError_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ProfilePacket_ProcessHeapSamples_ClientError_entries,
      ProfilePacket_ProcessHeapSamples_ClientError_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ProfilePacket_ProcessHeapSamples_ClientError_strings[idx].get();
}
bool ProfilePacket_ProcessHeapSamples_ClientError_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProfilePacket_ProcessHeapSamples_ClientError* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ProfilePacket_ProcessHeapSamples_ClientError_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ProfilePacket_ProcessHeapSamples_ClientError>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ProfilePacket_ProcessHeapSamples_ClientError ProfilePacket_ProcessHeapSamples::CLIENT_ERROR_NONE;
constexpr ProfilePacket_ProcessHeapSamples_ClientError ProfilePacket_ProcessHeapSamples::CLIENT_ERROR_HIT_TIMEOUT;
constexpr ProfilePacket_ProcessHeapSamples_ClientError ProfilePacket_ProcessHeapSamples::CLIENT_ERROR_INVALID_STACK_BOUNDS;
constexpr ProfilePacket_ProcessHeapSamples_ClientError ProfilePacket_ProcessHeapSamples::ClientError_MIN;
constexpr ProfilePacket_ProcessHeapSamples_ClientError ProfilePacket_ProcessHeapSamples::ClientError_MAX;
constexpr int ProfilePacket_ProcessHeapSamples::ClientError_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool Profiling_CpuMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Profiling_CpuMode_strings[6] = {};

static const char Profiling_CpuMode_names[] =
  "MODE_GUEST_KERNEL"
  "MODE_GUEST_USER"
  "MODE_HYPERVISOR"
  "MODE_KERNEL"
  "MODE_UNKNOWN"
  "MODE_USER";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Profiling_CpuMode_entries[] = {
  { {Profiling_CpuMode_names + 0, 17}, 4 },
  { {Profiling_CpuMode_names + 17, 15}, 5 },
  { {Profiling_CpuMode_names + 32, 15}, 3 },
  { {Profiling_CpuMode_names + 47, 11}, 1 },
  { {Profiling_CpuMode_names + 58, 12}, 0 },
  { {Profiling_CpuMode_names + 70, 9}, 2 },
};

static const int Profiling_CpuMode_entries_by_number[] = {
  4, // 0 -> MODE_UNKNOWN
  3, // 1 -> MODE_KERNEL
  5, // 2 -> MODE_USER
  2, // 3 -> MODE_HYPERVISOR
  0, // 4 -> MODE_GUEST_KERNEL
  1, // 5 -> MODE_GUEST_USER
};

const std::string& Profiling_CpuMode_Name(
    Profiling_CpuMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Profiling_CpuMode_entries,
          Profiling_CpuMode_entries_by_number,
          6, Profiling_CpuMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Profiling_CpuMode_entries,
      Profiling_CpuMode_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Profiling_CpuMode_strings[idx].get();
}
bool Profiling_CpuMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Profiling_CpuMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Profiling_CpuMode_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<Profiling_CpuMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Profiling_CpuMode Profiling::MODE_UNKNOWN;
constexpr Profiling_CpuMode Profiling::MODE_KERNEL;
constexpr Profiling_CpuMode Profiling::MODE_USER;
constexpr Profiling_CpuMode Profiling::MODE_HYPERVISOR;
constexpr Profiling_CpuMode Profiling::MODE_GUEST_KERNEL;
constexpr Profiling_CpuMode Profiling::MODE_GUEST_USER;
constexpr Profiling_CpuMode Profiling::CpuMode_MIN;
constexpr Profiling_CpuMode Profiling::CpuMode_MAX;
constexpr int Profiling::CpuMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool Profiling_StackUnwindError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Profiling_StackUnwindError_strings[15] = {};

static const char Profiling_StackUnwindError_names[] =
  "UNWIND_ERROR_BAD_ARCH"
  "UNWIND_ERROR_INVALID_ELF"
  "UNWIND_ERROR_INVALID_MAP"
  "UNWIND_ERROR_INVALID_PARAMETER"
  "UNWIND_ERROR_MAPS_PARSE"
  "UNWIND_ERROR_MAX_FRAMES_EXCEEDED"
  "UNWIND_ERROR_MEMORY_INVALID"
  "UNWIND_ERROR_NONE"
  "UNWIND_ERROR_REPEATED_FRAME"
  "UNWIND_ERROR_SYSTEM_CALL"
  "UNWIND_ERROR_THREAD_DOES_NOT_EXIST"
  "UNWIND_ERROR_THREAD_TIMEOUT"
  "UNWIND_ERROR_UNKNOWN"
  "UNWIND_ERROR_UNSUPPORTED"
  "UNWIND_ERROR_UNWIND_INFO";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Profiling_StackUnwindError_entries[] = {
  { {Profiling_StackUnwindError_names + 0, 21}, 12 },
  { {Profiling_StackUnwindError_names + 21, 24}, 8 },
  { {Profiling_StackUnwindError_names + 45, 24}, 5 },
  { {Profiling_StackUnwindError_names + 69, 30}, 14 },
  { {Profiling_StackUnwindError_names + 99, 23}, 13 },
  { {Profiling_StackUnwindError_names + 122, 32}, 6 },
  { {Profiling_StackUnwindError_names + 154, 27}, 2 },
  { {Profiling_StackUnwindError_names + 181, 17}, 1 },
  { {Profiling_StackUnwindError_names + 198, 27}, 7 },
  { {Profiling_StackUnwindError_names + 225, 24}, 9 },
  { {Profiling_StackUnwindError_names + 249, 34}, 11 },
  { {Profiling_StackUnwindError_names + 283, 27}, 10 },
  { {Profiling_StackUnwindError_names + 310, 20}, 0 },
  { {Profiling_StackUnwindError_names + 330, 24}, 4 },
  { {Profiling_StackUnwindError_names + 354, 24}, 3 },
};

static const int Profiling_StackUnwindError_entries_by_number[] = {
  12, // 0 -> UNWIND_ERROR_UNKNOWN
  7, // 1 -> UNWIND_ERROR_NONE
  6, // 2 -> UNWIND_ERROR_MEMORY_INVALID
  14, // 3 -> UNWIND_ERROR_UNWIND_INFO
  13, // 4 -> UNWIND_ERROR_UNSUPPORTED
  2, // 5 -> UNWIND_ERROR_INVALID_MAP
  5, // 6 -> UNWIND_ERROR_MAX_FRAMES_EXCEEDED
  8, // 7 -> UNWIND_ERROR_REPEATED_FRAME
  1, // 8 -> UNWIND_ERROR_INVALID_ELF
  9, // 9 -> UNWIND_ERROR_SYSTEM_CALL
  11, // 10 -> UNWIND_ERROR_THREAD_TIMEOUT
  10, // 11 -> UNWIND_ERROR_THREAD_DOES_NOT_EXIST
  0, // 12 -> UNWIND_ERROR_BAD_ARCH
  4, // 13 -> UNWIND_ERROR_MAPS_PARSE
  3, // 14 -> UNWIND_ERROR_INVALID_PARAMETER
};

const std::string& Profiling_StackUnwindError_Name(
    Profiling_StackUnwindError value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Profiling_StackUnwindError_entries,
          Profiling_StackUnwindError_entries_by_number,
          15, Profiling_StackUnwindError_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Profiling_StackUnwindError_entries,
      Profiling_StackUnwindError_entries_by_number,
      15, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Profiling_StackUnwindError_strings[idx].get();
}
bool Profiling_StackUnwindError_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Profiling_StackUnwindError* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Profiling_StackUnwindError_entries, 15, name, &int_value);
  if (success) {
    *value = static_cast<Profiling_StackUnwindError>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_UNKNOWN;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_NONE;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_MEMORY_INVALID;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_UNWIND_INFO;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_UNSUPPORTED;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_INVALID_MAP;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_MAX_FRAMES_EXCEEDED;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_REPEATED_FRAME;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_INVALID_ELF;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_SYSTEM_CALL;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_THREAD_TIMEOUT;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_THREAD_DOES_NOT_EXIST;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_BAD_ARCH;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_MAPS_PARSE;
constexpr Profiling_StackUnwindError Profiling::UNWIND_ERROR_INVALID_PARAMETER;
constexpr Profiling_StackUnwindError Profiling::StackUnwindError_MIN;
constexpr Profiling_StackUnwindError Profiling::StackUnwindError_MAX;
constexpr int Profiling::StackUnwindError_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool PerfSample_ProducerEvent_DataSourceStopReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PerfSample_ProducerEvent_DataSourceStopReason_strings[2] = {};

static const char PerfSample_ProducerEvent_DataSourceStopReason_names[] =
  "PROFILER_STOP_GUARDRAIL"
  "PROFILER_STOP_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PerfSample_ProducerEvent_DataSourceStopReason_entries[] = {
  { {PerfSample_ProducerEvent_DataSourceStopReason_names + 0, 23}, 1 },
  { {PerfSample_ProducerEvent_DataSourceStopReason_names + 23, 21}, 0 },
};

static const int PerfSample_ProducerEvent_DataSourceStopReason_entries_by_number[] = {
  1, // 0 -> PROFILER_STOP_UNKNOWN
  0, // 1 -> PROFILER_STOP_GUARDRAIL
};

const std::string& PerfSample_ProducerEvent_DataSourceStopReason_Name(
    PerfSample_ProducerEvent_DataSourceStopReason value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PerfSample_ProducerEvent_DataSourceStopReason_entries,
          PerfSample_ProducerEvent_DataSourceStopReason_entries_by_number,
          2, PerfSample_ProducerEvent_DataSourceStopReason_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PerfSample_ProducerEvent_DataSourceStopReason_entries,
      PerfSample_ProducerEvent_DataSourceStopReason_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PerfSample_ProducerEvent_DataSourceStopReason_strings[idx].get();
}
bool PerfSample_ProducerEvent_DataSourceStopReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PerfSample_ProducerEvent_DataSourceStopReason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PerfSample_ProducerEvent_DataSourceStopReason_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<PerfSample_ProducerEvent_DataSourceStopReason>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PerfSample_ProducerEvent_DataSourceStopReason PerfSample_ProducerEvent::PROFILER_STOP_UNKNOWN;
constexpr PerfSample_ProducerEvent_DataSourceStopReason PerfSample_ProducerEvent::PROFILER_STOP_GUARDRAIL;
constexpr PerfSample_ProducerEvent_DataSourceStopReason PerfSample_ProducerEvent::DataSourceStopReason_MIN;
constexpr PerfSample_ProducerEvent_DataSourceStopReason PerfSample_ProducerEvent::DataSourceStopReason_MAX;
constexpr int PerfSample_ProducerEvent::DataSourceStopReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool PerfSample_SampleSkipReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PerfSample_SampleSkipReason_strings[4] = {};

static const char PerfSample_SampleSkipReason_names[] =
  "PROFILER_SKIP_READ_STAGE"
  "PROFILER_SKIP_UNKNOWN"
  "PROFILER_SKIP_UNWIND_ENQUEUE"
  "PROFILER_SKIP_UNWIND_STAGE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PerfSample_SampleSkipReason_entries[] = {
  { {PerfSample_SampleSkipReason_names + 0, 24}, 1 },
  { {PerfSample_SampleSkipReason_names + 24, 21}, 0 },
  { {PerfSample_SampleSkipReason_names + 45, 28}, 3 },
  { {PerfSample_SampleSkipReason_names + 73, 26}, 2 },
};

static const int PerfSample_SampleSkipReason_entries_by_number[] = {
  1, // 0 -> PROFILER_SKIP_UNKNOWN
  0, // 1 -> PROFILER_SKIP_READ_STAGE
  3, // 2 -> PROFILER_SKIP_UNWIND_STAGE
  2, // 3 -> PROFILER_SKIP_UNWIND_ENQUEUE
};

const std::string& PerfSample_SampleSkipReason_Name(
    PerfSample_SampleSkipReason value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PerfSample_SampleSkipReason_entries,
          PerfSample_SampleSkipReason_entries_by_number,
          4, PerfSample_SampleSkipReason_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PerfSample_SampleSkipReason_entries,
      PerfSample_SampleSkipReason_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PerfSample_SampleSkipReason_strings[idx].get();
}
bool PerfSample_SampleSkipReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PerfSample_SampleSkipReason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PerfSample_SampleSkipReason_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<PerfSample_SampleSkipReason>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PerfSample_SampleSkipReason PerfSample::PROFILER_SKIP_UNKNOWN;
constexpr PerfSample_SampleSkipReason PerfSample::PROFILER_SKIP_READ_STAGE;
constexpr PerfSample_SampleSkipReason PerfSample::PROFILER_SKIP_UNWIND_STAGE;
constexpr PerfSample_SampleSkipReason PerfSample::PROFILER_SKIP_UNWIND_ENQUEUE;
constexpr PerfSample_SampleSkipReason PerfSample::SampleSkipReason_MIN;
constexpr PerfSample_SampleSkipReason PerfSample::SampleSkipReason_MAX;
constexpr int PerfSample::SampleSkipReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ProfilePacket_HeapSample::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilePacket_HeapSample>()._has_bits_);
  static void set_has_callstack_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_self_allocated(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_self_freed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_self_max(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_self_max_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_alloc_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_free_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ProfilePacket_HeapSample::ProfilePacket_HeapSample(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProfilePacket.HeapSample)
}
ProfilePacket_HeapSample::ProfilePacket_HeapSample(const ProfilePacket_HeapSample& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&callstack_id_, &from.callstack_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&self_max_count_) -
    reinterpret_cast<char*>(&callstack_id_)) + sizeof(self_max_count_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProfilePacket.HeapSample)
}

void ProfilePacket_HeapSample::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&callstack_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&self_max_count_) -
      reinterpret_cast<char*>(&callstack_id_)) + sizeof(self_max_count_));
}

ProfilePacket_HeapSample::~ProfilePacket_HeapSample() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProfilePacket.HeapSample)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ProfilePacket_HeapSample::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProfilePacket_HeapSample::ArenaDtor(void* object) {
  ProfilePacket_HeapSample* _this = reinterpret_cast< ProfilePacket_HeapSample* >(object);
  (void)_this;
}
void ProfilePacket_HeapSample::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilePacket_HeapSample::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilePacket_HeapSample& ProfilePacket_HeapSample::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilePacket_HeapSample_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base);
  return *internal_default_instance();
}


void ProfilePacket_HeapSample::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProfilePacket.HeapSample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&callstack_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&self_max_count_) -
        reinterpret_cast<char*>(&callstack_id_)) + sizeof(self_max_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProfilePacket_HeapSample::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 callstack_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_callstack_id(&has_bits);
          callstack_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 self_allocated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_self_allocated(&has_bits);
          self_allocated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 self_freed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_self_freed(&has_bits);
          self_freed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 alloc_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_alloc_count(&has_bits);
          alloc_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 free_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_free_count(&has_bits);
          free_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 self_max = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_self_max(&has_bits);
          self_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 self_max_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_self_max_count(&has_bits);
          self_max_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilePacket_HeapSample::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProfilePacket.HeapSample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 callstack_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_callstack_id(), target);
  }

  // optional uint64 self_allocated = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_self_allocated(), target);
  }

  // optional uint64 self_freed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_self_freed(), target);
  }

  // optional uint64 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_timestamp(), target);
  }

  // optional uint64 alloc_count = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_alloc_count(), target);
  }

  // optional uint64 free_count = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_free_count(), target);
  }

  // optional uint64 self_max = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_self_max(), target);
  }

  // optional uint64 self_max_count = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_self_max_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProfilePacket.HeapSample)
  return target;
}

size_t ProfilePacket_HeapSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProfilePacket.HeapSample)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 callstack_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_callstack_id());
    }

    // optional uint64 self_allocated = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_self_allocated());
    }

    // optional uint64 self_freed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_self_freed());
    }

    // optional uint64 timestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_timestamp());
    }

    // optional uint64 alloc_count = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_alloc_count());
    }

    // optional uint64 free_count = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_free_count());
    }

    // optional uint64 self_max = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_self_max());
    }

    // optional uint64 self_max_count = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_self_max_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilePacket_HeapSample::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ProfilePacket_HeapSample*>(
      &from));
}

void ProfilePacket_HeapSample::MergeFrom(const ProfilePacket_HeapSample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProfilePacket.HeapSample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      callstack_id_ = from.callstack_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      self_allocated_ = from.self_allocated_;
    }
    if (cached_has_bits & 0x00000004u) {
      self_freed_ = from.self_freed_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      alloc_count_ = from.alloc_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      free_count_ = from.free_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      self_max_ = from.self_max_;
    }
    if (cached_has_bits & 0x00000080u) {
      self_max_count_ = from.self_max_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfilePacket_HeapSample::CopyFrom(const ProfilePacket_HeapSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProfilePacket.HeapSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilePacket_HeapSample::IsInitialized() const {
  return true;
}

void ProfilePacket_HeapSample::InternalSwap(ProfilePacket_HeapSample* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilePacket_HeapSample, self_max_count_)
      + sizeof(ProfilePacket_HeapSample::self_max_count_)
      - PROTOBUF_FIELD_OFFSET(ProfilePacket_HeapSample, callstack_id_)>(
          reinterpret_cast<char*>(&callstack_id_),
          reinterpret_cast<char*>(&other->callstack_id_));
}

std::string ProfilePacket_HeapSample::GetTypeName() const {
  return "perfetto.protos.ProfilePacket.HeapSample";
}


// ===================================================================

class ProfilePacket_Histogram_Bucket::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilePacket_Histogram_Bucket>()._has_bits_);
  static void set_has_upper_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_bucket(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ProfilePacket_Histogram_Bucket::ProfilePacket_Histogram_Bucket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProfilePacket.Histogram.Bucket)
}
ProfilePacket_Histogram_Bucket::ProfilePacket_Histogram_Bucket(const ProfilePacket_Histogram_Bucket& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&upper_limit_, &from.upper_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_bucket_) -
    reinterpret_cast<char*>(&upper_limit_)) + sizeof(max_bucket_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProfilePacket.Histogram.Bucket)
}

void ProfilePacket_Histogram_Bucket::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&upper_limit_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_bucket_) -
      reinterpret_cast<char*>(&upper_limit_)) + sizeof(max_bucket_));
}

ProfilePacket_Histogram_Bucket::~ProfilePacket_Histogram_Bucket() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProfilePacket.Histogram.Bucket)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ProfilePacket_Histogram_Bucket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProfilePacket_Histogram_Bucket::ArenaDtor(void* object) {
  ProfilePacket_Histogram_Bucket* _this = reinterpret_cast< ProfilePacket_Histogram_Bucket* >(object);
  (void)_this;
}
void ProfilePacket_Histogram_Bucket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilePacket_Histogram_Bucket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilePacket_Histogram_Bucket& ProfilePacket_Histogram_Bucket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilePacket_Histogram_Bucket_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base);
  return *internal_default_instance();
}


void ProfilePacket_Histogram_Bucket::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProfilePacket.Histogram.Bucket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&upper_limit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_bucket_) -
        reinterpret_cast<char*>(&upper_limit_)) + sizeof(max_bucket_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProfilePacket_Histogram_Bucket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 upper_limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_upper_limit(&has_bits);
          upper_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool max_bucket = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max_bucket(&has_bits);
          max_bucket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilePacket_Histogram_Bucket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProfilePacket.Histogram.Bucket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 upper_limit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_upper_limit(), target);
  }

  // optional bool max_bucket = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_max_bucket(), target);
  }

  // optional uint64 count = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProfilePacket.Histogram.Bucket)
  return target;
}

size_t ProfilePacket_Histogram_Bucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProfilePacket.Histogram.Bucket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 upper_limit = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_upper_limit());
    }

    // optional uint64 count = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_count());
    }

    // optional bool max_bucket = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilePacket_Histogram_Bucket::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ProfilePacket_Histogram_Bucket*>(
      &from));
}

void ProfilePacket_Histogram_Bucket::MergeFrom(const ProfilePacket_Histogram_Bucket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProfilePacket.Histogram.Bucket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      upper_limit_ = from.upper_limit_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_bucket_ = from.max_bucket_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfilePacket_Histogram_Bucket::CopyFrom(const ProfilePacket_Histogram_Bucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProfilePacket.Histogram.Bucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilePacket_Histogram_Bucket::IsInitialized() const {
  return true;
}

void ProfilePacket_Histogram_Bucket::InternalSwap(ProfilePacket_Histogram_Bucket* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilePacket_Histogram_Bucket, max_bucket_)
      + sizeof(ProfilePacket_Histogram_Bucket::max_bucket_)
      - PROTOBUF_FIELD_OFFSET(ProfilePacket_Histogram_Bucket, upper_limit_)>(
          reinterpret_cast<char*>(&upper_limit_),
          reinterpret_cast<char*>(&other->upper_limit_));
}

std::string ProfilePacket_Histogram_Bucket::GetTypeName() const {
  return "perfetto.protos.ProfilePacket.Histogram.Bucket";
}


// ===================================================================

class ProfilePacket_Histogram::_Internal {
 public:
};

ProfilePacket_Histogram::ProfilePacket_Histogram(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  buckets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProfilePacket.Histogram)
}
ProfilePacket_Histogram::ProfilePacket_Histogram(const ProfilePacket_Histogram& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      buckets_(from.buckets_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProfilePacket.Histogram)
}

void ProfilePacket_Histogram::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilePacket_Histogram_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base);
}

ProfilePacket_Histogram::~ProfilePacket_Histogram() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProfilePacket.Histogram)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ProfilePacket_Histogram::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProfilePacket_Histogram::ArenaDtor(void* object) {
  ProfilePacket_Histogram* _this = reinterpret_cast< ProfilePacket_Histogram* >(object);
  (void)_this;
}
void ProfilePacket_Histogram::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilePacket_Histogram::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilePacket_Histogram& ProfilePacket_Histogram::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilePacket_Histogram_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base);
  return *internal_default_instance();
}


void ProfilePacket_Histogram::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProfilePacket.Histogram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buckets_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProfilePacket_Histogram::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perfetto.protos.ProfilePacket.Histogram.Bucket buckets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buckets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilePacket_Histogram::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProfilePacket.Histogram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.ProfilePacket.Histogram.Bucket buckets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buckets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_buckets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProfilePacket.Histogram)
  return target;
}

size_t ProfilePacket_Histogram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProfilePacket.Histogram)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ProfilePacket.Histogram.Bucket buckets = 1;
  total_size += 1UL * this->_internal_buckets_size();
  for (const auto& msg : this->buckets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilePacket_Histogram::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ProfilePacket_Histogram*>(
      &from));
}

void ProfilePacket_Histogram::MergeFrom(const ProfilePacket_Histogram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProfilePacket.Histogram)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buckets_.MergeFrom(from.buckets_);
}

void ProfilePacket_Histogram::CopyFrom(const ProfilePacket_Histogram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProfilePacket.Histogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilePacket_Histogram::IsInitialized() const {
  return true;
}

void ProfilePacket_Histogram::InternalSwap(ProfilePacket_Histogram* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  buckets_.InternalSwap(&other->buckets_);
}

std::string ProfilePacket_Histogram::GetTypeName() const {
  return "perfetto.protos.ProfilePacket.Histogram";
}


// ===================================================================

class ProfilePacket_ProcessStats::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilePacket_ProcessStats>()._has_bits_);
  static void set_has_unwinding_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_heap_samples(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_map_reparses(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::perfetto::protos::ProfilePacket_Histogram& unwinding_time_us(const ProfilePacket_ProcessStats* msg);
  static void set_has_unwinding_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_unwinding_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_client_spinlock_blocked_us(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::perfetto::protos::ProfilePacket_Histogram&
ProfilePacket_ProcessStats::_Internal::unwinding_time_us(const ProfilePacket_ProcessStats* msg) {
  return *msg->unwinding_time_us_;
}
ProfilePacket_ProcessStats::ProfilePacket_ProcessStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProfilePacket.ProcessStats)
}
ProfilePacket_ProcessStats::ProfilePacket_ProcessStats(const ProfilePacket_ProcessStats& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_unwinding_time_us()) {
    unwinding_time_us_ = new ::perfetto::protos::ProfilePacket_Histogram(*from.unwinding_time_us_);
  } else {
    unwinding_time_us_ = nullptr;
  }
  ::memcpy(&unwinding_errors_, &from.unwinding_errors_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_spinlock_blocked_us_) -
    reinterpret_cast<char*>(&unwinding_errors_)) + sizeof(client_spinlock_blocked_us_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProfilePacket.ProcessStats)
}

void ProfilePacket_ProcessStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilePacket_ProcessStats_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&unwinding_time_us_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&client_spinlock_blocked_us_) -
      reinterpret_cast<char*>(&unwinding_time_us_)) + sizeof(client_spinlock_blocked_us_));
}

ProfilePacket_ProcessStats::~ProfilePacket_ProcessStats() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProfilePacket.ProcessStats)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ProfilePacket_ProcessStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete unwinding_time_us_;
}

void ProfilePacket_ProcessStats::ArenaDtor(void* object) {
  ProfilePacket_ProcessStats* _this = reinterpret_cast< ProfilePacket_ProcessStats* >(object);
  (void)_this;
}
void ProfilePacket_ProcessStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilePacket_ProcessStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilePacket_ProcessStats& ProfilePacket_ProcessStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilePacket_ProcessStats_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base);
  return *internal_default_instance();
}


void ProfilePacket_ProcessStats::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProfilePacket.ProcessStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(unwinding_time_us_ != nullptr);
    unwinding_time_us_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&unwinding_errors_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_spinlock_blocked_us_) -
        reinterpret_cast<char*>(&unwinding_errors_)) + sizeof(client_spinlock_blocked_us_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProfilePacket_ProcessStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 unwinding_errors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_unwinding_errors(&has_bits);
          unwinding_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 heap_samples = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_heap_samples(&has_bits);
          heap_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 map_reparses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_map_reparses(&has_bits);
          map_reparses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ProfilePacket.Histogram unwinding_time_us = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_unwinding_time_us(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 total_unwinding_time_us = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_total_unwinding_time_us(&has_bits);
          total_unwinding_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 client_spinlock_blocked_us = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_client_spinlock_blocked_us(&has_bits);
          client_spinlock_blocked_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilePacket_ProcessStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProfilePacket.ProcessStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 unwinding_errors = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_unwinding_errors(), target);
  }

  // optional uint64 heap_samples = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_heap_samples(), target);
  }

  // optional uint64 map_reparses = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_map_reparses(), target);
  }

  // optional .perfetto.protos.ProfilePacket.Histogram unwinding_time_us = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::unwinding_time_us(this), target, stream);
  }

  // optional uint64 total_unwinding_time_us = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_total_unwinding_time_us(), target);
  }

  // optional uint64 client_spinlock_blocked_us = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_client_spinlock_blocked_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProfilePacket.ProcessStats)
  return target;
}

size_t ProfilePacket_ProcessStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProfilePacket.ProcessStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .perfetto.protos.ProfilePacket.Histogram unwinding_time_us = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unwinding_time_us_);
    }

    // optional uint64 unwinding_errors = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_unwinding_errors());
    }

    // optional uint64 heap_samples = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_heap_samples());
    }

    // optional uint64 map_reparses = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_map_reparses());
    }

    // optional uint64 total_unwinding_time_us = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_total_unwinding_time_us());
    }

    // optional uint64 client_spinlock_blocked_us = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_client_spinlock_blocked_us());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilePacket_ProcessStats::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ProfilePacket_ProcessStats*>(
      &from));
}

void ProfilePacket_ProcessStats::MergeFrom(const ProfilePacket_ProcessStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProfilePacket.ProcessStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_unwinding_time_us()->::perfetto::protos::ProfilePacket_Histogram::MergeFrom(from._internal_unwinding_time_us());
    }
    if (cached_has_bits & 0x00000002u) {
      unwinding_errors_ = from.unwinding_errors_;
    }
    if (cached_has_bits & 0x00000004u) {
      heap_samples_ = from.heap_samples_;
    }
    if (cached_has_bits & 0x00000008u) {
      map_reparses_ = from.map_reparses_;
    }
    if (cached_has_bits & 0x00000010u) {
      total_unwinding_time_us_ = from.total_unwinding_time_us_;
    }
    if (cached_has_bits & 0x00000020u) {
      client_spinlock_blocked_us_ = from.client_spinlock_blocked_us_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfilePacket_ProcessStats::CopyFrom(const ProfilePacket_ProcessStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProfilePacket.ProcessStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilePacket_ProcessStats::IsInitialized() const {
  return true;
}

void ProfilePacket_ProcessStats::InternalSwap(ProfilePacket_ProcessStats* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilePacket_ProcessStats, client_spinlock_blocked_us_)
      + sizeof(ProfilePacket_ProcessStats::client_spinlock_blocked_us_)
      - PROTOBUF_FIELD_OFFSET(ProfilePacket_ProcessStats, unwinding_time_us_)>(
          reinterpret_cast<char*>(&unwinding_time_us_),
          reinterpret_cast<char*>(&other->unwinding_time_us_));
}

std::string ProfilePacket_ProcessStats::GetTypeName() const {
  return "perfetto.protos.ProfilePacket.ProcessStats";
}


// ===================================================================

class ProfilePacket_ProcessHeapSamples::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilePacket_ProcessHeapSamples>()._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_from_startup(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rejected_concurrent(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_disconnected(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_buffer_overran(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_client_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_buffer_corrupted(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_hit_guardrail(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_heap_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sampling_interval_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_orig_sampling_interval_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::perfetto::protos::ProfilePacket_ProcessStats& stats(const ProfilePacket_ProcessHeapSamples* msg);
  static void set_has_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::perfetto::protos::ProfilePacket_ProcessStats&
ProfilePacket_ProcessHeapSamples::_Internal::stats(const ProfilePacket_ProcessHeapSamples* msg) {
  return *msg->stats_;
}
ProfilePacket_ProcessHeapSamples::ProfilePacket_ProcessHeapSamples(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  samples_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProfilePacket.ProcessHeapSamples)
}
ProfilePacket_ProcessHeapSamples::ProfilePacket_ProcessHeapSamples(const ProfilePacket_ProcessHeapSamples& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      samples_(from.samples_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  heap_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_heap_name()) {
    heap_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_heap_name(),
      GetArena());
  }
  if (from._internal_has_stats()) {
    stats_ = new ::perfetto::protos::ProfilePacket_ProcessStats(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_error_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(client_error_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProfilePacket.ProcessHeapSamples)
}

void ProfilePacket_ProcessHeapSamples::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilePacket_ProcessHeapSamples_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base);
  heap_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&stats_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&client_error_) -
      reinterpret_cast<char*>(&stats_)) + sizeof(client_error_));
}

ProfilePacket_ProcessHeapSamples::~ProfilePacket_ProcessHeapSamples() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProfilePacket.ProcessHeapSamples)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ProfilePacket_ProcessHeapSamples::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  heap_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stats_;
}

void ProfilePacket_ProcessHeapSamples::ArenaDtor(void* object) {
  ProfilePacket_ProcessHeapSamples* _this = reinterpret_cast< ProfilePacket_ProcessHeapSamples* >(object);
  (void)_this;
}
void ProfilePacket_ProcessHeapSamples::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilePacket_ProcessHeapSamples::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilePacket_ProcessHeapSamples& ProfilePacket_ProcessHeapSamples::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilePacket_ProcessHeapSamples_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base);
  return *internal_default_instance();
}


void ProfilePacket_ProcessHeapSamples::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProfilePacket.ProcessHeapSamples)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  samples_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      heap_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stats_ != nullptr);
      stats_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&buffer_corrupted_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(buffer_corrupted_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&hit_guardrail_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_error_) -
        reinterpret_cast<char*>(&hit_guardrail_)) + sizeof(client_error_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProfilePacket_ProcessHeapSamples::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.ProfilePacket.HeapSample samples = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_samples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool from_startup = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_from_startup(&has_bits);
          from_startup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rejected_concurrent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_rejected_concurrent(&has_bits);
          rejected_concurrent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ProfilePacket.ProcessStats stats = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool disconnected = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_disconnected(&has_bits);
          disconnected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool buffer_overran = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_buffer_overran(&has_bits);
          buffer_overran_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool buffer_corrupted = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_buffer_corrupted(&has_bits);
          buffer_corrupted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hit_guardrail = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_hit_guardrail(&has_bits);
          hit_guardrail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string heap_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_heap_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 sampling_interval_bytes = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_sampling_interval_bytes(&has_bits);
          sampling_interval_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 orig_sampling_interval_bytes = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_orig_sampling_interval_bytes(&has_bits);
          orig_sampling_interval_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ProfilePacket.ProcessHeapSamples.ClientError client_error = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ProfilePacket_ProcessHeapSamples_ClientError_IsValid(val))) {
            _internal_set_client_error(static_cast<::perfetto::protos::ProfilePacket_ProcessHeapSamples_ClientError>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilePacket_ProcessHeapSamples::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProfilePacket.ProcessHeapSamples)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 pid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pid(), target);
  }

  // repeated .perfetto.protos.ProfilePacket.HeapSample samples = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_samples_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_samples(i), target, stream);
  }

  // optional bool from_startup = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_from_startup(), target);
  }

  // optional bool rejected_concurrent = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_rejected_concurrent(), target);
  }

  // optional .perfetto.protos.ProfilePacket.ProcessStats stats = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stats(this), target, stream);
  }

  // optional bool disconnected = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_disconnected(), target);
  }

  // optional bool buffer_overran = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_buffer_overran(), target);
  }

  // optional bool buffer_corrupted = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_buffer_corrupted(), target);
  }

  // optional uint64 timestamp = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_timestamp(), target);
  }

  // optional bool hit_guardrail = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_hit_guardrail(), target);
  }

  // optional string heap_name = 11;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_heap_name(), target);
  }

  // optional uint64 sampling_interval_bytes = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_sampling_interval_bytes(), target);
  }

  // optional uint64 orig_sampling_interval_bytes = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_orig_sampling_interval_bytes(), target);
  }

  // optional .perfetto.protos.ProfilePacket.ProcessHeapSamples.ClientError client_error = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_client_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProfilePacket.ProcessHeapSamples)
  return target;
}

size_t ProfilePacket_ProcessHeapSamples::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProfilePacket.ProcessHeapSamples)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.ProfilePacket.HeapSample samples = 2;
  total_size += 1UL * this->_internal_samples_size();
  for (const auto& msg : this->samples_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string heap_name = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_heap_name());
    }

    // optional .perfetto.protos.ProfilePacket.ProcessStats stats = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stats_);
    }

    // optional uint64 pid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_pid());
    }

    // optional bool from_startup = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool rejected_concurrent = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool disconnected = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool buffer_overran = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool buffer_corrupted = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional bool hit_guardrail = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional uint64 timestamp = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_timestamp());
    }

    // optional uint64 sampling_interval_bytes = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_sampling_interval_bytes());
    }

    // optional uint64 orig_sampling_interval_bytes = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_orig_sampling_interval_bytes());
    }

    // optional .perfetto.protos.ProfilePacket.ProcessHeapSamples.ClientError client_error = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_client_error());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilePacket_ProcessHeapSamples::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ProfilePacket_ProcessHeapSamples*>(
      &from));
}

void ProfilePacket_ProcessHeapSamples::MergeFrom(const ProfilePacket_ProcessHeapSamples& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProfilePacket.ProcessHeapSamples)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  samples_.MergeFrom(from.samples_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_heap_name(from._internal_heap_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stats()->::perfetto::protos::ProfilePacket_ProcessStats::MergeFrom(from._internal_stats());
    }
    if (cached_has_bits & 0x00000004u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000008u) {
      from_startup_ = from.from_startup_;
    }
    if (cached_has_bits & 0x00000010u) {
      rejected_concurrent_ = from.rejected_concurrent_;
    }
    if (cached_has_bits & 0x00000020u) {
      disconnected_ = from.disconnected_;
    }
    if (cached_has_bits & 0x00000040u) {
      buffer_overran_ = from.buffer_overran_;
    }
    if (cached_has_bits & 0x00000080u) {
      buffer_corrupted_ = from.buffer_corrupted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      hit_guardrail_ = from.hit_guardrail_;
    }
    if (cached_has_bits & 0x00000200u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      sampling_interval_bytes_ = from.sampling_interval_bytes_;
    }
    if (cached_has_bits & 0x00000800u) {
      orig_sampling_interval_bytes_ = from.orig_sampling_interval_bytes_;
    }
    if (cached_has_bits & 0x00001000u) {
      client_error_ = from.client_error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfilePacket_ProcessHeapSamples::CopyFrom(const ProfilePacket_ProcessHeapSamples& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProfilePacket.ProcessHeapSamples)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilePacket_ProcessHeapSamples::IsInitialized() const {
  return true;
}

void ProfilePacket_ProcessHeapSamples::InternalSwap(ProfilePacket_ProcessHeapSamples* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  samples_.InternalSwap(&other->samples_);
  heap_name_.Swap(&other->heap_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilePacket_ProcessHeapSamples, client_error_)
      + sizeof(ProfilePacket_ProcessHeapSamples::client_error_)
      - PROTOBUF_FIELD_OFFSET(ProfilePacket_ProcessHeapSamples, stats_)>(
          reinterpret_cast<char*>(&stats_),
          reinterpret_cast<char*>(&other->stats_));
}

std::string ProfilePacket_ProcessHeapSamples::GetTypeName() const {
  return "perfetto.protos.ProfilePacket.ProcessHeapSamples";
}


// ===================================================================

class ProfilePacket::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfilePacket>()._has_bits_);
  static void set_has_continued(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void ProfilePacket::clear_strings() {
  strings_.Clear();
}
void ProfilePacket::clear_mappings() {
  mappings_.Clear();
}
void ProfilePacket::clear_frames() {
  frames_.Clear();
}
void ProfilePacket::clear_callstacks() {
  callstacks_.Clear();
}
ProfilePacket::ProfilePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  strings_(arena),
  frames_(arena),
  callstacks_(arena),
  mappings_(arena),
  process_dumps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ProfilePacket)
}
ProfilePacket::ProfilePacket(const ProfilePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      strings_(from.strings_),
      frames_(from.frames_),
      callstacks_(from.callstacks_),
      mappings_(from.mappings_),
      process_dumps_(from.process_dumps_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&continued_) -
    reinterpret_cast<char*>(&index_)) + sizeof(continued_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ProfilePacket)
}

void ProfilePacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfilePacket_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&continued_) -
      reinterpret_cast<char*>(&index_)) + sizeof(continued_));
}

ProfilePacket::~ProfilePacket() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ProfilePacket)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ProfilePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProfilePacket::ArenaDtor(void* object) {
  ProfilePacket* _this = reinterpret_cast< ProfilePacket* >(object);
  (void)_this;
}
void ProfilePacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfilePacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfilePacket& ProfilePacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfilePacket_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base);
  return *internal_default_instance();
}


void ProfilePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ProfilePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strings_.Clear();
  frames_.Clear();
  callstacks_.Clear();
  mappings_.Clear();
  process_dumps_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&continued_) -
        reinterpret_cast<char*>(&index_)) + sizeof(continued_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProfilePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perfetto.protos.InternedString strings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_strings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.Frame frames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.Callstack callstacks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_callstacks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.Mapping mappings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mappings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.ProfilePacket.ProcessHeapSamples process_dumps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_process_dumps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool continued = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_continued(&has_bits);
          continued_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfilePacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ProfilePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfetto.protos.InternedString strings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_strings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_strings(i), target, stream);
  }

  // repeated .perfetto.protos.Frame frames = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frames_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_frames(i), target, stream);
  }

  // repeated .perfetto.protos.Callstack callstacks = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_callstacks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_callstacks(i), target, stream);
  }

  // repeated .perfetto.protos.Mapping mappings = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mappings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_mappings(i), target, stream);
  }

  // repeated .perfetto.protos.ProfilePacket.ProcessHeapSamples process_dumps = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_process_dumps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_process_dumps(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool continued = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_continued(), target);
  }

  // optional uint64 index = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ProfilePacket)
  return target;
}

size_t ProfilePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ProfilePacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.InternedString strings = 1;
  total_size += 1UL * this->_internal_strings_size();
  for (const auto& msg : this->strings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.Frame frames = 2;
  total_size += 1UL * this->_internal_frames_size();
  for (const auto& msg : this->frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.Callstack callstacks = 3;
  total_size += 1UL * this->_internal_callstacks_size();
  for (const auto& msg : this->callstacks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.Mapping mappings = 4;
  total_size += 1UL * this->_internal_mappings_size();
  for (const auto& msg : this->mappings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .perfetto.protos.ProfilePacket.ProcessHeapSamples process_dumps = 5;
  total_size += 1UL * this->_internal_process_dumps_size();
  for (const auto& msg : this->process_dumps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 index = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_index());
    }

    // optional bool continued = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfilePacket::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ProfilePacket*>(
      &from));
}

void ProfilePacket::MergeFrom(const ProfilePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ProfilePacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  strings_.MergeFrom(from.strings_);
  frames_.MergeFrom(from.frames_);
  callstacks_.MergeFrom(from.callstacks_);
  mappings_.MergeFrom(from.mappings_);
  process_dumps_.MergeFrom(from.process_dumps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000002u) {
      continued_ = from.continued_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfilePacket::CopyFrom(const ProfilePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ProfilePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilePacket::IsInitialized() const {
  return true;
}

void ProfilePacket::InternalSwap(ProfilePacket* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strings_.InternalSwap(&other->strings_);
  frames_.InternalSwap(&other->frames_);
  callstacks_.InternalSwap(&other->callstacks_);
  mappings_.InternalSwap(&other->mappings_);
  process_dumps_.InternalSwap(&other->process_dumps_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfilePacket, continued_)
      + sizeof(ProfilePacket::continued_)
      - PROTOBUF_FIELD_OFFSET(ProfilePacket, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

std::string ProfilePacket::GetTypeName() const {
  return "perfetto.protos.ProfilePacket";
}


// ===================================================================

class StreamingAllocation::_Internal {
 public:
};

StreamingAllocation::StreamingAllocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  address_(arena),
  size_(arena),
  sample_size_(arena),
  clock_monotonic_coarse_timestamp_(arena),
  heap_id_(arena),
  sequence_number_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.StreamingAllocation)
}
StreamingAllocation::StreamingAllocation(const StreamingAllocation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      address_(from.address_),
      size_(from.size_),
      sample_size_(from.sample_size_),
      clock_monotonic_coarse_timestamp_(from.clock_monotonic_coarse_timestamp_),
      heap_id_(from.heap_id_),
      sequence_number_(from.sequence_number_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.StreamingAllocation)
}

void StreamingAllocation::SharedCtor() {
}

StreamingAllocation::~StreamingAllocation() {
  // @@protoc_insertion_point(destructor:perfetto.protos.StreamingAllocation)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void StreamingAllocation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StreamingAllocation::ArenaDtor(void* object) {
  StreamingAllocation* _this = reinterpret_cast< StreamingAllocation* >(object);
  (void)_this;
}
void StreamingAllocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamingAllocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamingAllocation& StreamingAllocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamingAllocation_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base);
  return *internal_default_instance();
}


void StreamingAllocation::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.StreamingAllocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.Clear();
  size_.Clear();
  sample_size_.Clear();
  clock_monotonic_coarse_timestamp_.Clear();
  heap_id_.Clear();
  sequence_number_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StreamingAllocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_address(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_size(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 sample_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sample_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_sample_size(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 clock_monotonic_coarse_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_clock_monotonic_coarse_timestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_clock_monotonic_coarse_timestamp(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 heap_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_heap_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_heap_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 sequence_number = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sequence_number(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_sequence_number(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamingAllocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.StreamingAllocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 address = 1;
  for (int i = 0, n = this->_internal_address_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_address(i), target);
  }

  // repeated uint64 size = 2;
  for (int i = 0, n = this->_internal_size_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_size(i), target);
  }

  // repeated uint64 sample_size = 3;
  for (int i = 0, n = this->_internal_sample_size_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_sample_size(i), target);
  }

  // repeated uint64 clock_monotonic_coarse_timestamp = 4;
  for (int i = 0, n = this->_internal_clock_monotonic_coarse_timestamp_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_clock_monotonic_coarse_timestamp(i), target);
  }

  // repeated uint32 heap_id = 5;
  for (int i = 0, n = this->_internal_heap_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_heap_id(i), target);
  }

  // repeated uint64 sequence_number = 6;
  for (int i = 0, n = this->_internal_sequence_number_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_sequence_number(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.StreamingAllocation)
  return target;
}

size_t StreamingAllocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.StreamingAllocation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 address = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->address_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_address_size());
    total_size += data_size;
  }

  // repeated uint64 size = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->size_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_size_size());
    total_size += data_size;
  }

  // repeated uint64 sample_size = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->sample_size_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sample_size_size());
    total_size += data_size;
  }

  // repeated uint64 clock_monotonic_coarse_timestamp = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->clock_monotonic_coarse_timestamp_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_clock_monotonic_coarse_timestamp_size());
    total_size += data_size;
  }

  // repeated uint32 heap_id = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->heap_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_heap_id_size());
    total_size += data_size;
  }

  // repeated uint64 sequence_number = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->sequence_number_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sequence_number_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingAllocation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StreamingAllocation*>(
      &from));
}

void StreamingAllocation::MergeFrom(const StreamingAllocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.StreamingAllocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_.MergeFrom(from.address_);
  size_.MergeFrom(from.size_);
  sample_size_.MergeFrom(from.sample_size_);
  clock_monotonic_coarse_timestamp_.MergeFrom(from.clock_monotonic_coarse_timestamp_);
  heap_id_.MergeFrom(from.heap_id_);
  sequence_number_.MergeFrom(from.sequence_number_);
}

void StreamingAllocation::CopyFrom(const StreamingAllocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.StreamingAllocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingAllocation::IsInitialized() const {
  return true;
}

void StreamingAllocation::InternalSwap(StreamingAllocation* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  address_.InternalSwap(&other->address_);
  size_.InternalSwap(&other->size_);
  sample_size_.InternalSwap(&other->sample_size_);
  clock_monotonic_coarse_timestamp_.InternalSwap(&other->clock_monotonic_coarse_timestamp_);
  heap_id_.InternalSwap(&other->heap_id_);
  sequence_number_.InternalSwap(&other->sequence_number_);
}

std::string StreamingAllocation::GetTypeName() const {
  return "perfetto.protos.StreamingAllocation";
}


// ===================================================================

class StreamingFree::_Internal {
 public:
};

StreamingFree::StreamingFree(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  address_(arena),
  heap_id_(arena),
  sequence_number_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.StreamingFree)
}
StreamingFree::StreamingFree(const StreamingFree& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      address_(from.address_),
      heap_id_(from.heap_id_),
      sequence_number_(from.sequence_number_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.StreamingFree)
}

void StreamingFree::SharedCtor() {
}

StreamingFree::~StreamingFree() {
  // @@protoc_insertion_point(destructor:perfetto.protos.StreamingFree)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void StreamingFree::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StreamingFree::ArenaDtor(void* object) {
  StreamingFree* _this = reinterpret_cast< StreamingFree* >(object);
  (void)_this;
}
void StreamingFree::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamingFree::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamingFree& StreamingFree::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamingFree_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base);
  return *internal_default_instance();
}


void StreamingFree::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.StreamingFree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.Clear();
  heap_id_.Clear();
  sequence_number_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StreamingFree::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_address(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 heap_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_heap_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_heap_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 sequence_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sequence_number(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_sequence_number(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamingFree::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.StreamingFree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 address = 1;
  for (int i = 0, n = this->_internal_address_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_address(i), target);
  }

  // repeated uint32 heap_id = 2;
  for (int i = 0, n = this->_internal_heap_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_heap_id(i), target);
  }

  // repeated uint64 sequence_number = 3;
  for (int i = 0, n = this->_internal_sequence_number_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_sequence_number(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.StreamingFree)
  return target;
}

size_t StreamingFree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.StreamingFree)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 address = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->address_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_address_size());
    total_size += data_size;
  }

  // repeated uint32 heap_id = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->heap_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_heap_id_size());
    total_size += data_size;
  }

  // repeated uint64 sequence_number = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->sequence_number_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sequence_number_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingFree::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StreamingFree*>(
      &from));
}

void StreamingFree::MergeFrom(const StreamingFree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.StreamingFree)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_.MergeFrom(from.address_);
  heap_id_.MergeFrom(from.heap_id_);
  sequence_number_.MergeFrom(from.sequence_number_);
}

void StreamingFree::CopyFrom(const StreamingFree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.StreamingFree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingFree::IsInitialized() const {
  return true;
}

void StreamingFree::InternalSwap(StreamingFree* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  address_.InternalSwap(&other->address_);
  heap_id_.InternalSwap(&other->heap_id_);
  sequence_number_.InternalSwap(&other->sequence_number_);
}

std::string StreamingFree::GetTypeName() const {
  return "perfetto.protos.StreamingFree";
}


// ===================================================================

class StreamingProfilePacket::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamingProfilePacket>()._has_bits_);
  static void set_has_process_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StreamingProfilePacket::StreamingProfilePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  callstack_iid_(arena),
  timestamp_delta_us_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.StreamingProfilePacket)
}
StreamingProfilePacket::StreamingProfilePacket(const StreamingProfilePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      callstack_iid_(from.callstack_iid_),
      timestamp_delta_us_(from.timestamp_delta_us_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  process_priority_ = from.process_priority_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.StreamingProfilePacket)
}

void StreamingProfilePacket::SharedCtor() {
  process_priority_ = 0;
}

StreamingProfilePacket::~StreamingProfilePacket() {
  // @@protoc_insertion_point(destructor:perfetto.protos.StreamingProfilePacket)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void StreamingProfilePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StreamingProfilePacket::ArenaDtor(void* object) {
  StreamingProfilePacket* _this = reinterpret_cast< StreamingProfilePacket* >(object);
  (void)_this;
}
void StreamingProfilePacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamingProfilePacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamingProfilePacket& StreamingProfilePacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamingProfilePacket_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base);
  return *internal_default_instance();
}


void StreamingProfilePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.StreamingProfilePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  callstack_iid_.Clear();
  timestamp_delta_us_.Clear();
  process_priority_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StreamingProfilePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 callstack_iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_callstack_iid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_callstack_iid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 timestamp_delta_us = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_timestamp_delta_us(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_timestamp_delta_us(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 process_priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_process_priority(&has_bits);
          process_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamingProfilePacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.StreamingProfilePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 callstack_iid = 1;
  for (int i = 0, n = this->_internal_callstack_iid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_callstack_iid(i), target);
  }

  // repeated int64 timestamp_delta_us = 2;
  for (int i = 0, n = this->_internal_timestamp_delta_us_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp_delta_us(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 process_priority = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_process_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.StreamingProfilePacket)
  return target;
}

size_t StreamingProfilePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.StreamingProfilePacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 callstack_iid = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->callstack_iid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_callstack_iid_size());
    total_size += data_size;
  }

  // repeated int64 timestamp_delta_us = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->timestamp_delta_us_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_timestamp_delta_us_size());
    total_size += data_size;
  }

  // optional int32 process_priority = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_process_priority());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingProfilePacket::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StreamingProfilePacket*>(
      &from));
}

void StreamingProfilePacket::MergeFrom(const StreamingProfilePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.StreamingProfilePacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  callstack_iid_.MergeFrom(from.callstack_iid_);
  timestamp_delta_us_.MergeFrom(from.timestamp_delta_us_);
  if (from._internal_has_process_priority()) {
    _internal_set_process_priority(from._internal_process_priority());
  }
}

void StreamingProfilePacket::CopyFrom(const StreamingProfilePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.StreamingProfilePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingProfilePacket::IsInitialized() const {
  return true;
}

void StreamingProfilePacket::InternalSwap(StreamingProfilePacket* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  callstack_iid_.InternalSwap(&other->callstack_iid_);
  timestamp_delta_us_.InternalSwap(&other->timestamp_delta_us_);
  swap(process_priority_, other->process_priority_);
}

std::string StreamingProfilePacket::GetTypeName() const {
  return "perfetto.protos.StreamingProfilePacket";
}


// ===================================================================

class Profiling::_Internal {
 public:
};

Profiling::Profiling(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.Profiling)
}
Profiling::Profiling(const Profiling& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.Profiling)
}

void Profiling::SharedCtor() {
}

Profiling::~Profiling() {
  // @@protoc_insertion_point(destructor:perfetto.protos.Profiling)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Profiling::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Profiling::ArenaDtor(void* object) {
  Profiling* _this = reinterpret_cast< Profiling* >(object);
  (void)_this;
}
void Profiling::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Profiling::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Profiling& Profiling::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Profiling_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base);
  return *internal_default_instance();
}


void Profiling::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.Profiling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* Profiling::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Profiling::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.Profiling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.Profiling)
  return target;
}

size_t Profiling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.Profiling)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Profiling::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Profiling*>(
      &from));
}

void Profiling::MergeFrom(const Profiling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.Profiling)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Profiling::CopyFrom(const Profiling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.Profiling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Profiling::IsInitialized() const {
  return true;
}

void Profiling::InternalSwap(Profiling* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string Profiling::GetTypeName() const {
  return "perfetto.protos.Profiling";
}


// ===================================================================

class PerfSample_ProducerEvent::_Internal {
 public:
};

PerfSample_ProducerEvent::PerfSample_ProducerEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PerfSample.ProducerEvent)
}
PerfSample_ProducerEvent::PerfSample_ProducerEvent(const PerfSample_ProducerEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_optional_source_stop_reason();
  switch (from.optional_source_stop_reason_case()) {
    case kSourceStopReason: {
      _internal_set_source_stop_reason(from._internal_source_stop_reason());
      break;
    }
    case OPTIONAL_SOURCE_STOP_REASON_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfSample.ProducerEvent)
}

void PerfSample_ProducerEvent::SharedCtor() {
  clear_has_optional_source_stop_reason();
}

PerfSample_ProducerEvent::~PerfSample_ProducerEvent() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfSample.ProducerEvent)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PerfSample_ProducerEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_optional_source_stop_reason()) {
    clear_optional_source_stop_reason();
  }
}

void PerfSample_ProducerEvent::ArenaDtor(void* object) {
  PerfSample_ProducerEvent* _this = reinterpret_cast< PerfSample_ProducerEvent* >(object);
  (void)_this;
}
void PerfSample_ProducerEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PerfSample_ProducerEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfSample_ProducerEvent& PerfSample_ProducerEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerfSample_ProducerEvent_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base);
  return *internal_default_instance();
}


void PerfSample_ProducerEvent::clear_optional_source_stop_reason() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.PerfSample.ProducerEvent)
  switch (optional_source_stop_reason_case()) {
    case kSourceStopReason: {
      // No need to clear
      break;
    }
    case OPTIONAL_SOURCE_STOP_REASON_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIONAL_SOURCE_STOP_REASON_NOT_SET;
}


void PerfSample_ProducerEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfSample.ProducerEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_optional_source_stop_reason();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfSample_ProducerEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .perfetto.protos.PerfSample.ProducerEvent.DataSourceStopReason source_stop_reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::PerfSample_ProducerEvent_DataSourceStopReason_IsValid(val))) {
            _internal_set_source_stop_reason(static_cast<::perfetto::protos::PerfSample_ProducerEvent_DataSourceStopReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PerfSample_ProducerEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PerfSample.ProducerEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perfetto.protos.PerfSample.ProducerEvent.DataSourceStopReason source_stop_reason = 1;
  if (_internal_has_source_stop_reason()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_source_stop_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PerfSample.ProducerEvent)
  return target;
}

size_t PerfSample_ProducerEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfSample.ProducerEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (optional_source_stop_reason_case()) {
    // .perfetto.protos.PerfSample.ProducerEvent.DataSourceStopReason source_stop_reason = 1;
    case kSourceStopReason: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source_stop_reason());
      break;
    }
    case OPTIONAL_SOURCE_STOP_REASON_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfSample_ProducerEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PerfSample_ProducerEvent*>(
      &from));
}

void PerfSample_ProducerEvent::MergeFrom(const PerfSample_ProducerEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfSample.ProducerEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.optional_source_stop_reason_case()) {
    case kSourceStopReason: {
      _internal_set_source_stop_reason(from._internal_source_stop_reason());
      break;
    }
    case OPTIONAL_SOURCE_STOP_REASON_NOT_SET: {
      break;
    }
  }
}

void PerfSample_ProducerEvent::CopyFrom(const PerfSample_ProducerEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfSample.ProducerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfSample_ProducerEvent::IsInitialized() const {
  return true;
}

void PerfSample_ProducerEvent::InternalSwap(PerfSample_ProducerEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(optional_source_stop_reason_, other->optional_source_stop_reason_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string PerfSample_ProducerEvent::GetTypeName() const {
  return "perfetto.protos.PerfSample.ProducerEvent";
}


// ===================================================================

class PerfSample::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfSample>()._has_bits_);
  static void set_has_cpu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cpu_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_timebase_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_callstack_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kernel_records_lost(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::perfetto::protos::PerfSample_ProducerEvent& producer_event(const PerfSample* msg);
  static void set_has_producer_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::PerfSample_ProducerEvent&
PerfSample::_Internal::producer_event(const PerfSample* msg) {
  return *msg->producer_event_;
}
PerfSample::PerfSample(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PerfSample)
}
PerfSample::PerfSample(const PerfSample& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_producer_event()) {
    producer_event_ = new ::perfetto::protos::PerfSample_ProducerEvent(*from.producer_event_);
  } else {
    producer_event_ = nullptr;
  }
  ::memcpy(&cpu_, &from.cpu_,
    static_cast<size_t>(reinterpret_cast<char*>(&kernel_records_lost_) -
    reinterpret_cast<char*>(&cpu_)) + sizeof(kernel_records_lost_));
  clear_has_optional_unwind_error();
  switch (from.optional_unwind_error_case()) {
    case kUnwindError: {
      _internal_set_unwind_error(from._internal_unwind_error());
      break;
    }
    case OPTIONAL_UNWIND_ERROR_NOT_SET: {
      break;
    }
  }
  clear_has_optional_sample_skipped_reason();
  switch (from.optional_sample_skipped_reason_case()) {
    case kSampleSkippedReason: {
      _internal_set_sample_skipped_reason(from._internal_sample_skipped_reason());
      break;
    }
    case OPTIONAL_SAMPLE_SKIPPED_REASON_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfSample)
}

void PerfSample::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerfSample_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&producer_event_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&kernel_records_lost_) -
      reinterpret_cast<char*>(&producer_event_)) + sizeof(kernel_records_lost_));
  clear_has_optional_unwind_error();
  clear_has_optional_sample_skipped_reason();
}

PerfSample::~PerfSample() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfSample)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PerfSample::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete producer_event_;
  if (has_optional_unwind_error()) {
    clear_optional_unwind_error();
  }
  if (has_optional_sample_skipped_reason()) {
    clear_optional_sample_skipped_reason();
  }
}

void PerfSample::ArenaDtor(void* object) {
  PerfSample* _this = reinterpret_cast< PerfSample* >(object);
  (void)_this;
}
void PerfSample::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PerfSample::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfSample& PerfSample::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerfSample_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base);
  return *internal_default_instance();
}


void PerfSample::clear_optional_unwind_error() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.PerfSample)
  switch (optional_unwind_error_case()) {
    case kUnwindError: {
      // No need to clear
      break;
    }
    case OPTIONAL_UNWIND_ERROR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIONAL_UNWIND_ERROR_NOT_SET;
}

void PerfSample::clear_optional_sample_skipped_reason() {
// @@protoc_insertion_point(one_of_clear_start:perfetto.protos.PerfSample)
  switch (optional_sample_skipped_reason_case()) {
    case kSampleSkippedReason: {
      // No need to clear
      break;
    }
    case OPTIONAL_SAMPLE_SKIPPED_REASON_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = OPTIONAL_SAMPLE_SKIPPED_REASON_NOT_SET;
}


void PerfSample::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfSample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(producer_event_ != nullptr);
    producer_event_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&cpu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kernel_records_lost_) -
        reinterpret_cast<char*>(&cpu_)) + sizeof(kernel_records_lost_));
  }
  clear_optional_unwind_error();
  clear_optional_sample_skipped_reason();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfSample::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 cpu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cpu(&has_bits);
          cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tid(&has_bits);
          tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 callstack_iid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_callstack_iid(&has_bits);
          callstack_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.Profiling.CpuMode cpu_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::Profiling_CpuMode_IsValid(val))) {
            _internal_set_cpu_mode(static_cast<::perfetto::protos::Profiling_CpuMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 timebase_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_timebase_count(&has_bits);
          timebase_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfetto.protos.Profiling.StackUnwindError unwind_error = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::Profiling_StackUnwindError_IsValid(val))) {
            _internal_set_unwind_error(static_cast<::perfetto::protos::Profiling_StackUnwindError>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 kernel_records_lost = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_kernel_records_lost(&has_bits);
          kernel_records_lost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfetto.protos.PerfSample.SampleSkipReason sample_skipped_reason = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::PerfSample_SampleSkipReason_IsValid(val))) {
            _internal_set_sample_skipped_reason(static_cast<::perfetto::protos::PerfSample_SampleSkipReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.PerfSample.ProducerEvent producer_event = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_producer_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PerfSample::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PerfSample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cpu = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cpu(), target);
  }

  // optional uint32 pid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pid(), target);
  }

  // optional uint32 tid = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tid(), target);
  }

  // optional uint64 callstack_iid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_callstack_iid(), target);
  }

  // optional .perfetto.protos.Profiling.CpuMode cpu_mode = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_cpu_mode(), target);
  }

  // optional uint64 timebase_count = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_timebase_count(), target);
  }

  // .perfetto.protos.Profiling.StackUnwindError unwind_error = 16;
  if (_internal_has_unwind_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_unwind_error(), target);
  }

  // optional uint64 kernel_records_lost = 17;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_kernel_records_lost(), target);
  }

  // .perfetto.protos.PerfSample.SampleSkipReason sample_skipped_reason = 18;
  if (_internal_has_sample_skipped_reason()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->_internal_sample_skipped_reason(), target);
  }

  // optional .perfetto.protos.PerfSample.ProducerEvent producer_event = 19;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::producer_event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PerfSample)
  return target;
}

size_t PerfSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfSample)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .perfetto.protos.PerfSample.ProducerEvent producer_event = 19;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *producer_event_);
    }

    // optional uint32 cpu = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cpu());
    }

    // optional uint32 pid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pid());
    }

    // optional uint64 callstack_iid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_callstack_iid());
    }

    // optional uint32 tid = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tid());
    }

    // optional .perfetto.protos.Profiling.CpuMode cpu_mode = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cpu_mode());
    }

    // optional uint64 timebase_count = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_timebase_count());
    }

    // optional uint64 kernel_records_lost = 17;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_kernel_records_lost());
    }

  }
  switch (optional_unwind_error_case()) {
    // .perfetto.protos.Profiling.StackUnwindError unwind_error = 16;
    case kUnwindError: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_unwind_error());
      break;
    }
    case OPTIONAL_UNWIND_ERROR_NOT_SET: {
      break;
    }
  }
  switch (optional_sample_skipped_reason_case()) {
    // .perfetto.protos.PerfSample.SampleSkipReason sample_skipped_reason = 18;
    case kSampleSkippedReason: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sample_skipped_reason());
      break;
    }
    case OPTIONAL_SAMPLE_SKIPPED_REASON_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfSample::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PerfSample*>(
      &from));
}

void PerfSample::MergeFrom(const PerfSample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfSample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_producer_event()->::perfetto::protos::PerfSample_ProducerEvent::MergeFrom(from._internal_producer_event());
    }
    if (cached_has_bits & 0x00000002u) {
      cpu_ = from.cpu_;
    }
    if (cached_has_bits & 0x00000004u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000008u) {
      callstack_iid_ = from.callstack_iid_;
    }
    if (cached_has_bits & 0x00000010u) {
      tid_ = from.tid_;
    }
    if (cached_has_bits & 0x00000020u) {
      cpu_mode_ = from.cpu_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      timebase_count_ = from.timebase_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      kernel_records_lost_ = from.kernel_records_lost_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.optional_unwind_error_case()) {
    case kUnwindError: {
      _internal_set_unwind_error(from._internal_unwind_error());
      break;
    }
    case OPTIONAL_UNWIND_ERROR_NOT_SET: {
      break;
    }
  }
  switch (from.optional_sample_skipped_reason_case()) {
    case kSampleSkippedReason: {
      _internal_set_sample_skipped_reason(from._internal_sample_skipped_reason());
      break;
    }
    case OPTIONAL_SAMPLE_SKIPPED_REASON_NOT_SET: {
      break;
    }
  }
}

void PerfSample::CopyFrom(const PerfSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfSample::IsInitialized() const {
  return true;
}

void PerfSample::InternalSwap(PerfSample* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfSample, kernel_records_lost_)
      + sizeof(PerfSample::kernel_records_lost_)
      - PROTOBUF_FIELD_OFFSET(PerfSample, producer_event_)>(
          reinterpret_cast<char*>(&producer_event_),
          reinterpret_cast<char*>(&other->producer_event_));
  swap(optional_unwind_error_, other->optional_unwind_error_);
  swap(optional_sample_skipped_reason_, other->optional_sample_skipped_reason_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

std::string PerfSample::GetTypeName() const {
  return "perfetto.protos.PerfSample";
}


// ===================================================================

class PerfSampleDefaults::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfSampleDefaults>()._has_bits_);
  static const ::perfetto::protos::PerfEvents_Timebase& timebase(const PerfSampleDefaults* msg);
  static void set_has_timebase(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::PerfEvents_Timebase&
PerfSampleDefaults::_Internal::timebase(const PerfSampleDefaults* msg) {
  return *msg->timebase_;
}
void PerfSampleDefaults::clear_timebase() {
  if (timebase_ != nullptr) timebase_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PerfSampleDefaults::PerfSampleDefaults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PerfSampleDefaults)
}
PerfSampleDefaults::PerfSampleDefaults(const PerfSampleDefaults& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_timebase()) {
    timebase_ = new ::perfetto::protos::PerfEvents_Timebase(*from.timebase_);
  } else {
    timebase_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfSampleDefaults)
}

void PerfSampleDefaults::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerfSampleDefaults_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base);
  timebase_ = nullptr;
}

PerfSampleDefaults::~PerfSampleDefaults() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfSampleDefaults)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PerfSampleDefaults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timebase_;
}

void PerfSampleDefaults::ArenaDtor(void* object) {
  PerfSampleDefaults* _this = reinterpret_cast< PerfSampleDefaults* >(object);
  (void)_this;
}
void PerfSampleDefaults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PerfSampleDefaults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfSampleDefaults& PerfSampleDefaults::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerfSampleDefaults_protos_2fperfetto_2ftrace_2fprofiling_2fprofile_5fpacket_2eproto.base);
  return *internal_default_instance();
}


void PerfSampleDefaults::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfSampleDefaults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(timebase_ != nullptr);
    timebase_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfSampleDefaults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.PerfEvents.Timebase timebase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timebase(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PerfSampleDefaults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PerfSampleDefaults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.PerfEvents.Timebase timebase = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timebase(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PerfSampleDefaults)
  return target;
}

size_t PerfSampleDefaults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfSampleDefaults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .perfetto.protos.PerfEvents.Timebase timebase = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timebase_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfSampleDefaults::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PerfSampleDefaults*>(
      &from));
}

void PerfSampleDefaults::MergeFrom(const PerfSampleDefaults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfSampleDefaults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timebase()) {
    _internal_mutable_timebase()->::perfetto::protos::PerfEvents_Timebase::MergeFrom(from._internal_timebase());
  }
}

void PerfSampleDefaults::CopyFrom(const PerfSampleDefaults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfSampleDefaults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfSampleDefaults::IsInitialized() const {
  return true;
}

void PerfSampleDefaults::InternalSwap(PerfSampleDefaults* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timebase_, other->timebase_);
}

std::string PerfSampleDefaults::GetTypeName() const {
  return "perfetto.protos.PerfSampleDefaults";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProfilePacket_HeapSample* Arena::CreateMaybeMessage< ::perfetto::protos::ProfilePacket_HeapSample >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProfilePacket_HeapSample >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProfilePacket_Histogram_Bucket* Arena::CreateMaybeMessage< ::perfetto::protos::ProfilePacket_Histogram_Bucket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProfilePacket_Histogram_Bucket >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProfilePacket_Histogram* Arena::CreateMaybeMessage< ::perfetto::protos::ProfilePacket_Histogram >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProfilePacket_Histogram >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProfilePacket_ProcessStats* Arena::CreateMaybeMessage< ::perfetto::protos::ProfilePacket_ProcessStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProfilePacket_ProcessStats >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProfilePacket_ProcessHeapSamples* Arena::CreateMaybeMessage< ::perfetto::protos::ProfilePacket_ProcessHeapSamples >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProfilePacket_ProcessHeapSamples >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::ProfilePacket* Arena::CreateMaybeMessage< ::perfetto::protos::ProfilePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ProfilePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::StreamingAllocation* Arena::CreateMaybeMessage< ::perfetto::protos::StreamingAllocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::StreamingAllocation >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::StreamingFree* Arena::CreateMaybeMessage< ::perfetto::protos::StreamingFree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::StreamingFree >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::StreamingProfilePacket* Arena::CreateMaybeMessage< ::perfetto::protos::StreamingProfilePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::StreamingProfilePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::Profiling* Arena::CreateMaybeMessage< ::perfetto::protos::Profiling >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::Profiling >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfSample_ProducerEvent* Arena::CreateMaybeMessage< ::perfetto::protos::PerfSample_ProducerEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PerfSample_ProducerEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfSample* Arena::CreateMaybeMessage< ::perfetto::protos::PerfSample >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PerfSample >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfSampleDefaults* Arena::CreateMaybeMessage< ::perfetto::protos::PerfSampleDefaults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PerfSampleDefaults >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
