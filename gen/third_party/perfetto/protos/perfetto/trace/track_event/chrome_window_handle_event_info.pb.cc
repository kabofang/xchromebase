// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/chrome_window_handle_event_info.proto

#include "protos/perfetto/trace/track_event/chrome_window_handle_event_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace perfetto {
namespace protos {
class ChromeWindowHandleEventInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChromeWindowHandleEventInfo> _instance;
} _ChromeWindowHandleEventInfo_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_ChromeWindowHandleEventInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fwindow_5fhandle_5fevent_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_ChromeWindowHandleEventInfo_default_instance_;
    new (ptr) ::perfetto::protos::ChromeWindowHandleEventInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeWindowHandleEventInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fwindow_5fhandle_5fevent_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChromeWindowHandleEventInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fwindow_5fhandle_5fevent_5finfo_2eproto}, {}};

namespace perfetto {
namespace protos {

// ===================================================================

class ChromeWindowHandleEventInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeWindowHandleEventInfo>()._has_bits_);
  static void set_has_dpi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hwnd_ptr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ChromeWindowHandleEventInfo::ChromeWindowHandleEventInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeWindowHandleEventInfo)
}
ChromeWindowHandleEventInfo::ChromeWindowHandleEventInfo(const ChromeWindowHandleEventInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&dpi_, &from.dpi_,
    static_cast<size_t>(reinterpret_cast<char*>(&hwnd_ptr_) -
    reinterpret_cast<char*>(&dpi_)) + sizeof(hwnd_ptr_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeWindowHandleEventInfo)
}

void ChromeWindowHandleEventInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&dpi_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&hwnd_ptr_) -
      reinterpret_cast<char*>(&dpi_)) + sizeof(hwnd_ptr_));
}

ChromeWindowHandleEventInfo::~ChromeWindowHandleEventInfo() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeWindowHandleEventInfo)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ChromeWindowHandleEventInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChromeWindowHandleEventInfo::ArenaDtor(void* object) {
  ChromeWindowHandleEventInfo* _this = reinterpret_cast< ChromeWindowHandleEventInfo* >(object);
  (void)_this;
}
void ChromeWindowHandleEventInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChromeWindowHandleEventInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChromeWindowHandleEventInfo& ChromeWindowHandleEventInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChromeWindowHandleEventInfo_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fchrome_5fwindow_5fhandle_5fevent_5finfo_2eproto.base);
  return *internal_default_instance();
}


void ChromeWindowHandleEventInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeWindowHandleEventInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&dpi_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hwnd_ptr_) -
        reinterpret_cast<char*>(&dpi_)) + sizeof(hwnd_ptr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeWindowHandleEventInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 dpi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dpi(&has_bits);
          dpi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 message_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_message_id(&has_bits);
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 hwnd_ptr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_hwnd_ptr(&has_bits);
          hwnd_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChromeWindowHandleEventInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeWindowHandleEventInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dpi = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dpi(), target);
  }

  // optional uint32 message_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_message_id(), target);
  }

  // optional fixed64 hwnd_ptr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_hwnd_ptr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeWindowHandleEventInfo)
  return target;
}

size_t ChromeWindowHandleEventInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeWindowHandleEventInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 dpi = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dpi());
    }

    // optional uint32 message_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_message_id());
    }

    // optional fixed64 hwnd_ptr = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeWindowHandleEventInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChromeWindowHandleEventInfo*>(
      &from));
}

void ChromeWindowHandleEventInfo::MergeFrom(const ChromeWindowHandleEventInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeWindowHandleEventInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      dpi_ = from.dpi_;
    }
    if (cached_has_bits & 0x00000002u) {
      message_id_ = from.message_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hwnd_ptr_ = from.hwnd_ptr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChromeWindowHandleEventInfo::CopyFrom(const ChromeWindowHandleEventInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeWindowHandleEventInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeWindowHandleEventInfo::IsInitialized() const {
  return true;
}

void ChromeWindowHandleEventInfo::InternalSwap(ChromeWindowHandleEventInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeWindowHandleEventInfo, hwnd_ptr_)
      + sizeof(ChromeWindowHandleEventInfo::hwnd_ptr_)
      - PROTOBUF_FIELD_OFFSET(ChromeWindowHandleEventInfo, dpi_)>(
          reinterpret_cast<char*>(&dpi_),
          reinterpret_cast<char*>(&other->dpi_));
}

std::string ChromeWindowHandleEventInfo::GetTypeName() const {
  return "perfetto.protos.ChromeWindowHandleEventInfo";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeWindowHandleEventInfo* Arena::CreateMaybeMessage< ::perfetto::protos::ChromeWindowHandleEventInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeWindowHandleEventInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
