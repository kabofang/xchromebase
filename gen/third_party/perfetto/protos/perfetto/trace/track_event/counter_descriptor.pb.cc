// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/track_event/counter_descriptor.proto

#include "protos/perfetto/trace/track_event/counter_descriptor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace perfetto {
namespace protos {
class CounterDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CounterDescriptor> _instance;
} _CounterDescriptor_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_CounterDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_CounterDescriptor_default_instance_;
    new (ptr) ::perfetto::protos::CounterDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CounterDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CounterDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto}, {}};

namespace perfetto {
namespace protos {
bool CounterDescriptor_BuiltinCounterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CounterDescriptor_BuiltinCounterType_strings[3] = {};

static const char CounterDescriptor_BuiltinCounterType_names[] =
  "COUNTER_THREAD_INSTRUCTION_COUNT"
  "COUNTER_THREAD_TIME_NS"
  "COUNTER_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CounterDescriptor_BuiltinCounterType_entries[] = {
  { {CounterDescriptor_BuiltinCounterType_names + 0, 32}, 2 },
  { {CounterDescriptor_BuiltinCounterType_names + 32, 22}, 1 },
  { {CounterDescriptor_BuiltinCounterType_names + 54, 19}, 0 },
};

static const int CounterDescriptor_BuiltinCounterType_entries_by_number[] = {
  2, // 0 -> COUNTER_UNSPECIFIED
  1, // 1 -> COUNTER_THREAD_TIME_NS
  0, // 2 -> COUNTER_THREAD_INSTRUCTION_COUNT
};

const std::string& CounterDescriptor_BuiltinCounterType_Name(
    CounterDescriptor_BuiltinCounterType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CounterDescriptor_BuiltinCounterType_entries,
          CounterDescriptor_BuiltinCounterType_entries_by_number,
          3, CounterDescriptor_BuiltinCounterType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CounterDescriptor_BuiltinCounterType_entries,
      CounterDescriptor_BuiltinCounterType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CounterDescriptor_BuiltinCounterType_strings[idx].get();
}
bool CounterDescriptor_BuiltinCounterType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CounterDescriptor_BuiltinCounterType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CounterDescriptor_BuiltinCounterType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<CounterDescriptor_BuiltinCounterType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CounterDescriptor_BuiltinCounterType CounterDescriptor::COUNTER_UNSPECIFIED;
constexpr CounterDescriptor_BuiltinCounterType CounterDescriptor::COUNTER_THREAD_TIME_NS;
constexpr CounterDescriptor_BuiltinCounterType CounterDescriptor::COUNTER_THREAD_INSTRUCTION_COUNT;
constexpr CounterDescriptor_BuiltinCounterType CounterDescriptor::BuiltinCounterType_MIN;
constexpr CounterDescriptor_BuiltinCounterType CounterDescriptor::BuiltinCounterType_MAX;
constexpr int CounterDescriptor::BuiltinCounterType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool CounterDescriptor_Unit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CounterDescriptor_Unit_strings[4] = {};

static const char CounterDescriptor_Unit_names[] =
  "UNIT_COUNT"
  "UNIT_SIZE_BYTES"
  "UNIT_TIME_NS"
  "UNIT_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CounterDescriptor_Unit_entries[] = {
  { {CounterDescriptor_Unit_names + 0, 10}, 2 },
  { {CounterDescriptor_Unit_names + 10, 15}, 3 },
  { {CounterDescriptor_Unit_names + 25, 12}, 1 },
  { {CounterDescriptor_Unit_names + 37, 16}, 0 },
};

static const int CounterDescriptor_Unit_entries_by_number[] = {
  3, // 0 -> UNIT_UNSPECIFIED
  2, // 1 -> UNIT_TIME_NS
  0, // 2 -> UNIT_COUNT
  1, // 3 -> UNIT_SIZE_BYTES
};

const std::string& CounterDescriptor_Unit_Name(
    CounterDescriptor_Unit value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CounterDescriptor_Unit_entries,
          CounterDescriptor_Unit_entries_by_number,
          4, CounterDescriptor_Unit_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CounterDescriptor_Unit_entries,
      CounterDescriptor_Unit_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CounterDescriptor_Unit_strings[idx].get();
}
bool CounterDescriptor_Unit_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CounterDescriptor_Unit* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CounterDescriptor_Unit_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<CounterDescriptor_Unit>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CounterDescriptor_Unit CounterDescriptor::UNIT_UNSPECIFIED;
constexpr CounterDescriptor_Unit CounterDescriptor::UNIT_TIME_NS;
constexpr CounterDescriptor_Unit CounterDescriptor::UNIT_COUNT;
constexpr CounterDescriptor_Unit CounterDescriptor::UNIT_SIZE_BYTES;
constexpr CounterDescriptor_Unit CounterDescriptor::Unit_MIN;
constexpr CounterDescriptor_Unit CounterDescriptor::Unit_MAX;
constexpr int CounterDescriptor::Unit_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class CounterDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<CounterDescriptor>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_unit_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unit_multiplier(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_incremental(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CounterDescriptor::CounterDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  categories_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.CounterDescriptor)
}
CounterDescriptor::CounterDescriptor(const CounterDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      categories_(from.categories_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  unit_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_unit_name()) {
    unit_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_unit_name(),
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_incremental_) -
    reinterpret_cast<char*>(&type_)) + sizeof(is_incremental_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.CounterDescriptor)
}

void CounterDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CounterDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto.base);
  unit_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_incremental_) -
      reinterpret_cast<char*>(&type_)) + sizeof(is_incremental_));
}

CounterDescriptor::~CounterDescriptor() {
  // @@protoc_insertion_point(destructor:perfetto.protos.CounterDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CounterDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  unit_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CounterDescriptor::ArenaDtor(void* object) {
  CounterDescriptor* _this = reinterpret_cast< CounterDescriptor* >(object);
  (void)_this;
}
void CounterDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CounterDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CounterDescriptor& CounterDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CounterDescriptor_protos_2fperfetto_2ftrace_2ftrack_5fevent_2fcounter_5fdescriptor_2eproto.base);
  return *internal_default_instance();
}


void CounterDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.CounterDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  categories_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    unit_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_incremental_) -
        reinterpret_cast<char*>(&type_)) + sizeof(is_incremental_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CounterDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.CounterDescriptor.BuiltinCounterType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::CounterDescriptor_BuiltinCounterType_IsValid(val))) {
            _internal_set_type(static_cast<::perfetto::protos::CounterDescriptor_BuiltinCounterType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated string categories = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_categories();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.CounterDescriptor.Unit unit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::CounterDescriptor_Unit_IsValid(val))) {
            _internal_set_unit(static_cast<::perfetto::protos::CounterDescriptor_Unit>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 unit_multiplier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_unit_multiplier(&has_bits);
          unit_multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_incremental = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_incremental(&has_bits);
          is_incremental_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string unit_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_unit_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CounterDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.CounterDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.CounterDescriptor.BuiltinCounterType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated string categories = 2;
  for (int i = 0, n = this->_internal_categories_size(); i < n; i++) {
    const auto& s = this->_internal_categories(i);
    target = stream->WriteString(2, s, target);
  }

  // optional .perfetto.protos.CounterDescriptor.Unit unit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_unit(), target);
  }

  // optional int64 unit_multiplier = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_unit_multiplier(), target);
  }

  // optional bool is_incremental = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_incremental(), target);
  }

  // optional string unit_name = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_unit_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.CounterDescriptor)
  return target;
}

size_t CounterDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.CounterDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string categories = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(categories_.size());
  for (int i = 0, n = categories_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      categories_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string unit_name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unit_name());
    }

    // optional .perfetto.protos.CounterDescriptor.BuiltinCounterType type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .perfetto.protos.CounterDescriptor.Unit unit = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_unit());
    }

    // optional int64 unit_multiplier = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_unit_multiplier());
    }

    // optional bool is_incremental = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CounterDescriptor::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CounterDescriptor*>(
      &from));
}

void CounterDescriptor::MergeFrom(const CounterDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.CounterDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  categories_.MergeFrom(from.categories_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_unit_name(from._internal_unit_name());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      unit_ = from.unit_;
    }
    if (cached_has_bits & 0x00000008u) {
      unit_multiplier_ = from.unit_multiplier_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_incremental_ = from.is_incremental_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CounterDescriptor::CopyFrom(const CounterDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.CounterDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounterDescriptor::IsInitialized() const {
  return true;
}

void CounterDescriptor::InternalSwap(CounterDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  categories_.InternalSwap(&other->categories_);
  unit_name_.Swap(&other->unit_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CounterDescriptor, is_incremental_)
      + sizeof(CounterDescriptor::is_incremental_)
      - PROTOBUF_FIELD_OFFSET(CounterDescriptor, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

std::string CounterDescriptor::GetTypeName() const {
  return "perfetto.protos.CounterDescriptor";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::CounterDescriptor* Arena::CreateMaybeMessage< ::perfetto::protos::CounterDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::CounterDescriptor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
