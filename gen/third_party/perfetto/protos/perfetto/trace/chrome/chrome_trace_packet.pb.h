// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/chrome/chrome_trace_packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fpacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fpacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "protos/perfetto/common/trace_stats.pb.h"
#include "protos/perfetto/config/trace_config.pb.h"
#include "protos/perfetto/trace/chrome/chrome_trace_event.pb.h"
#include "protos/perfetto/trace/clock_snapshot.pb.h"
#include "protos/perfetto/trace/interned_data/interned_data.pb.h"
#include "protos/perfetto/trace/profiling/profile_packet.pb.h"
#include "protos/perfetto/trace/profiling/profile_common.pb.h"
#include "protos/perfetto/trace/track_event/process_descriptor.pb.h"
#include "protos/perfetto/trace/track_event/thread_descriptor.pb.h"
#include "protos/perfetto/trace/track_event/track_event.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fpacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fpacket_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class ChromeTracePacket;
class ChromeTracePacketDefaultTypeInternal;
extern ChromeTracePacketDefaultTypeInternal _ChromeTracePacket_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::ChromeTracePacket* Arena::CreateMaybeMessage<::perfetto::protos::ChromeTracePacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class ChromeTracePacket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.ChromeTracePacket) */ {
 public:
  inline ChromeTracePacket() : ChromeTracePacket(nullptr) {}
  virtual ~ChromeTracePacket();

  ChromeTracePacket(const ChromeTracePacket& from);
  ChromeTracePacket(ChromeTracePacket&& from) noexcept
    : ChromeTracePacket() {
    *this = ::std::move(from);
  }

  inline ChromeTracePacket& operator=(const ChromeTracePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeTracePacket& operator=(ChromeTracePacket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ChromeTracePacket& default_instance();

  static inline const ChromeTracePacket* internal_default_instance() {
    return reinterpret_cast<const ChromeTracePacket*>(
               &_ChromeTracePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChromeTracePacket& a, ChromeTracePacket& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ChromeTracePacket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeTracePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChromeTracePacket* New() const final {
    return CreateMaybeMessage<ChromeTracePacket>(nullptr);
  }

  ChromeTracePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChromeTracePacket>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ChromeTracePacket& from);
  void MergeFrom(const ChromeTracePacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeTracePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.ChromeTracePacket";
  }
  protected:
  explicit ChromeTracePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChromeEventsFieldNumber = 5,
    kClockSnapshotFieldNumber = 6,
    kTrackEventFieldNumber = 11,
    kInternedDataFieldNumber = 12,
    kTraceConfigFieldNumber = 33,
    kTraceStatsFieldNumber = 35,
    kProcessDescriptorFieldNumber = 43,
    kThreadDescriptorFieldNumber = 44,
    kStreamingProfilePacketFieldNumber = 54,
    kProfiledFrameSymbolsFieldNumber = 55,
    kTrustedPacketSequenceIdFieldNumber = 10,
    kIncrementalStateClearedFieldNumber = 41,
    kPreviousPacketDroppedFieldNumber = 42,
  };
  // .perfetto.protos.ChromeEventBundle chrome_events = 5;
  bool has_chrome_events() const;
  private:
  bool _internal_has_chrome_events() const;
  public:
  void clear_chrome_events();
  const ::perfetto::protos::ChromeEventBundle& chrome_events() const;
  ::perfetto::protos::ChromeEventBundle* release_chrome_events();
  ::perfetto::protos::ChromeEventBundle* mutable_chrome_events();
  void set_allocated_chrome_events(::perfetto::protos::ChromeEventBundle* chrome_events);
  private:
  const ::perfetto::protos::ChromeEventBundle& _internal_chrome_events() const;
  ::perfetto::protos::ChromeEventBundle* _internal_mutable_chrome_events();
  public:
  void unsafe_arena_set_allocated_chrome_events(
      ::perfetto::protos::ChromeEventBundle* chrome_events);
  ::perfetto::protos::ChromeEventBundle* unsafe_arena_release_chrome_events();

  // .perfetto.protos.ClockSnapshot clock_snapshot = 6;
  bool has_clock_snapshot() const;
  private:
  bool _internal_has_clock_snapshot() const;
  public:
  void clear_clock_snapshot();
  const ::perfetto::protos::ClockSnapshot& clock_snapshot() const;
  ::perfetto::protos::ClockSnapshot* release_clock_snapshot();
  ::perfetto::protos::ClockSnapshot* mutable_clock_snapshot();
  void set_allocated_clock_snapshot(::perfetto::protos::ClockSnapshot* clock_snapshot);
  private:
  const ::perfetto::protos::ClockSnapshot& _internal_clock_snapshot() const;
  ::perfetto::protos::ClockSnapshot* _internal_mutable_clock_snapshot();
  public:
  void unsafe_arena_set_allocated_clock_snapshot(
      ::perfetto::protos::ClockSnapshot* clock_snapshot);
  ::perfetto::protos::ClockSnapshot* unsafe_arena_release_clock_snapshot();

  // .perfetto.protos.TrackEvent track_event = 11;
  bool has_track_event() const;
  private:
  bool _internal_has_track_event() const;
  public:
  void clear_track_event();
  const ::perfetto::protos::TrackEvent& track_event() const;
  ::perfetto::protos::TrackEvent* release_track_event();
  ::perfetto::protos::TrackEvent* mutable_track_event();
  void set_allocated_track_event(::perfetto::protos::TrackEvent* track_event);
  private:
  const ::perfetto::protos::TrackEvent& _internal_track_event() const;
  ::perfetto::protos::TrackEvent* _internal_mutable_track_event();
  public:
  void unsafe_arena_set_allocated_track_event(
      ::perfetto::protos::TrackEvent* track_event);
  ::perfetto::protos::TrackEvent* unsafe_arena_release_track_event();

  // .perfetto.protos.InternedData interned_data = 12;
  bool has_interned_data() const;
  private:
  bool _internal_has_interned_data() const;
  public:
  void clear_interned_data();
  const ::perfetto::protos::InternedData& interned_data() const;
  ::perfetto::protos::InternedData* release_interned_data();
  ::perfetto::protos::InternedData* mutable_interned_data();
  void set_allocated_interned_data(::perfetto::protos::InternedData* interned_data);
  private:
  const ::perfetto::protos::InternedData& _internal_interned_data() const;
  ::perfetto::protos::InternedData* _internal_mutable_interned_data();
  public:
  void unsafe_arena_set_allocated_interned_data(
      ::perfetto::protos::InternedData* interned_data);
  ::perfetto::protos::InternedData* unsafe_arena_release_interned_data();

  // .perfetto.protos.TraceConfig trace_config = 33;
  bool has_trace_config() const;
  private:
  bool _internal_has_trace_config() const;
  public:
  void clear_trace_config();
  const ::perfetto::protos::TraceConfig& trace_config() const;
  ::perfetto::protos::TraceConfig* release_trace_config();
  ::perfetto::protos::TraceConfig* mutable_trace_config();
  void set_allocated_trace_config(::perfetto::protos::TraceConfig* trace_config);
  private:
  const ::perfetto::protos::TraceConfig& _internal_trace_config() const;
  ::perfetto::protos::TraceConfig* _internal_mutable_trace_config();
  public:
  void unsafe_arena_set_allocated_trace_config(
      ::perfetto::protos::TraceConfig* trace_config);
  ::perfetto::protos::TraceConfig* unsafe_arena_release_trace_config();

  // .perfetto.protos.TraceStats trace_stats = 35;
  bool has_trace_stats() const;
  private:
  bool _internal_has_trace_stats() const;
  public:
  void clear_trace_stats();
  const ::perfetto::protos::TraceStats& trace_stats() const;
  ::perfetto::protos::TraceStats* release_trace_stats();
  ::perfetto::protos::TraceStats* mutable_trace_stats();
  void set_allocated_trace_stats(::perfetto::protos::TraceStats* trace_stats);
  private:
  const ::perfetto::protos::TraceStats& _internal_trace_stats() const;
  ::perfetto::protos::TraceStats* _internal_mutable_trace_stats();
  public:
  void unsafe_arena_set_allocated_trace_stats(
      ::perfetto::protos::TraceStats* trace_stats);
  ::perfetto::protos::TraceStats* unsafe_arena_release_trace_stats();

  // .perfetto.protos.ProcessDescriptor process_descriptor = 43;
  bool has_process_descriptor() const;
  private:
  bool _internal_has_process_descriptor() const;
  public:
  void clear_process_descriptor();
  const ::perfetto::protos::ProcessDescriptor& process_descriptor() const;
  ::perfetto::protos::ProcessDescriptor* release_process_descriptor();
  ::perfetto::protos::ProcessDescriptor* mutable_process_descriptor();
  void set_allocated_process_descriptor(::perfetto::protos::ProcessDescriptor* process_descriptor);
  private:
  const ::perfetto::protos::ProcessDescriptor& _internal_process_descriptor() const;
  ::perfetto::protos::ProcessDescriptor* _internal_mutable_process_descriptor();
  public:
  void unsafe_arena_set_allocated_process_descriptor(
      ::perfetto::protos::ProcessDescriptor* process_descriptor);
  ::perfetto::protos::ProcessDescriptor* unsafe_arena_release_process_descriptor();

  // .perfetto.protos.ThreadDescriptor thread_descriptor = 44;
  bool has_thread_descriptor() const;
  private:
  bool _internal_has_thread_descriptor() const;
  public:
  void clear_thread_descriptor();
  const ::perfetto::protos::ThreadDescriptor& thread_descriptor() const;
  ::perfetto::protos::ThreadDescriptor* release_thread_descriptor();
  ::perfetto::protos::ThreadDescriptor* mutable_thread_descriptor();
  void set_allocated_thread_descriptor(::perfetto::protos::ThreadDescriptor* thread_descriptor);
  private:
  const ::perfetto::protos::ThreadDescriptor& _internal_thread_descriptor() const;
  ::perfetto::protos::ThreadDescriptor* _internal_mutable_thread_descriptor();
  public:
  void unsafe_arena_set_allocated_thread_descriptor(
      ::perfetto::protos::ThreadDescriptor* thread_descriptor);
  ::perfetto::protos::ThreadDescriptor* unsafe_arena_release_thread_descriptor();

  // .perfetto.protos.StreamingProfilePacket streaming_profile_packet = 54;
  bool has_streaming_profile_packet() const;
  private:
  bool _internal_has_streaming_profile_packet() const;
  public:
  void clear_streaming_profile_packet();
  const ::perfetto::protos::StreamingProfilePacket& streaming_profile_packet() const;
  ::perfetto::protos::StreamingProfilePacket* release_streaming_profile_packet();
  ::perfetto::protos::StreamingProfilePacket* mutable_streaming_profile_packet();
  void set_allocated_streaming_profile_packet(::perfetto::protos::StreamingProfilePacket* streaming_profile_packet);
  private:
  const ::perfetto::protos::StreamingProfilePacket& _internal_streaming_profile_packet() const;
  ::perfetto::protos::StreamingProfilePacket* _internal_mutable_streaming_profile_packet();
  public:
  void unsafe_arena_set_allocated_streaming_profile_packet(
      ::perfetto::protos::StreamingProfilePacket* streaming_profile_packet);
  ::perfetto::protos::StreamingProfilePacket* unsafe_arena_release_streaming_profile_packet();

  // .perfetto.protos.ProfiledFrameSymbols profiled_frame_symbols = 55;
  bool has_profiled_frame_symbols() const;
  private:
  bool _internal_has_profiled_frame_symbols() const;
  public:
  void clear_profiled_frame_symbols();
  const ::perfetto::protos::ProfiledFrameSymbols& profiled_frame_symbols() const;
  ::perfetto::protos::ProfiledFrameSymbols* release_profiled_frame_symbols();
  ::perfetto::protos::ProfiledFrameSymbols* mutable_profiled_frame_symbols();
  void set_allocated_profiled_frame_symbols(::perfetto::protos::ProfiledFrameSymbols* profiled_frame_symbols);
  private:
  const ::perfetto::protos::ProfiledFrameSymbols& _internal_profiled_frame_symbols() const;
  ::perfetto::protos::ProfiledFrameSymbols* _internal_mutable_profiled_frame_symbols();
  public:
  void unsafe_arena_set_allocated_profiled_frame_symbols(
      ::perfetto::protos::ProfiledFrameSymbols* profiled_frame_symbols);
  ::perfetto::protos::ProfiledFrameSymbols* unsafe_arena_release_profiled_frame_symbols();

  // uint32 trusted_packet_sequence_id = 10;
  void clear_trusted_packet_sequence_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 trusted_packet_sequence_id() const;
  void set_trusted_packet_sequence_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_trusted_packet_sequence_id() const;
  void _internal_set_trusted_packet_sequence_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool incremental_state_cleared = 41;
  void clear_incremental_state_cleared();
  bool incremental_state_cleared() const;
  void set_incremental_state_cleared(bool value);
  private:
  bool _internal_incremental_state_cleared() const;
  void _internal_set_incremental_state_cleared(bool value);
  public:

  // bool previous_packet_dropped = 42;
  void clear_previous_packet_dropped();
  bool previous_packet_dropped() const;
  void set_previous_packet_dropped(bool value);
  private:
  bool _internal_previous_packet_dropped() const;
  void _internal_set_previous_packet_dropped(bool value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.ChromeTracePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perfetto::protos::ChromeEventBundle* chrome_events_;
  ::perfetto::protos::ClockSnapshot* clock_snapshot_;
  ::perfetto::protos::TrackEvent* track_event_;
  ::perfetto::protos::InternedData* interned_data_;
  ::perfetto::protos::TraceConfig* trace_config_;
  ::perfetto::protos::TraceStats* trace_stats_;
  ::perfetto::protos::ProcessDescriptor* process_descriptor_;
  ::perfetto::protos::ThreadDescriptor* thread_descriptor_;
  ::perfetto::protos::StreamingProfilePacket* streaming_profile_packet_;
  ::perfetto::protos::ProfiledFrameSymbols* profiled_frame_symbols_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trusted_packet_sequence_id_;
  bool incremental_state_cleared_;
  bool previous_packet_dropped_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fpacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChromeTracePacket

// .perfetto.protos.ChromeEventBundle chrome_events = 5;
inline bool ChromeTracePacket::_internal_has_chrome_events() const {
  return this != internal_default_instance() && chrome_events_ != nullptr;
}
inline bool ChromeTracePacket::has_chrome_events() const {
  return _internal_has_chrome_events();
}
inline const ::perfetto::protos::ChromeEventBundle& ChromeTracePacket::_internal_chrome_events() const {
  const ::perfetto::protos::ChromeEventBundle* p = chrome_events_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ChromeEventBundle&>(
      ::perfetto::protos::_ChromeEventBundle_default_instance_);
}
inline const ::perfetto::protos::ChromeEventBundle& ChromeTracePacket::chrome_events() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracePacket.chrome_events)
  return _internal_chrome_events();
}
inline void ChromeTracePacket::unsafe_arena_set_allocated_chrome_events(
    ::perfetto::protos::ChromeEventBundle* chrome_events) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_events_);
  }
  chrome_events_ = chrome_events;
  if (chrome_events) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.ChromeTracePacket.chrome_events)
}
inline ::perfetto::protos::ChromeEventBundle* ChromeTracePacket::release_chrome_events() {
  
  ::perfetto::protos::ChromeEventBundle* temp = chrome_events_;
  chrome_events_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfetto::protos::ChromeEventBundle* ChromeTracePacket::unsafe_arena_release_chrome_events() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTracePacket.chrome_events)
  
  ::perfetto::protos::ChromeEventBundle* temp = chrome_events_;
  chrome_events_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ChromeEventBundle* ChromeTracePacket::_internal_mutable_chrome_events() {
  
  if (chrome_events_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ChromeEventBundle>(GetArena());
    chrome_events_ = p;
  }
  return chrome_events_;
}
inline ::perfetto::protos::ChromeEventBundle* ChromeTracePacket::mutable_chrome_events() {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTracePacket.chrome_events)
  return _internal_mutable_chrome_events();
}
inline void ChromeTracePacket::set_allocated_chrome_events(::perfetto::protos::ChromeEventBundle* chrome_events) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_events_);
  }
  if (chrome_events) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_events)->GetArena();
    if (message_arena != submessage_arena) {
      chrome_events = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_events, submessage_arena);
    }
    
  } else {
    
  }
  chrome_events_ = chrome_events;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTracePacket.chrome_events)
}

// .perfetto.protos.ClockSnapshot clock_snapshot = 6;
inline bool ChromeTracePacket::_internal_has_clock_snapshot() const {
  return this != internal_default_instance() && clock_snapshot_ != nullptr;
}
inline bool ChromeTracePacket::has_clock_snapshot() const {
  return _internal_has_clock_snapshot();
}
inline const ::perfetto::protos::ClockSnapshot& ChromeTracePacket::_internal_clock_snapshot() const {
  const ::perfetto::protos::ClockSnapshot* p = clock_snapshot_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ClockSnapshot&>(
      ::perfetto::protos::_ClockSnapshot_default_instance_);
}
inline const ::perfetto::protos::ClockSnapshot& ChromeTracePacket::clock_snapshot() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracePacket.clock_snapshot)
  return _internal_clock_snapshot();
}
inline void ChromeTracePacket::unsafe_arena_set_allocated_clock_snapshot(
    ::perfetto::protos::ClockSnapshot* clock_snapshot) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clock_snapshot_);
  }
  clock_snapshot_ = clock_snapshot;
  if (clock_snapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.ChromeTracePacket.clock_snapshot)
}
inline ::perfetto::protos::ClockSnapshot* ChromeTracePacket::release_clock_snapshot() {
  
  ::perfetto::protos::ClockSnapshot* temp = clock_snapshot_;
  clock_snapshot_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfetto::protos::ClockSnapshot* ChromeTracePacket::unsafe_arena_release_clock_snapshot() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTracePacket.clock_snapshot)
  
  ::perfetto::protos::ClockSnapshot* temp = clock_snapshot_;
  clock_snapshot_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ClockSnapshot* ChromeTracePacket::_internal_mutable_clock_snapshot() {
  
  if (clock_snapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ClockSnapshot>(GetArena());
    clock_snapshot_ = p;
  }
  return clock_snapshot_;
}
inline ::perfetto::protos::ClockSnapshot* ChromeTracePacket::mutable_clock_snapshot() {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTracePacket.clock_snapshot)
  return _internal_mutable_clock_snapshot();
}
inline void ChromeTracePacket::set_allocated_clock_snapshot(::perfetto::protos::ClockSnapshot* clock_snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(clock_snapshot_);
  }
  if (clock_snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clock_snapshot)->GetArena();
    if (message_arena != submessage_arena) {
      clock_snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clock_snapshot, submessage_arena);
    }
    
  } else {
    
  }
  clock_snapshot_ = clock_snapshot;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTracePacket.clock_snapshot)
}

// .perfetto.protos.TrackEvent track_event = 11;
inline bool ChromeTracePacket::_internal_has_track_event() const {
  return this != internal_default_instance() && track_event_ != nullptr;
}
inline bool ChromeTracePacket::has_track_event() const {
  return _internal_has_track_event();
}
inline const ::perfetto::protos::TrackEvent& ChromeTracePacket::_internal_track_event() const {
  const ::perfetto::protos::TrackEvent* p = track_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::TrackEvent&>(
      ::perfetto::protos::_TrackEvent_default_instance_);
}
inline const ::perfetto::protos::TrackEvent& ChromeTracePacket::track_event() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracePacket.track_event)
  return _internal_track_event();
}
inline void ChromeTracePacket::unsafe_arena_set_allocated_track_event(
    ::perfetto::protos::TrackEvent* track_event) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(track_event_);
  }
  track_event_ = track_event;
  if (track_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.ChromeTracePacket.track_event)
}
inline ::perfetto::protos::TrackEvent* ChromeTracePacket::release_track_event() {
  
  ::perfetto::protos::TrackEvent* temp = track_event_;
  track_event_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfetto::protos::TrackEvent* ChromeTracePacket::unsafe_arena_release_track_event() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTracePacket.track_event)
  
  ::perfetto::protos::TrackEvent* temp = track_event_;
  track_event_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TrackEvent* ChromeTracePacket::_internal_mutable_track_event() {
  
  if (track_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TrackEvent>(GetArena());
    track_event_ = p;
  }
  return track_event_;
}
inline ::perfetto::protos::TrackEvent* ChromeTracePacket::mutable_track_event() {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTracePacket.track_event)
  return _internal_mutable_track_event();
}
inline void ChromeTracePacket::set_allocated_track_event(::perfetto::protos::TrackEvent* track_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(track_event_);
  }
  if (track_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(track_event)->GetArena();
    if (message_arena != submessage_arena) {
      track_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track_event, submessage_arena);
    }
    
  } else {
    
  }
  track_event_ = track_event;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTracePacket.track_event)
}

// .perfetto.protos.ProcessDescriptor process_descriptor = 43;
inline bool ChromeTracePacket::_internal_has_process_descriptor() const {
  return this != internal_default_instance() && process_descriptor_ != nullptr;
}
inline bool ChromeTracePacket::has_process_descriptor() const {
  return _internal_has_process_descriptor();
}
inline const ::perfetto::protos::ProcessDescriptor& ChromeTracePacket::_internal_process_descriptor() const {
  const ::perfetto::protos::ProcessDescriptor* p = process_descriptor_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ProcessDescriptor&>(
      ::perfetto::protos::_ProcessDescriptor_default_instance_);
}
inline const ::perfetto::protos::ProcessDescriptor& ChromeTracePacket::process_descriptor() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracePacket.process_descriptor)
  return _internal_process_descriptor();
}
inline void ChromeTracePacket::unsafe_arena_set_allocated_process_descriptor(
    ::perfetto::protos::ProcessDescriptor* process_descriptor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(process_descriptor_);
  }
  process_descriptor_ = process_descriptor;
  if (process_descriptor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.ChromeTracePacket.process_descriptor)
}
inline ::perfetto::protos::ProcessDescriptor* ChromeTracePacket::release_process_descriptor() {
  
  ::perfetto::protos::ProcessDescriptor* temp = process_descriptor_;
  process_descriptor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfetto::protos::ProcessDescriptor* ChromeTracePacket::unsafe_arena_release_process_descriptor() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTracePacket.process_descriptor)
  
  ::perfetto::protos::ProcessDescriptor* temp = process_descriptor_;
  process_descriptor_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ProcessDescriptor* ChromeTracePacket::_internal_mutable_process_descriptor() {
  
  if (process_descriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ProcessDescriptor>(GetArena());
    process_descriptor_ = p;
  }
  return process_descriptor_;
}
inline ::perfetto::protos::ProcessDescriptor* ChromeTracePacket::mutable_process_descriptor() {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTracePacket.process_descriptor)
  return _internal_mutable_process_descriptor();
}
inline void ChromeTracePacket::set_allocated_process_descriptor(::perfetto::protos::ProcessDescriptor* process_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(process_descriptor_);
  }
  if (process_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(process_descriptor)->GetArena();
    if (message_arena != submessage_arena) {
      process_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process_descriptor, submessage_arena);
    }
    
  } else {
    
  }
  process_descriptor_ = process_descriptor;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTracePacket.process_descriptor)
}

// .perfetto.protos.ThreadDescriptor thread_descriptor = 44;
inline bool ChromeTracePacket::_internal_has_thread_descriptor() const {
  return this != internal_default_instance() && thread_descriptor_ != nullptr;
}
inline bool ChromeTracePacket::has_thread_descriptor() const {
  return _internal_has_thread_descriptor();
}
inline const ::perfetto::protos::ThreadDescriptor& ChromeTracePacket::_internal_thread_descriptor() const {
  const ::perfetto::protos::ThreadDescriptor* p = thread_descriptor_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ThreadDescriptor&>(
      ::perfetto::protos::_ThreadDescriptor_default_instance_);
}
inline const ::perfetto::protos::ThreadDescriptor& ChromeTracePacket::thread_descriptor() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracePacket.thread_descriptor)
  return _internal_thread_descriptor();
}
inline void ChromeTracePacket::unsafe_arena_set_allocated_thread_descriptor(
    ::perfetto::protos::ThreadDescriptor* thread_descriptor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thread_descriptor_);
  }
  thread_descriptor_ = thread_descriptor;
  if (thread_descriptor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.ChromeTracePacket.thread_descriptor)
}
inline ::perfetto::protos::ThreadDescriptor* ChromeTracePacket::release_thread_descriptor() {
  
  ::perfetto::protos::ThreadDescriptor* temp = thread_descriptor_;
  thread_descriptor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfetto::protos::ThreadDescriptor* ChromeTracePacket::unsafe_arena_release_thread_descriptor() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTracePacket.thread_descriptor)
  
  ::perfetto::protos::ThreadDescriptor* temp = thread_descriptor_;
  thread_descriptor_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ThreadDescriptor* ChromeTracePacket::_internal_mutable_thread_descriptor() {
  
  if (thread_descriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ThreadDescriptor>(GetArena());
    thread_descriptor_ = p;
  }
  return thread_descriptor_;
}
inline ::perfetto::protos::ThreadDescriptor* ChromeTracePacket::mutable_thread_descriptor() {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTracePacket.thread_descriptor)
  return _internal_mutable_thread_descriptor();
}
inline void ChromeTracePacket::set_allocated_thread_descriptor(::perfetto::protos::ThreadDescriptor* thread_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(thread_descriptor_);
  }
  if (thread_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thread_descriptor)->GetArena();
    if (message_arena != submessage_arena) {
      thread_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thread_descriptor, submessage_arena);
    }
    
  } else {
    
  }
  thread_descriptor_ = thread_descriptor;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTracePacket.thread_descriptor)
}

// .perfetto.protos.StreamingProfilePacket streaming_profile_packet = 54;
inline bool ChromeTracePacket::_internal_has_streaming_profile_packet() const {
  return this != internal_default_instance() && streaming_profile_packet_ != nullptr;
}
inline bool ChromeTracePacket::has_streaming_profile_packet() const {
  return _internal_has_streaming_profile_packet();
}
inline const ::perfetto::protos::StreamingProfilePacket& ChromeTracePacket::_internal_streaming_profile_packet() const {
  const ::perfetto::protos::StreamingProfilePacket* p = streaming_profile_packet_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::StreamingProfilePacket&>(
      ::perfetto::protos::_StreamingProfilePacket_default_instance_);
}
inline const ::perfetto::protos::StreamingProfilePacket& ChromeTracePacket::streaming_profile_packet() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracePacket.streaming_profile_packet)
  return _internal_streaming_profile_packet();
}
inline void ChromeTracePacket::unsafe_arena_set_allocated_streaming_profile_packet(
    ::perfetto::protos::StreamingProfilePacket* streaming_profile_packet) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(streaming_profile_packet_);
  }
  streaming_profile_packet_ = streaming_profile_packet;
  if (streaming_profile_packet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.ChromeTracePacket.streaming_profile_packet)
}
inline ::perfetto::protos::StreamingProfilePacket* ChromeTracePacket::release_streaming_profile_packet() {
  
  ::perfetto::protos::StreamingProfilePacket* temp = streaming_profile_packet_;
  streaming_profile_packet_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfetto::protos::StreamingProfilePacket* ChromeTracePacket::unsafe_arena_release_streaming_profile_packet() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTracePacket.streaming_profile_packet)
  
  ::perfetto::protos::StreamingProfilePacket* temp = streaming_profile_packet_;
  streaming_profile_packet_ = nullptr;
  return temp;
}
inline ::perfetto::protos::StreamingProfilePacket* ChromeTracePacket::_internal_mutable_streaming_profile_packet() {
  
  if (streaming_profile_packet_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::StreamingProfilePacket>(GetArena());
    streaming_profile_packet_ = p;
  }
  return streaming_profile_packet_;
}
inline ::perfetto::protos::StreamingProfilePacket* ChromeTracePacket::mutable_streaming_profile_packet() {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTracePacket.streaming_profile_packet)
  return _internal_mutable_streaming_profile_packet();
}
inline void ChromeTracePacket::set_allocated_streaming_profile_packet(::perfetto::protos::StreamingProfilePacket* streaming_profile_packet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(streaming_profile_packet_);
  }
  if (streaming_profile_packet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(streaming_profile_packet)->GetArena();
    if (message_arena != submessage_arena) {
      streaming_profile_packet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, streaming_profile_packet, submessage_arena);
    }
    
  } else {
    
  }
  streaming_profile_packet_ = streaming_profile_packet;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTracePacket.streaming_profile_packet)
}

// .perfetto.protos.ProfiledFrameSymbols profiled_frame_symbols = 55;
inline bool ChromeTracePacket::_internal_has_profiled_frame_symbols() const {
  return this != internal_default_instance() && profiled_frame_symbols_ != nullptr;
}
inline bool ChromeTracePacket::has_profiled_frame_symbols() const {
  return _internal_has_profiled_frame_symbols();
}
inline const ::perfetto::protos::ProfiledFrameSymbols& ChromeTracePacket::_internal_profiled_frame_symbols() const {
  const ::perfetto::protos::ProfiledFrameSymbols* p = profiled_frame_symbols_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::ProfiledFrameSymbols&>(
      ::perfetto::protos::_ProfiledFrameSymbols_default_instance_);
}
inline const ::perfetto::protos::ProfiledFrameSymbols& ChromeTracePacket::profiled_frame_symbols() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracePacket.profiled_frame_symbols)
  return _internal_profiled_frame_symbols();
}
inline void ChromeTracePacket::unsafe_arena_set_allocated_profiled_frame_symbols(
    ::perfetto::protos::ProfiledFrameSymbols* profiled_frame_symbols) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profiled_frame_symbols_);
  }
  profiled_frame_symbols_ = profiled_frame_symbols;
  if (profiled_frame_symbols) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.ChromeTracePacket.profiled_frame_symbols)
}
inline ::perfetto::protos::ProfiledFrameSymbols* ChromeTracePacket::release_profiled_frame_symbols() {
  
  ::perfetto::protos::ProfiledFrameSymbols* temp = profiled_frame_symbols_;
  profiled_frame_symbols_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfetto::protos::ProfiledFrameSymbols* ChromeTracePacket::unsafe_arena_release_profiled_frame_symbols() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTracePacket.profiled_frame_symbols)
  
  ::perfetto::protos::ProfiledFrameSymbols* temp = profiled_frame_symbols_;
  profiled_frame_symbols_ = nullptr;
  return temp;
}
inline ::perfetto::protos::ProfiledFrameSymbols* ChromeTracePacket::_internal_mutable_profiled_frame_symbols() {
  
  if (profiled_frame_symbols_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::ProfiledFrameSymbols>(GetArena());
    profiled_frame_symbols_ = p;
  }
  return profiled_frame_symbols_;
}
inline ::perfetto::protos::ProfiledFrameSymbols* ChromeTracePacket::mutable_profiled_frame_symbols() {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTracePacket.profiled_frame_symbols)
  return _internal_mutable_profiled_frame_symbols();
}
inline void ChromeTracePacket::set_allocated_profiled_frame_symbols(::perfetto::protos::ProfiledFrameSymbols* profiled_frame_symbols) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(profiled_frame_symbols_);
  }
  if (profiled_frame_symbols) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profiled_frame_symbols)->GetArena();
    if (message_arena != submessage_arena) {
      profiled_frame_symbols = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profiled_frame_symbols, submessage_arena);
    }
    
  } else {
    
  }
  profiled_frame_symbols_ = profiled_frame_symbols;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTracePacket.profiled_frame_symbols)
}

// .perfetto.protos.TraceConfig trace_config = 33;
inline bool ChromeTracePacket::_internal_has_trace_config() const {
  return this != internal_default_instance() && trace_config_ != nullptr;
}
inline bool ChromeTracePacket::has_trace_config() const {
  return _internal_has_trace_config();
}
inline const ::perfetto::protos::TraceConfig& ChromeTracePacket::_internal_trace_config() const {
  const ::perfetto::protos::TraceConfig* p = trace_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::TraceConfig&>(
      ::perfetto::protos::_TraceConfig_default_instance_);
}
inline const ::perfetto::protos::TraceConfig& ChromeTracePacket::trace_config() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracePacket.trace_config)
  return _internal_trace_config();
}
inline void ChromeTracePacket::unsafe_arena_set_allocated_trace_config(
    ::perfetto::protos::TraceConfig* trace_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trace_config_);
  }
  trace_config_ = trace_config;
  if (trace_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.ChromeTracePacket.trace_config)
}
inline ::perfetto::protos::TraceConfig* ChromeTracePacket::release_trace_config() {
  
  ::perfetto::protos::TraceConfig* temp = trace_config_;
  trace_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfetto::protos::TraceConfig* ChromeTracePacket::unsafe_arena_release_trace_config() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTracePacket.trace_config)
  
  ::perfetto::protos::TraceConfig* temp = trace_config_;
  trace_config_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TraceConfig* ChromeTracePacket::_internal_mutable_trace_config() {
  
  if (trace_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TraceConfig>(GetArena());
    trace_config_ = p;
  }
  return trace_config_;
}
inline ::perfetto::protos::TraceConfig* ChromeTracePacket::mutable_trace_config() {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTracePacket.trace_config)
  return _internal_mutable_trace_config();
}
inline void ChromeTracePacket::set_allocated_trace_config(::perfetto::protos::TraceConfig* trace_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trace_config_);
  }
  if (trace_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trace_config)->GetArena();
    if (message_arena != submessage_arena) {
      trace_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trace_config, submessage_arena);
    }
    
  } else {
    
  }
  trace_config_ = trace_config;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTracePacket.trace_config)
}

// .perfetto.protos.TraceStats trace_stats = 35;
inline bool ChromeTracePacket::_internal_has_trace_stats() const {
  return this != internal_default_instance() && trace_stats_ != nullptr;
}
inline bool ChromeTracePacket::has_trace_stats() const {
  return _internal_has_trace_stats();
}
inline const ::perfetto::protos::TraceStats& ChromeTracePacket::_internal_trace_stats() const {
  const ::perfetto::protos::TraceStats* p = trace_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::TraceStats&>(
      ::perfetto::protos::_TraceStats_default_instance_);
}
inline const ::perfetto::protos::TraceStats& ChromeTracePacket::trace_stats() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracePacket.trace_stats)
  return _internal_trace_stats();
}
inline void ChromeTracePacket::unsafe_arena_set_allocated_trace_stats(
    ::perfetto::protos::TraceStats* trace_stats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trace_stats_);
  }
  trace_stats_ = trace_stats;
  if (trace_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.ChromeTracePacket.trace_stats)
}
inline ::perfetto::protos::TraceStats* ChromeTracePacket::release_trace_stats() {
  
  ::perfetto::protos::TraceStats* temp = trace_stats_;
  trace_stats_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfetto::protos::TraceStats* ChromeTracePacket::unsafe_arena_release_trace_stats() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTracePacket.trace_stats)
  
  ::perfetto::protos::TraceStats* temp = trace_stats_;
  trace_stats_ = nullptr;
  return temp;
}
inline ::perfetto::protos::TraceStats* ChromeTracePacket::_internal_mutable_trace_stats() {
  
  if (trace_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::TraceStats>(GetArena());
    trace_stats_ = p;
  }
  return trace_stats_;
}
inline ::perfetto::protos::TraceStats* ChromeTracePacket::mutable_trace_stats() {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTracePacket.trace_stats)
  return _internal_mutable_trace_stats();
}
inline void ChromeTracePacket::set_allocated_trace_stats(::perfetto::protos::TraceStats* trace_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trace_stats_);
  }
  if (trace_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trace_stats)->GetArena();
    if (message_arena != submessage_arena) {
      trace_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trace_stats, submessage_arena);
    }
    
  } else {
    
  }
  trace_stats_ = trace_stats;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTracePacket.trace_stats)
}

// uint32 trusted_packet_sequence_id = 10;
inline void ChromeTracePacket::clear_trusted_packet_sequence_id() {
  trusted_packet_sequence_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChromeTracePacket::_internal_trusted_packet_sequence_id() const {
  return trusted_packet_sequence_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChromeTracePacket::trusted_packet_sequence_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracePacket.trusted_packet_sequence_id)
  return _internal_trusted_packet_sequence_id();
}
inline void ChromeTracePacket::_internal_set_trusted_packet_sequence_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  trusted_packet_sequence_id_ = value;
}
inline void ChromeTracePacket::set_trusted_packet_sequence_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_trusted_packet_sequence_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTracePacket.trusted_packet_sequence_id)
}

// .perfetto.protos.InternedData interned_data = 12;
inline bool ChromeTracePacket::_internal_has_interned_data() const {
  return this != internal_default_instance() && interned_data_ != nullptr;
}
inline bool ChromeTracePacket::has_interned_data() const {
  return _internal_has_interned_data();
}
inline const ::perfetto::protos::InternedData& ChromeTracePacket::_internal_interned_data() const {
  const ::perfetto::protos::InternedData* p = interned_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::InternedData&>(
      ::perfetto::protos::_InternedData_default_instance_);
}
inline const ::perfetto::protos::InternedData& ChromeTracePacket::interned_data() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracePacket.interned_data)
  return _internal_interned_data();
}
inline void ChromeTracePacket::unsafe_arena_set_allocated_interned_data(
    ::perfetto::protos::InternedData* interned_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interned_data_);
  }
  interned_data_ = interned_data;
  if (interned_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.ChromeTracePacket.interned_data)
}
inline ::perfetto::protos::InternedData* ChromeTracePacket::release_interned_data() {
  
  ::perfetto::protos::InternedData* temp = interned_data_;
  interned_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfetto::protos::InternedData* ChromeTracePacket::unsafe_arena_release_interned_data() {
  // @@protoc_insertion_point(field_release:perfetto.protos.ChromeTracePacket.interned_data)
  
  ::perfetto::protos::InternedData* temp = interned_data_;
  interned_data_ = nullptr;
  return temp;
}
inline ::perfetto::protos::InternedData* ChromeTracePacket::_internal_mutable_interned_data() {
  
  if (interned_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::InternedData>(GetArena());
    interned_data_ = p;
  }
  return interned_data_;
}
inline ::perfetto::protos::InternedData* ChromeTracePacket::mutable_interned_data() {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.ChromeTracePacket.interned_data)
  return _internal_mutable_interned_data();
}
inline void ChromeTracePacket::set_allocated_interned_data(::perfetto::protos::InternedData* interned_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(interned_data_);
  }
  if (interned_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interned_data)->GetArena();
    if (message_arena != submessage_arena) {
      interned_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interned_data, submessage_arena);
    }
    
  } else {
    
  }
  interned_data_ = interned_data;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.ChromeTracePacket.interned_data)
}

// bool incremental_state_cleared = 41;
inline void ChromeTracePacket::clear_incremental_state_cleared() {
  incremental_state_cleared_ = false;
}
inline bool ChromeTracePacket::_internal_incremental_state_cleared() const {
  return incremental_state_cleared_;
}
inline bool ChromeTracePacket::incremental_state_cleared() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracePacket.incremental_state_cleared)
  return _internal_incremental_state_cleared();
}
inline void ChromeTracePacket::_internal_set_incremental_state_cleared(bool value) {
  
  incremental_state_cleared_ = value;
}
inline void ChromeTracePacket::set_incremental_state_cleared(bool value) {
  _internal_set_incremental_state_cleared(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTracePacket.incremental_state_cleared)
}

// bool previous_packet_dropped = 42;
inline void ChromeTracePacket::clear_previous_packet_dropped() {
  previous_packet_dropped_ = false;
}
inline bool ChromeTracePacket::_internal_previous_packet_dropped() const {
  return previous_packet_dropped_;
}
inline bool ChromeTracePacket::previous_packet_dropped() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.ChromeTracePacket.previous_packet_dropped)
  return _internal_previous_packet_dropped();
}
inline void ChromeTracePacket::_internal_set_previous_packet_dropped(bool value) {
  
  previous_packet_dropped_ = value;
}
inline void ChromeTracePacket::set_previous_packet_dropped(bool value) {
  _internal_set_previous_packet_dropped(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.ChromeTracePacket.previous_packet_dropped)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5ftrace_5fpacket_2eproto
