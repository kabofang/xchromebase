// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/chrome/chrome_benchmark_metadata.proto

#include "protos/perfetto/trace/chrome/chrome_benchmark_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace perfetto {
namespace protos {
class ChromeBenchmarkMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChromeBenchmarkMetadata> _instance;
} _ChromeBenchmarkMetadata_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_ChromeBenchmarkMetadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fbenchmark_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_ChromeBenchmarkMetadata_default_instance_;
    new (ptr) ::perfetto::protos::ChromeBenchmarkMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeBenchmarkMetadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fbenchmark_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChromeBenchmarkMetadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fbenchmark_5fmetadata_2eproto}, {}};

namespace perfetto {
namespace protos {

// ===================================================================

class ChromeBenchmarkMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeBenchmarkMetadata>()._has_bits_);
  static void set_has_benchmark_start_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_story_run_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_benchmark_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_benchmark_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_story_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_story_run_index(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_had_failures(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

ChromeBenchmarkMetadata::ChromeBenchmarkMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  story_tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeBenchmarkMetadata)
}
ChromeBenchmarkMetadata::ChromeBenchmarkMetadata(const ChromeBenchmarkMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      story_tags_(from.story_tags_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  benchmark_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_benchmark_name()) {
    benchmark_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_benchmark_name(),
      GetArena());
  }
  benchmark_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_benchmark_description()) {
    benchmark_description_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_benchmark_description(),
      GetArena());
  }
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_label(),
      GetArena());
  }
  story_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_story_name()) {
    story_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_story_name(),
      GetArena());
  }
  ::memcpy(&benchmark_start_time_us_, &from.benchmark_start_time_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&had_failures_) -
    reinterpret_cast<char*>(&benchmark_start_time_us_)) + sizeof(had_failures_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeBenchmarkMetadata)
}

void ChromeBenchmarkMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChromeBenchmarkMetadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fbenchmark_5fmetadata_2eproto.base);
  benchmark_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  benchmark_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  story_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&benchmark_start_time_us_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&had_failures_) -
      reinterpret_cast<char*>(&benchmark_start_time_us_)) + sizeof(had_failures_));
}

ChromeBenchmarkMetadata::~ChromeBenchmarkMetadata() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeBenchmarkMetadata)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ChromeBenchmarkMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  benchmark_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  benchmark_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  story_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChromeBenchmarkMetadata::ArenaDtor(void* object) {
  ChromeBenchmarkMetadata* _this = reinterpret_cast< ChromeBenchmarkMetadata* >(object);
  (void)_this;
}
void ChromeBenchmarkMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChromeBenchmarkMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChromeBenchmarkMetadata& ChromeBenchmarkMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChromeBenchmarkMetadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fbenchmark_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void ChromeBenchmarkMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeBenchmarkMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  story_tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      benchmark_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      benchmark_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      story_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&benchmark_start_time_us_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&had_failures_) -
        reinterpret_cast<char*>(&benchmark_start_time_us_)) + sizeof(had_failures_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeBenchmarkMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 benchmark_start_time_us = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_benchmark_start_time_us(&has_bits);
          benchmark_start_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 story_run_time_us = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_story_run_time_us(&has_bits);
          story_run_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string benchmark_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_benchmark_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string benchmark_description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_benchmark_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string label = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string story_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_story_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string story_tags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_story_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 story_run_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_story_run_index(&has_bits);
          story_run_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool had_failures = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_had_failures(&has_bits);
          had_failures_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChromeBenchmarkMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeBenchmarkMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 benchmark_start_time_us = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_benchmark_start_time_us(), target);
  }

  // optional int64 story_run_time_us = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_story_run_time_us(), target);
  }

  // optional string benchmark_name = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_benchmark_name(), target);
  }

  // optional string benchmark_description = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_benchmark_description(), target);
  }

  // optional string label = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_label(), target);
  }

  // optional string story_name = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_story_name(), target);
  }

  // repeated string story_tags = 7;
  for (int i = 0, n = this->_internal_story_tags_size(); i < n; i++) {
    const auto& s = this->_internal_story_tags(i);
    target = stream->WriteString(7, s, target);
  }

  // optional int32 story_run_index = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_story_run_index(), target);
  }

  // optional bool had_failures = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_had_failures(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeBenchmarkMetadata)
  return target;
}

size_t ChromeBenchmarkMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeBenchmarkMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string story_tags = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(story_tags_.size());
  for (int i = 0, n = story_tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      story_tags_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string benchmark_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_benchmark_name());
    }

    // optional string benchmark_description = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_benchmark_description());
    }

    // optional string label = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional string story_name = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_story_name());
    }

    // optional int64 benchmark_start_time_us = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_benchmark_start_time_us());
    }

    // optional int64 story_run_time_us = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_story_run_time_us());
    }

    // optional int32 story_run_index = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_story_run_index());
    }

    // optional bool had_failures = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeBenchmarkMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChromeBenchmarkMetadata*>(
      &from));
}

void ChromeBenchmarkMetadata::MergeFrom(const ChromeBenchmarkMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeBenchmarkMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  story_tags_.MergeFrom(from.story_tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_benchmark_name(from._internal_benchmark_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_benchmark_description(from._internal_benchmark_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_story_name(from._internal_story_name());
    }
    if (cached_has_bits & 0x00000010u) {
      benchmark_start_time_us_ = from.benchmark_start_time_us_;
    }
    if (cached_has_bits & 0x00000020u) {
      story_run_time_us_ = from.story_run_time_us_;
    }
    if (cached_has_bits & 0x00000040u) {
      story_run_index_ = from.story_run_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      had_failures_ = from.had_failures_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChromeBenchmarkMetadata::CopyFrom(const ChromeBenchmarkMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeBenchmarkMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeBenchmarkMetadata::IsInitialized() const {
  return true;
}

void ChromeBenchmarkMetadata::InternalSwap(ChromeBenchmarkMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  story_tags_.InternalSwap(&other->story_tags_);
  benchmark_name_.Swap(&other->benchmark_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  benchmark_description_.Swap(&other->benchmark_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  story_name_.Swap(&other->story_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeBenchmarkMetadata, had_failures_)
      + sizeof(ChromeBenchmarkMetadata::had_failures_)
      - PROTOBUF_FIELD_OFFSET(ChromeBenchmarkMetadata, benchmark_start_time_us_)>(
          reinterpret_cast<char*>(&benchmark_start_time_us_),
          reinterpret_cast<char*>(&other->benchmark_start_time_us_));
}

std::string ChromeBenchmarkMetadata::GetTypeName() const {
  return "perfetto.protos.ChromeBenchmarkMetadata";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeBenchmarkMetadata* Arena::CreateMaybeMessage< ::perfetto::protos::ChromeBenchmarkMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeBenchmarkMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
