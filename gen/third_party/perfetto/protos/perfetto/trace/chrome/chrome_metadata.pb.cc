// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/chrome/chrome_metadata.proto

#include "protos/perfetto/trace/chrome/chrome_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BackgroundTracingMetadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BackgroundTracingMetadata_TriggerRule_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BackgroundTracingMetadata_TriggerRule_HistogramRule_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BackgroundTracingMetadata_TriggerRule_NamedRule_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto;
namespace perfetto {
namespace protos {
class ChromeMetadataPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChromeMetadataPacket> _instance;
} _ChromeMetadataPacket_default_instance_;
class BackgroundTracingMetadata_TriggerRule_HistogramRuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BackgroundTracingMetadata_TriggerRule_HistogramRule> _instance;
} _BackgroundTracingMetadata_TriggerRule_HistogramRule_default_instance_;
class BackgroundTracingMetadata_TriggerRule_NamedRuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BackgroundTracingMetadata_TriggerRule_NamedRule> _instance;
} _BackgroundTracingMetadata_TriggerRule_NamedRule_default_instance_;
class BackgroundTracingMetadata_TriggerRuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BackgroundTracingMetadata_TriggerRule> _instance;
} _BackgroundTracingMetadata_TriggerRule_default_instance_;
class BackgroundTracingMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BackgroundTracingMetadata> _instance;
} _BackgroundTracingMetadata_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_BackgroundTracingMetadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_BackgroundTracingMetadata_default_instance_;
    new (ptr) ::perfetto::protos::BackgroundTracingMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BackgroundTracingMetadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BackgroundTracingMetadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto}, {
      &scc_info_BackgroundTracingMetadata_TriggerRule_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto.base,}};

static void InitDefaultsscc_info_BackgroundTracingMetadata_TriggerRule_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_BackgroundTracingMetadata_TriggerRule_default_instance_;
    new (ptr) ::perfetto::protos::BackgroundTracingMetadata_TriggerRule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BackgroundTracingMetadata_TriggerRule_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BackgroundTracingMetadata_TriggerRule_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto}, {
      &scc_info_BackgroundTracingMetadata_TriggerRule_HistogramRule_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto.base,
      &scc_info_BackgroundTracingMetadata_TriggerRule_NamedRule_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto.base,}};

static void InitDefaultsscc_info_BackgroundTracingMetadata_TriggerRule_HistogramRule_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_BackgroundTracingMetadata_TriggerRule_HistogramRule_default_instance_;
    new (ptr) ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BackgroundTracingMetadata_TriggerRule_HistogramRule_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BackgroundTracingMetadata_TriggerRule_HistogramRule_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto}, {}};

static void InitDefaultsscc_info_BackgroundTracingMetadata_TriggerRule_NamedRule_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_BackgroundTracingMetadata_TriggerRule_NamedRule_default_instance_;
    new (ptr) ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BackgroundTracingMetadata_TriggerRule_NamedRule_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BackgroundTracingMetadata_TriggerRule_NamedRule_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto}, {}};

static void InitDefaultsscc_info_ChromeMetadataPacket_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_ChromeMetadataPacket_default_instance_;
    new (ptr) ::perfetto::protos::ChromeMetadataPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChromeMetadataPacket_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChromeMetadataPacket_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto}, {
      &scc_info_BackgroundTracingMetadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto.base,}};

namespace perfetto {
namespace protos {
bool BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 1000:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_strings[7] = {};

static const char BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_names[] =
  "CONTENT_TRIGGER"
  "NAVIGATION"
  "REACHED_CODE"
  "SESSION_RESTORE"
  "STARTUP"
  "TEST_RULE"
  "UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_entries[] = {
  { {BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_names + 0, 15}, 5 },
  { {BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_names + 15, 10}, 2 },
  { {BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_names + 25, 12}, 4 },
  { {BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_names + 37, 15}, 1 },
  { {BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_names + 52, 7}, 3 },
  { {BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_names + 59, 9}, 1000 },
  { {BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_names + 68, 11}, 0 },
};

static const int BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_entries_by_number[] = {
  6, // 0 -> UNSPECIFIED
  3, // 1 -> SESSION_RESTORE
  1, // 2 -> NAVIGATION
  4, // 3 -> STARTUP
  2, // 4 -> REACHED_CODE
  0, // 5 -> CONTENT_TRIGGER
  5, // 1000 -> TEST_RULE
};

const std::string& BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_Name(
    BackgroundTracingMetadata_TriggerRule_NamedRule_EventType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_entries,
          BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_entries_by_number,
          7, BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_entries,
      BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_strings[idx].get();
}
bool BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BackgroundTracingMetadata_TriggerRule_NamedRule_EventType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<BackgroundTracingMetadata_TriggerRule_NamedRule_EventType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::UNSPECIFIED;
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::SESSION_RESTORE;
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::NAVIGATION;
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::STARTUP;
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::REACHED_CODE;
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::CONTENT_TRIGGER;
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::TEST_RULE;
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::EventType_MIN;
constexpr BackgroundTracingMetadata_TriggerRule_NamedRule_EventType BackgroundTracingMetadata_TriggerRule_NamedRule::EventType_MAX;
constexpr int BackgroundTracingMetadata_TriggerRule_NamedRule::EventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool BackgroundTracingMetadata_TriggerRule_TriggerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BackgroundTracingMetadata_TriggerRule_TriggerType_strings[3] = {};

static const char BackgroundTracingMetadata_TriggerRule_TriggerType_names[] =
  "MONITOR_AND_DUMP_WHEN_SPECIFIC_HISTOGRAM_AND_VALUE"
  "MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED"
  "TRIGGER_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BackgroundTracingMetadata_TriggerRule_TriggerType_entries[] = {
  { {BackgroundTracingMetadata_TriggerRule_TriggerType_names + 0, 50}, 1 },
  { {BackgroundTracingMetadata_TriggerRule_TriggerType_names + 50, 35}, 2 },
  { {BackgroundTracingMetadata_TriggerRule_TriggerType_names + 85, 19}, 0 },
};

static const int BackgroundTracingMetadata_TriggerRule_TriggerType_entries_by_number[] = {
  2, // 0 -> TRIGGER_UNSPECIFIED
  0, // 1 -> MONITOR_AND_DUMP_WHEN_SPECIFIC_HISTOGRAM_AND_VALUE
  1, // 2 -> MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED
};

const std::string& BackgroundTracingMetadata_TriggerRule_TriggerType_Name(
    BackgroundTracingMetadata_TriggerRule_TriggerType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BackgroundTracingMetadata_TriggerRule_TriggerType_entries,
          BackgroundTracingMetadata_TriggerRule_TriggerType_entries_by_number,
          3, BackgroundTracingMetadata_TriggerRule_TriggerType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BackgroundTracingMetadata_TriggerRule_TriggerType_entries,
      BackgroundTracingMetadata_TriggerRule_TriggerType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BackgroundTracingMetadata_TriggerRule_TriggerType_strings[idx].get();
}
bool BackgroundTracingMetadata_TriggerRule_TriggerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BackgroundTracingMetadata_TriggerRule_TriggerType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BackgroundTracingMetadata_TriggerRule_TriggerType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<BackgroundTracingMetadata_TriggerRule_TriggerType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BackgroundTracingMetadata_TriggerRule_TriggerType BackgroundTracingMetadata_TriggerRule::TRIGGER_UNSPECIFIED;
constexpr BackgroundTracingMetadata_TriggerRule_TriggerType BackgroundTracingMetadata_TriggerRule::MONITOR_AND_DUMP_WHEN_SPECIFIC_HISTOGRAM_AND_VALUE;
constexpr BackgroundTracingMetadata_TriggerRule_TriggerType BackgroundTracingMetadata_TriggerRule::MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED;
constexpr BackgroundTracingMetadata_TriggerRule_TriggerType BackgroundTracingMetadata_TriggerRule::TriggerType_MIN;
constexpr BackgroundTracingMetadata_TriggerRule_TriggerType BackgroundTracingMetadata_TriggerRule::TriggerType_MAX;
constexpr int BackgroundTracingMetadata_TriggerRule::TriggerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ChromeMetadataPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeMetadataPacket>()._has_bits_);
  static const ::perfetto::protos::BackgroundTracingMetadata& background_tracing_metadata(const ChromeMetadataPacket* msg);
  static void set_has_background_tracing_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chrome_version_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enabled_categories(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::BackgroundTracingMetadata&
ChromeMetadataPacket::_Internal::background_tracing_metadata(const ChromeMetadataPacket* msg) {
  return *msg->background_tracing_metadata_;
}
ChromeMetadataPacket::ChromeMetadataPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeMetadataPacket)
}
ChromeMetadataPacket::ChromeMetadataPacket(const ChromeMetadataPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  enabled_categories_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enabled_categories()) {
    enabled_categories_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enabled_categories(),
      GetArena());
  }
  if (from._internal_has_background_tracing_metadata()) {
    background_tracing_metadata_ = new ::perfetto::protos::BackgroundTracingMetadata(*from.background_tracing_metadata_);
  } else {
    background_tracing_metadata_ = nullptr;
  }
  chrome_version_code_ = from.chrome_version_code_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeMetadataPacket)
}

void ChromeMetadataPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChromeMetadataPacket_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto.base);
  enabled_categories_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&background_tracing_metadata_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&chrome_version_code_) -
      reinterpret_cast<char*>(&background_tracing_metadata_)) + sizeof(chrome_version_code_));
}

ChromeMetadataPacket::~ChromeMetadataPacket() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeMetadataPacket)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ChromeMetadataPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enabled_categories_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete background_tracing_metadata_;
}

void ChromeMetadataPacket::ArenaDtor(void* object) {
  ChromeMetadataPacket* _this = reinterpret_cast< ChromeMetadataPacket* >(object);
  (void)_this;
}
void ChromeMetadataPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChromeMetadataPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChromeMetadataPacket& ChromeMetadataPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChromeMetadataPacket_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void ChromeMetadataPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeMetadataPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      enabled_categories_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(background_tracing_metadata_ != nullptr);
      background_tracing_metadata_->Clear();
    }
  }
  chrome_version_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeMetadataPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.BackgroundTracingMetadata background_tracing_metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_background_tracing_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 chrome_version_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_chrome_version_code(&has_bits);
          chrome_version_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string enabled_categories = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_enabled_categories();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChromeMetadataPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeMetadataPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.BackgroundTracingMetadata background_tracing_metadata = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::background_tracing_metadata(this), target, stream);
  }

  // optional int32 chrome_version_code = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chrome_version_code(), target);
  }

  // optional string enabled_categories = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_enabled_categories(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeMetadataPacket)
  return target;
}

size_t ChromeMetadataPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeMetadataPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string enabled_categories = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_enabled_categories());
    }

    // optional .perfetto.protos.BackgroundTracingMetadata background_tracing_metadata = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *background_tracing_metadata_);
    }

    // optional int32 chrome_version_code = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_chrome_version_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeMetadataPacket::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChromeMetadataPacket*>(
      &from));
}

void ChromeMetadataPacket::MergeFrom(const ChromeMetadataPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeMetadataPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_enabled_categories(from._internal_enabled_categories());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_background_tracing_metadata()->::perfetto::protos::BackgroundTracingMetadata::MergeFrom(from._internal_background_tracing_metadata());
    }
    if (cached_has_bits & 0x00000004u) {
      chrome_version_code_ = from.chrome_version_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChromeMetadataPacket::CopyFrom(const ChromeMetadataPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeMetadataPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeMetadataPacket::IsInitialized() const {
  return true;
}

void ChromeMetadataPacket::InternalSwap(ChromeMetadataPacket* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enabled_categories_.Swap(&other->enabled_categories_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeMetadataPacket, chrome_version_code_)
      + sizeof(ChromeMetadataPacket::chrome_version_code_)
      - PROTOBUF_FIELD_OFFSET(ChromeMetadataPacket, background_tracing_metadata_)>(
          reinterpret_cast<char*>(&background_tracing_metadata_),
          reinterpret_cast<char*>(&other->background_tracing_metadata_));
}

std::string ChromeMetadataPacket::GetTypeName() const {
  return "perfetto.protos.ChromeMetadataPacket";
}


// ===================================================================

class BackgroundTracingMetadata_TriggerRule_HistogramRule::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundTracingMetadata_TriggerRule_HistogramRule>()._has_bits_);
  static void set_has_histogram_name_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_histogram_min_trigger(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_histogram_max_trigger(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BackgroundTracingMetadata_TriggerRule_HistogramRule::BackgroundTracingMetadata_TriggerRule_HistogramRule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
}
BackgroundTracingMetadata_TriggerRule_HistogramRule::BackgroundTracingMetadata_TriggerRule_HistogramRule(const BackgroundTracingMetadata_TriggerRule_HistogramRule& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&histogram_name_hash_, &from.histogram_name_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&histogram_max_trigger_) -
    reinterpret_cast<char*>(&histogram_name_hash_)) + sizeof(histogram_max_trigger_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
}

void BackgroundTracingMetadata_TriggerRule_HistogramRule::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&histogram_name_hash_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&histogram_max_trigger_) -
      reinterpret_cast<char*>(&histogram_name_hash_)) + sizeof(histogram_max_trigger_));
}

BackgroundTracingMetadata_TriggerRule_HistogramRule::~BackgroundTracingMetadata_TriggerRule_HistogramRule() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void BackgroundTracingMetadata_TriggerRule_HistogramRule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BackgroundTracingMetadata_TriggerRule_HistogramRule::ArenaDtor(void* object) {
  BackgroundTracingMetadata_TriggerRule_HistogramRule* _this = reinterpret_cast< BackgroundTracingMetadata_TriggerRule_HistogramRule* >(object);
  (void)_this;
}
void BackgroundTracingMetadata_TriggerRule_HistogramRule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BackgroundTracingMetadata_TriggerRule_HistogramRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BackgroundTracingMetadata_TriggerRule_HistogramRule& BackgroundTracingMetadata_TriggerRule_HistogramRule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BackgroundTracingMetadata_TriggerRule_HistogramRule_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void BackgroundTracingMetadata_TriggerRule_HistogramRule::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&histogram_name_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&histogram_max_trigger_) -
        reinterpret_cast<char*>(&histogram_name_hash_)) + sizeof(histogram_max_trigger_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BackgroundTracingMetadata_TriggerRule_HistogramRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 histogram_name_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_histogram_name_hash(&has_bits);
          histogram_name_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int64 histogram_min_trigger = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_histogram_min_trigger(&has_bits);
          histogram_min_trigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 histogram_max_trigger = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_histogram_max_trigger(&has_bits);
          histogram_max_trigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BackgroundTracingMetadata_TriggerRule_HistogramRule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 histogram_name_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_histogram_name_hash(), target);
  }

  // optional int64 histogram_min_trigger = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_histogram_min_trigger(), target);
  }

  // optional int64 histogram_max_trigger = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_histogram_max_trigger(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
  return target;
}

size_t BackgroundTracingMetadata_TriggerRule_HistogramRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 histogram_name_hash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int64 histogram_min_trigger = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_histogram_min_trigger());
    }

    // optional int64 histogram_max_trigger = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_histogram_max_trigger());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundTracingMetadata_TriggerRule_HistogramRule::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BackgroundTracingMetadata_TriggerRule_HistogramRule*>(
      &from));
}

void BackgroundTracingMetadata_TriggerRule_HistogramRule::MergeFrom(const BackgroundTracingMetadata_TriggerRule_HistogramRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      histogram_name_hash_ = from.histogram_name_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      histogram_min_trigger_ = from.histogram_min_trigger_;
    }
    if (cached_has_bits & 0x00000004u) {
      histogram_max_trigger_ = from.histogram_max_trigger_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BackgroundTracingMetadata_TriggerRule_HistogramRule::CopyFrom(const BackgroundTracingMetadata_TriggerRule_HistogramRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundTracingMetadata_TriggerRule_HistogramRule::IsInitialized() const {
  return true;
}

void BackgroundTracingMetadata_TriggerRule_HistogramRule::InternalSwap(BackgroundTracingMetadata_TriggerRule_HistogramRule* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BackgroundTracingMetadata_TriggerRule_HistogramRule, histogram_max_trigger_)
      + sizeof(BackgroundTracingMetadata_TriggerRule_HistogramRule::histogram_max_trigger_)
      - PROTOBUF_FIELD_OFFSET(BackgroundTracingMetadata_TriggerRule_HistogramRule, histogram_name_hash_)>(
          reinterpret_cast<char*>(&histogram_name_hash_),
          reinterpret_cast<char*>(&other->histogram_name_hash_));
}

std::string BackgroundTracingMetadata_TriggerRule_HistogramRule::GetTypeName() const {
  return "perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule";
}


// ===================================================================

class BackgroundTracingMetadata_TriggerRule_NamedRule::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundTracingMetadata_TriggerRule_NamedRule>()._has_bits_);
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_content_trigger_name_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BackgroundTracingMetadata_TriggerRule_NamedRule::BackgroundTracingMetadata_TriggerRule_NamedRule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
}
BackgroundTracingMetadata_TriggerRule_NamedRule::BackgroundTracingMetadata_TriggerRule_NamedRule(const BackgroundTracingMetadata_TriggerRule_NamedRule& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&content_trigger_name_hash_, &from.content_trigger_name_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_type_) -
    reinterpret_cast<char*>(&content_trigger_name_hash_)) + sizeof(event_type_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
}

void BackgroundTracingMetadata_TriggerRule_NamedRule::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&content_trigger_name_hash_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&event_type_) -
      reinterpret_cast<char*>(&content_trigger_name_hash_)) + sizeof(event_type_));
}

BackgroundTracingMetadata_TriggerRule_NamedRule::~BackgroundTracingMetadata_TriggerRule_NamedRule() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void BackgroundTracingMetadata_TriggerRule_NamedRule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BackgroundTracingMetadata_TriggerRule_NamedRule::ArenaDtor(void* object) {
  BackgroundTracingMetadata_TriggerRule_NamedRule* _this = reinterpret_cast< BackgroundTracingMetadata_TriggerRule_NamedRule* >(object);
  (void)_this;
}
void BackgroundTracingMetadata_TriggerRule_NamedRule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BackgroundTracingMetadata_TriggerRule_NamedRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BackgroundTracingMetadata_TriggerRule_NamedRule& BackgroundTracingMetadata_TriggerRule_NamedRule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BackgroundTracingMetadata_TriggerRule_NamedRule_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void BackgroundTracingMetadata_TriggerRule_NamedRule::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&content_trigger_name_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_type_) -
        reinterpret_cast<char*>(&content_trigger_name_hash_)) + sizeof(event_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BackgroundTracingMetadata_TriggerRule_NamedRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType event_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_IsValid(val))) {
            _internal_set_event_type(static_cast<::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule_EventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional fixed64 content_trigger_name_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_content_trigger_name_hash(&has_bits);
          content_trigger_name_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BackgroundTracingMetadata_TriggerRule_NamedRule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType event_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_type(), target);
  }

  // optional fixed64 content_trigger_name_hash = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_content_trigger_name_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
  return target;
}

size_t BackgroundTracingMetadata_TriggerRule_NamedRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 content_trigger_name_hash = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType event_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundTracingMetadata_TriggerRule_NamedRule::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BackgroundTracingMetadata_TriggerRule_NamedRule*>(
      &from));
}

void BackgroundTracingMetadata_TriggerRule_NamedRule::MergeFrom(const BackgroundTracingMetadata_TriggerRule_NamedRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      content_trigger_name_hash_ = from.content_trigger_name_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_type_ = from.event_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BackgroundTracingMetadata_TriggerRule_NamedRule::CopyFrom(const BackgroundTracingMetadata_TriggerRule_NamedRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundTracingMetadata_TriggerRule_NamedRule::IsInitialized() const {
  return true;
}

void BackgroundTracingMetadata_TriggerRule_NamedRule::InternalSwap(BackgroundTracingMetadata_TriggerRule_NamedRule* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BackgroundTracingMetadata_TriggerRule_NamedRule, event_type_)
      + sizeof(BackgroundTracingMetadata_TriggerRule_NamedRule::event_type_)
      - PROTOBUF_FIELD_OFFSET(BackgroundTracingMetadata_TriggerRule_NamedRule, content_trigger_name_hash_)>(
          reinterpret_cast<char*>(&content_trigger_name_hash_),
          reinterpret_cast<char*>(&other->content_trigger_name_hash_));
}

std::string BackgroundTracingMetadata_TriggerRule_NamedRule::GetTypeName() const {
  return "perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule";
}


// ===================================================================

class BackgroundTracingMetadata_TriggerRule::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundTracingMetadata_TriggerRule>()._has_bits_);
  static void set_has_trigger_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule& histogram_rule(const BackgroundTracingMetadata_TriggerRule* msg);
  static void set_has_histogram_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule& named_rule(const BackgroundTracingMetadata_TriggerRule* msg);
  static void set_has_named_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule&
BackgroundTracingMetadata_TriggerRule::_Internal::histogram_rule(const BackgroundTracingMetadata_TriggerRule* msg) {
  return *msg->histogram_rule_;
}
const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule&
BackgroundTracingMetadata_TriggerRule::_Internal::named_rule(const BackgroundTracingMetadata_TriggerRule* msg) {
  return *msg->named_rule_;
}
BackgroundTracingMetadata_TriggerRule::BackgroundTracingMetadata_TriggerRule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
}
BackgroundTracingMetadata_TriggerRule::BackgroundTracingMetadata_TriggerRule(const BackgroundTracingMetadata_TriggerRule& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_histogram_rule()) {
    histogram_rule_ = new ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule(*from.histogram_rule_);
  } else {
    histogram_rule_ = nullptr;
  }
  if (from._internal_has_named_rule()) {
    named_rule_ = new ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule(*from.named_rule_);
  } else {
    named_rule_ = nullptr;
  }
  trigger_type_ = from.trigger_type_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
}

void BackgroundTracingMetadata_TriggerRule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BackgroundTracingMetadata_TriggerRule_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&histogram_rule_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&trigger_type_) -
      reinterpret_cast<char*>(&histogram_rule_)) + sizeof(trigger_type_));
}

BackgroundTracingMetadata_TriggerRule::~BackgroundTracingMetadata_TriggerRule() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void BackgroundTracingMetadata_TriggerRule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete histogram_rule_;
  if (this != internal_default_instance()) delete named_rule_;
}

void BackgroundTracingMetadata_TriggerRule::ArenaDtor(void* object) {
  BackgroundTracingMetadata_TriggerRule* _this = reinterpret_cast< BackgroundTracingMetadata_TriggerRule* >(object);
  (void)_this;
}
void BackgroundTracingMetadata_TriggerRule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BackgroundTracingMetadata_TriggerRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BackgroundTracingMetadata_TriggerRule& BackgroundTracingMetadata_TriggerRule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BackgroundTracingMetadata_TriggerRule_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void BackgroundTracingMetadata_TriggerRule::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(histogram_rule_ != nullptr);
      histogram_rule_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(named_rule_ != nullptr);
      named_rule_->Clear();
    }
  }
  trigger_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BackgroundTracingMetadata_TriggerRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.TriggerType trigger_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::BackgroundTracingMetadata_TriggerRule_TriggerType_IsValid(val))) {
            _internal_set_trigger_type(static_cast<::perfetto::protos::BackgroundTracingMetadata_TriggerRule_TriggerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule histogram_rule = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_histogram_rule(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule named_rule = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_named_rule(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BackgroundTracingMetadata_TriggerRule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.TriggerType trigger_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_trigger_type(), target);
  }

  // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule histogram_rule = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::histogram_rule(this), target, stream);
  }

  // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule named_rule = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::named_rule(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
  return target;
}

size_t BackgroundTracingMetadata_TriggerRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule histogram_rule = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *histogram_rule_);
    }

    // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule named_rule = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *named_rule_);
    }

    // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule.TriggerType trigger_type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trigger_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundTracingMetadata_TriggerRule::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BackgroundTracingMetadata_TriggerRule*>(
      &from));
}

void BackgroundTracingMetadata_TriggerRule::MergeFrom(const BackgroundTracingMetadata_TriggerRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_histogram_rule()->::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule::MergeFrom(from._internal_histogram_rule());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_named_rule()->::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule::MergeFrom(from._internal_named_rule());
    }
    if (cached_has_bits & 0x00000004u) {
      trigger_type_ = from.trigger_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BackgroundTracingMetadata_TriggerRule::CopyFrom(const BackgroundTracingMetadata_TriggerRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BackgroundTracingMetadata.TriggerRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundTracingMetadata_TriggerRule::IsInitialized() const {
  return true;
}

void BackgroundTracingMetadata_TriggerRule::InternalSwap(BackgroundTracingMetadata_TriggerRule* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BackgroundTracingMetadata_TriggerRule, trigger_type_)
      + sizeof(BackgroundTracingMetadata_TriggerRule::trigger_type_)
      - PROTOBUF_FIELD_OFFSET(BackgroundTracingMetadata_TriggerRule, histogram_rule_)>(
          reinterpret_cast<char*>(&histogram_rule_),
          reinterpret_cast<char*>(&other->histogram_rule_));
}

std::string BackgroundTracingMetadata_TriggerRule::GetTypeName() const {
  return "perfetto.protos.BackgroundTracingMetadata.TriggerRule";
}


// ===================================================================

class BackgroundTracingMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundTracingMetadata>()._has_bits_);
  static const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule& triggered_rule(const BackgroundTracingMetadata* msg);
  static void set_has_triggered_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::perfetto::protos::BackgroundTracingMetadata_TriggerRule&
BackgroundTracingMetadata::_Internal::triggered_rule(const BackgroundTracingMetadata* msg) {
  return *msg->triggered_rule_;
}
BackgroundTracingMetadata::BackgroundTracingMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  active_rules_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.BackgroundTracingMetadata)
}
BackgroundTracingMetadata::BackgroundTracingMetadata(const BackgroundTracingMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      active_rules_(from.active_rules_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_triggered_rule()) {
    triggered_rule_ = new ::perfetto::protos::BackgroundTracingMetadata_TriggerRule(*from.triggered_rule_);
  } else {
    triggered_rule_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.BackgroundTracingMetadata)
}

void BackgroundTracingMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BackgroundTracingMetadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto.base);
  triggered_rule_ = nullptr;
}

BackgroundTracingMetadata::~BackgroundTracingMetadata() {
  // @@protoc_insertion_point(destructor:perfetto.protos.BackgroundTracingMetadata)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void BackgroundTracingMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete triggered_rule_;
}

void BackgroundTracingMetadata::ArenaDtor(void* object) {
  BackgroundTracingMetadata* _this = reinterpret_cast< BackgroundTracingMetadata* >(object);
  (void)_this;
}
void BackgroundTracingMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BackgroundTracingMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BackgroundTracingMetadata& BackgroundTracingMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BackgroundTracingMetadata_protos_2fperfetto_2ftrace_2fchrome_2fchrome_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void BackgroundTracingMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.BackgroundTracingMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  active_rules_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(triggered_rule_ != nullptr);
    triggered_rule_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BackgroundTracingMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule triggered_rule = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_triggered_rule(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_active_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BackgroundTracingMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.BackgroundTracingMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule triggered_rule = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::triggered_rule(this), target, stream);
  }

  // repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_active_rules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_active_rules(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.BackgroundTracingMetadata)
  return target;
}

size_t BackgroundTracingMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.BackgroundTracingMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfetto.protos.BackgroundTracingMetadata.TriggerRule active_rules = 2;
  total_size += 1UL * this->_internal_active_rules_size();
  for (const auto& msg : this->active_rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .perfetto.protos.BackgroundTracingMetadata.TriggerRule triggered_rule = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *triggered_rule_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundTracingMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BackgroundTracingMetadata*>(
      &from));
}

void BackgroundTracingMetadata::MergeFrom(const BackgroundTracingMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.BackgroundTracingMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  active_rules_.MergeFrom(from.active_rules_);
  if (from._internal_has_triggered_rule()) {
    _internal_mutable_triggered_rule()->::perfetto::protos::BackgroundTracingMetadata_TriggerRule::MergeFrom(from._internal_triggered_rule());
  }
}

void BackgroundTracingMetadata::CopyFrom(const BackgroundTracingMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.BackgroundTracingMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundTracingMetadata::IsInitialized() const {
  return true;
}

void BackgroundTracingMetadata::InternalSwap(BackgroundTracingMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  active_rules_.InternalSwap(&other->active_rules_);
  swap(triggered_rule_, other->triggered_rule_);
}

std::string BackgroundTracingMetadata::GetTypeName() const {
  return "perfetto.protos.BackgroundTracingMetadata";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeMetadataPacket* Arena::CreateMaybeMessage< ::perfetto::protos::ChromeMetadataPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeMetadataPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule* Arena::CreateMaybeMessage< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_HistogramRule >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule* Arena::CreateMaybeMessage< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule_NamedRule >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BackgroundTracingMetadata_TriggerRule* Arena::CreateMaybeMessage< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BackgroundTracingMetadata_TriggerRule >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::BackgroundTracingMetadata* Arena::CreateMaybeMessage< ::perfetto::protos::BackgroundTracingMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::BackgroundTracingMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
