// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/gpu/gpu_counter_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5fcounter_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5fcounter_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "protos/perfetto/common/gpu_counter_descriptor.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5fcounter_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5fcounter_5fevent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class GpuCounterEvent;
class GpuCounterEventDefaultTypeInternal;
extern GpuCounterEventDefaultTypeInternal _GpuCounterEvent_default_instance_;
class GpuCounterEvent_GpuCounter;
class GpuCounterEvent_GpuCounterDefaultTypeInternal;
extern GpuCounterEvent_GpuCounterDefaultTypeInternal _GpuCounterEvent_GpuCounter_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::GpuCounterEvent* Arena::CreateMaybeMessage<::perfetto::protos::GpuCounterEvent>(Arena*);
template<> ::perfetto::protos::GpuCounterEvent_GpuCounter* Arena::CreateMaybeMessage<::perfetto::protos::GpuCounterEvent_GpuCounter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class GpuCounterEvent_GpuCounter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.GpuCounterEvent.GpuCounter) */ {
 public:
  inline GpuCounterEvent_GpuCounter() : GpuCounterEvent_GpuCounter(nullptr) {}
  virtual ~GpuCounterEvent_GpuCounter();

  GpuCounterEvent_GpuCounter(const GpuCounterEvent_GpuCounter& from);
  GpuCounterEvent_GpuCounter(GpuCounterEvent_GpuCounter&& from) noexcept
    : GpuCounterEvent_GpuCounter() {
    *this = ::std::move(from);
  }

  inline GpuCounterEvent_GpuCounter& operator=(const GpuCounterEvent_GpuCounter& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpuCounterEvent_GpuCounter& operator=(GpuCounterEvent_GpuCounter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GpuCounterEvent_GpuCounter& default_instance();

  enum ValueCase {
    kIntValue = 2,
    kDoubleValue = 3,
    VALUE_NOT_SET = 0,
  };

  static inline const GpuCounterEvent_GpuCounter* internal_default_instance() {
    return reinterpret_cast<const GpuCounterEvent_GpuCounter*>(
               &_GpuCounterEvent_GpuCounter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GpuCounterEvent_GpuCounter& a, GpuCounterEvent_GpuCounter& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(GpuCounterEvent_GpuCounter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpuCounterEvent_GpuCounter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GpuCounterEvent_GpuCounter* New() const final {
    return CreateMaybeMessage<GpuCounterEvent_GpuCounter>(nullptr);
  }

  GpuCounterEvent_GpuCounter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GpuCounterEvent_GpuCounter>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GpuCounterEvent_GpuCounter& from);
  void MergeFrom(const GpuCounterEvent_GpuCounter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GpuCounterEvent_GpuCounter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.GpuCounterEvent.GpuCounter";
  }
  protected:
  explicit GpuCounterEvent_GpuCounter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCounterIdFieldNumber = 1,
    kIntValueFieldNumber = 2,
    kDoubleValueFieldNumber = 3,
  };
  // optional uint32 counter_id = 1;
  bool has_counter_id() const;
  private:
  bool _internal_has_counter_id() const;
  public:
  void clear_counter_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 counter_id() const;
  void set_counter_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_counter_id() const;
  void _internal_set_counter_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 int_value = 2;
  bool has_int_value() const;
  private:
  bool _internal_has_int_value() const;
  public:
  void clear_int_value();
  ::PROTOBUF_NAMESPACE_ID::int64 int_value() const;
  void set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int_value() const;
  void _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double double_value = 3;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:perfetto.protos.GpuCounterEvent.GpuCounter)
 private:
  class _Internal;
  void set_has_int_value();
  void set_has_double_value();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 counter_id_;
  union ValueUnion {
    ValueUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 int_value_;
    double double_value_;
  } value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5fcounter_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GpuCounterEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.GpuCounterEvent) */ {
 public:
  inline GpuCounterEvent() : GpuCounterEvent(nullptr) {}
  virtual ~GpuCounterEvent();

  GpuCounterEvent(const GpuCounterEvent& from);
  GpuCounterEvent(GpuCounterEvent&& from) noexcept
    : GpuCounterEvent() {
    *this = ::std::move(from);
  }

  inline GpuCounterEvent& operator=(const GpuCounterEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpuCounterEvent& operator=(GpuCounterEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GpuCounterEvent& default_instance();

  static inline const GpuCounterEvent* internal_default_instance() {
    return reinterpret_cast<const GpuCounterEvent*>(
               &_GpuCounterEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GpuCounterEvent& a, GpuCounterEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(GpuCounterEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpuCounterEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GpuCounterEvent* New() const final {
    return CreateMaybeMessage<GpuCounterEvent>(nullptr);
  }

  GpuCounterEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GpuCounterEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GpuCounterEvent& from);
  void MergeFrom(const GpuCounterEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GpuCounterEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.GpuCounterEvent";
  }
  protected:
  explicit GpuCounterEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GpuCounterEvent_GpuCounter GpuCounter;

  // accessors -------------------------------------------------------

  enum : int {
    kCountersFieldNumber = 2,
    kCounterDescriptorFieldNumber = 1,
    kGpuIdFieldNumber = 3,
  };
  // repeated .perfetto.protos.GpuCounterEvent.GpuCounter counters = 2;
  int counters_size() const;
  private:
  int _internal_counters_size() const;
  public:
  void clear_counters();
  ::perfetto::protos::GpuCounterEvent_GpuCounter* mutable_counters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterEvent_GpuCounter >*
      mutable_counters();
  private:
  const ::perfetto::protos::GpuCounterEvent_GpuCounter& _internal_counters(int index) const;
  ::perfetto::protos::GpuCounterEvent_GpuCounter* _internal_add_counters();
  public:
  const ::perfetto::protos::GpuCounterEvent_GpuCounter& counters(int index) const;
  ::perfetto::protos::GpuCounterEvent_GpuCounter* add_counters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterEvent_GpuCounter >&
      counters() const;

  // optional .perfetto.protos.GpuCounterDescriptor counter_descriptor = 1;
  bool has_counter_descriptor() const;
  private:
  bool _internal_has_counter_descriptor() const;
  public:
  void clear_counter_descriptor();
  const ::perfetto::protos::GpuCounterDescriptor& counter_descriptor() const;
  ::perfetto::protos::GpuCounterDescriptor* release_counter_descriptor();
  ::perfetto::protos::GpuCounterDescriptor* mutable_counter_descriptor();
  void set_allocated_counter_descriptor(::perfetto::protos::GpuCounterDescriptor* counter_descriptor);
  private:
  const ::perfetto::protos::GpuCounterDescriptor& _internal_counter_descriptor() const;
  ::perfetto::protos::GpuCounterDescriptor* _internal_mutable_counter_descriptor();
  public:
  void unsafe_arena_set_allocated_counter_descriptor(
      ::perfetto::protos::GpuCounterDescriptor* counter_descriptor);
  ::perfetto::protos::GpuCounterDescriptor* unsafe_arena_release_counter_descriptor();

  // optional int32 gpu_id = 3;
  bool has_gpu_id() const;
  private:
  bool _internal_has_gpu_id() const;
  public:
  void clear_gpu_id();
  ::PROTOBUF_NAMESPACE_ID::int32 gpu_id() const;
  void set_gpu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gpu_id() const;
  void _internal_set_gpu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perfetto.protos.GpuCounterEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterEvent_GpuCounter > counters_;
  ::perfetto::protos::GpuCounterDescriptor* counter_descriptor_;
  ::PROTOBUF_NAMESPACE_ID::int32 gpu_id_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5fcounter_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GpuCounterEvent_GpuCounter

// optional uint32 counter_id = 1;
inline bool GpuCounterEvent_GpuCounter::_internal_has_counter_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GpuCounterEvent_GpuCounter::has_counter_id() const {
  return _internal_has_counter_id();
}
inline void GpuCounterEvent_GpuCounter::clear_counter_id() {
  counter_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpuCounterEvent_GpuCounter::_internal_counter_id() const {
  return counter_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpuCounterEvent_GpuCounter::counter_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterEvent.GpuCounter.counter_id)
  return _internal_counter_id();
}
inline void GpuCounterEvent_GpuCounter::_internal_set_counter_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  counter_id_ = value;
}
inline void GpuCounterEvent_GpuCounter::set_counter_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_counter_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterEvent.GpuCounter.counter_id)
}

// int64 int_value = 2;
inline bool GpuCounterEvent_GpuCounter::_internal_has_int_value() const {
  return value_case() == kIntValue;
}
inline bool GpuCounterEvent_GpuCounter::has_int_value() const {
  return _internal_has_int_value();
}
inline void GpuCounterEvent_GpuCounter::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
inline void GpuCounterEvent_GpuCounter::clear_int_value() {
  if (_internal_has_int_value()) {
    value_.int_value_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GpuCounterEvent_GpuCounter::_internal_int_value() const {
  if (_internal_has_int_value()) {
    return value_.int_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void GpuCounterEvent_GpuCounter::_internal_set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  value_.int_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GpuCounterEvent_GpuCounter::int_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterEvent.GpuCounter.int_value)
  return _internal_int_value();
}
inline void GpuCounterEvent_GpuCounter::set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterEvent.GpuCounter.int_value)
}

// double double_value = 3;
inline bool GpuCounterEvent_GpuCounter::_internal_has_double_value() const {
  return value_case() == kDoubleValue;
}
inline bool GpuCounterEvent_GpuCounter::has_double_value() const {
  return _internal_has_double_value();
}
inline void GpuCounterEvent_GpuCounter::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void GpuCounterEvent_GpuCounter::clear_double_value() {
  if (_internal_has_double_value()) {
    value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double GpuCounterEvent_GpuCounter::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return value_.double_value_;
  }
  return 0;
}
inline void GpuCounterEvent_GpuCounter::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  value_.double_value_ = value;
}
inline double GpuCounterEvent_GpuCounter::double_value() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterEvent.GpuCounter.double_value)
  return _internal_double_value();
}
inline void GpuCounterEvent_GpuCounter::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterEvent.GpuCounter.double_value)
}

inline bool GpuCounterEvent_GpuCounter::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void GpuCounterEvent_GpuCounter::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline GpuCounterEvent_GpuCounter::ValueCase GpuCounterEvent_GpuCounter::value_case() const {
  return GpuCounterEvent_GpuCounter::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GpuCounterEvent

// optional .perfetto.protos.GpuCounterDescriptor counter_descriptor = 1;
inline bool GpuCounterEvent::_internal_has_counter_descriptor() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || counter_descriptor_ != nullptr);
  return value;
}
inline bool GpuCounterEvent::has_counter_descriptor() const {
  return _internal_has_counter_descriptor();
}
inline const ::perfetto::protos::GpuCounterDescriptor& GpuCounterEvent::_internal_counter_descriptor() const {
  const ::perfetto::protos::GpuCounterDescriptor* p = counter_descriptor_;
  return p != nullptr ? *p : reinterpret_cast<const ::perfetto::protos::GpuCounterDescriptor&>(
      ::perfetto::protos::_GpuCounterDescriptor_default_instance_);
}
inline const ::perfetto::protos::GpuCounterDescriptor& GpuCounterEvent::counter_descriptor() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterEvent.counter_descriptor)
  return _internal_counter_descriptor();
}
inline void GpuCounterEvent::unsafe_arena_set_allocated_counter_descriptor(
    ::perfetto::protos::GpuCounterDescriptor* counter_descriptor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(counter_descriptor_);
  }
  counter_descriptor_ = counter_descriptor;
  if (counter_descriptor) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfetto.protos.GpuCounterEvent.counter_descriptor)
}
inline ::perfetto::protos::GpuCounterDescriptor* GpuCounterEvent::release_counter_descriptor() {
  _has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::GpuCounterDescriptor* temp = counter_descriptor_;
  counter_descriptor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfetto::protos::GpuCounterDescriptor* GpuCounterEvent::unsafe_arena_release_counter_descriptor() {
  // @@protoc_insertion_point(field_release:perfetto.protos.GpuCounterEvent.counter_descriptor)
  _has_bits_[0] &= ~0x00000001u;
  ::perfetto::protos::GpuCounterDescriptor* temp = counter_descriptor_;
  counter_descriptor_ = nullptr;
  return temp;
}
inline ::perfetto::protos::GpuCounterDescriptor* GpuCounterEvent::_internal_mutable_counter_descriptor() {
  _has_bits_[0] |= 0x00000001u;
  if (counter_descriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfetto::protos::GpuCounterDescriptor>(GetArena());
    counter_descriptor_ = p;
  }
  return counter_descriptor_;
}
inline ::perfetto::protos::GpuCounterDescriptor* GpuCounterEvent::mutable_counter_descriptor() {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.GpuCounterEvent.counter_descriptor)
  return _internal_mutable_counter_descriptor();
}
inline void GpuCounterEvent::set_allocated_counter_descriptor(::perfetto::protos::GpuCounterDescriptor* counter_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(counter_descriptor_);
  }
  if (counter_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(counter_descriptor)->GetArena();
    if (message_arena != submessage_arena) {
      counter_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, counter_descriptor, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  counter_descriptor_ = counter_descriptor;
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.GpuCounterEvent.counter_descriptor)
}

// repeated .perfetto.protos.GpuCounterEvent.GpuCounter counters = 2;
inline int GpuCounterEvent::_internal_counters_size() const {
  return counters_.size();
}
inline int GpuCounterEvent::counters_size() const {
  return _internal_counters_size();
}
inline void GpuCounterEvent::clear_counters() {
  counters_.Clear();
}
inline ::perfetto::protos::GpuCounterEvent_GpuCounter* GpuCounterEvent::mutable_counters(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.GpuCounterEvent.counters)
  return counters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterEvent_GpuCounter >*
GpuCounterEvent::mutable_counters() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.GpuCounterEvent.counters)
  return &counters_;
}
inline const ::perfetto::protos::GpuCounterEvent_GpuCounter& GpuCounterEvent::_internal_counters(int index) const {
  return counters_.Get(index);
}
inline const ::perfetto::protos::GpuCounterEvent_GpuCounter& GpuCounterEvent::counters(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterEvent.counters)
  return _internal_counters(index);
}
inline ::perfetto::protos::GpuCounterEvent_GpuCounter* GpuCounterEvent::_internal_add_counters() {
  return counters_.Add();
}
inline ::perfetto::protos::GpuCounterEvent_GpuCounter* GpuCounterEvent::add_counters() {
  // @@protoc_insertion_point(field_add:perfetto.protos.GpuCounterEvent.counters)
  return _internal_add_counters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::GpuCounterEvent_GpuCounter >&
GpuCounterEvent::counters() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.GpuCounterEvent.counters)
  return counters_;
}

// optional int32 gpu_id = 3;
inline bool GpuCounterEvent::_internal_has_gpu_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GpuCounterEvent::has_gpu_id() const {
  return _internal_has_gpu_id();
}
inline void GpuCounterEvent::clear_gpu_id() {
  gpu_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpuCounterEvent::_internal_gpu_id() const {
  return gpu_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpuCounterEvent::gpu_id() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.GpuCounterEvent.gpu_id)
  return _internal_gpu_id();
}
inline void GpuCounterEvent::_internal_set_gpu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  gpu_id_ = value;
}
inline void GpuCounterEvent::set_gpu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gpu_id(value);
  // @@protoc_insertion_point(field_set:perfetto.protos.GpuCounterEvent.gpu_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5fcounter_5fevent_2eproto
