// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/gpu/gpu_log.proto

#include "protos/perfetto/trace/gpu/gpu_log.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace perfetto {
namespace protos {
class GpuLogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GpuLog> _instance;
} _GpuLog_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_GpuLog_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_GpuLog_default_instance_;
    new (ptr) ::perfetto::protos::GpuLog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpuLog_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GpuLog_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5flog_2eproto}, {}};

namespace perfetto {
namespace protos {
bool GpuLog_Severity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GpuLog_Severity_strings[6] = {};

static const char GpuLog_Severity_names[] =
  "LOG_SEVERITY_DEBUG"
  "LOG_SEVERITY_ERROR"
  "LOG_SEVERITY_INFO"
  "LOG_SEVERITY_UNSPECIFIED"
  "LOG_SEVERITY_VERBOSE"
  "LOG_SEVERITY_WARNING";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GpuLog_Severity_entries[] = {
  { {GpuLog_Severity_names + 0, 18}, 2 },
  { {GpuLog_Severity_names + 18, 18}, 5 },
  { {GpuLog_Severity_names + 36, 17}, 3 },
  { {GpuLog_Severity_names + 53, 24}, 0 },
  { {GpuLog_Severity_names + 77, 20}, 1 },
  { {GpuLog_Severity_names + 97, 20}, 4 },
};

static const int GpuLog_Severity_entries_by_number[] = {
  3, // 0 -> LOG_SEVERITY_UNSPECIFIED
  4, // 1 -> LOG_SEVERITY_VERBOSE
  0, // 2 -> LOG_SEVERITY_DEBUG
  2, // 3 -> LOG_SEVERITY_INFO
  5, // 4 -> LOG_SEVERITY_WARNING
  1, // 5 -> LOG_SEVERITY_ERROR
};

const std::string& GpuLog_Severity_Name(
    GpuLog_Severity value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GpuLog_Severity_entries,
          GpuLog_Severity_entries_by_number,
          6, GpuLog_Severity_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GpuLog_Severity_entries,
      GpuLog_Severity_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GpuLog_Severity_strings[idx].get();
}
bool GpuLog_Severity_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GpuLog_Severity* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GpuLog_Severity_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<GpuLog_Severity>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GpuLog_Severity GpuLog::LOG_SEVERITY_UNSPECIFIED;
constexpr GpuLog_Severity GpuLog::LOG_SEVERITY_VERBOSE;
constexpr GpuLog_Severity GpuLog::LOG_SEVERITY_DEBUG;
constexpr GpuLog_Severity GpuLog::LOG_SEVERITY_INFO;
constexpr GpuLog_Severity GpuLog::LOG_SEVERITY_WARNING;
constexpr GpuLog_Severity GpuLog::LOG_SEVERITY_ERROR;
constexpr GpuLog_Severity GpuLog::Severity_MIN;
constexpr GpuLog_Severity GpuLog::Severity_MAX;
constexpr int GpuLog::Severity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class GpuLog::_Internal {
 public:
  using HasBits = decltype(std::declval<GpuLog>()._has_bits_);
  static void set_has_severity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_log_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GpuLog::GpuLog(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.GpuLog)
}
GpuLog::GpuLog(const GpuLog& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tag()) {
    tag_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tag(),
      GetArena());
  }
  log_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_log_message()) {
    log_message_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_log_message(),
      GetArena());
  }
  severity_ = from.severity_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.GpuLog)
}

void GpuLog::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GpuLog_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5flog_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  severity_ = 0;
}

GpuLog::~GpuLog() {
  // @@protoc_insertion_point(destructor:perfetto.protos.GpuLog)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GpuLog::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GpuLog::ArenaDtor(void* object) {
  GpuLog* _this = reinterpret_cast< GpuLog* >(object);
  (void)_this;
}
void GpuLog::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GpuLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GpuLog& GpuLog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GpuLog_protos_2fperfetto_2ftrace_2fgpu_2fgpu_5flog_2eproto.base);
  return *internal_default_instance();
}


void GpuLog::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.GpuLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      log_message_.ClearNonDefaultToEmpty();
    }
  }
  severity_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GpuLog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.GpuLog.Severity severity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::GpuLog_Severity_IsValid(val))) {
            _internal_set_severity(static_cast<::perfetto::protos::GpuLog_Severity>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string log_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_log_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GpuLog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.GpuLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.GpuLog.Severity severity = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_severity(), target);
  }

  // optional string tag = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tag(), target);
  }

  // optional string log_message = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_log_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.GpuLog)
  return target;
}

size_t GpuLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.GpuLog)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string tag = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tag());
    }

    // optional string log_message = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_log_message());
    }

    // optional .perfetto.protos.GpuLog.Severity severity = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_severity());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpuLog::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GpuLog*>(
      &from));
}

void GpuLog::MergeFrom(const GpuLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.GpuLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_log_message(from._internal_log_message());
    }
    if (cached_has_bits & 0x00000004u) {
      severity_ = from.severity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GpuLog::CopyFrom(const GpuLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.GpuLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuLog::IsInitialized() const {
  return true;
}

void GpuLog::InternalSwap(GpuLog* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  log_message_.Swap(&other->log_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(severity_, other->severity_);
}

std::string GpuLog::GetTypeName() const {
  return "perfetto.protos.GpuLog";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::GpuLog* Arena::CreateMaybeMessage< ::perfetto::protos::GpuLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::GpuLog >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
