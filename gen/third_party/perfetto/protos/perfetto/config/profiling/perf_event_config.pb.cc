// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/profiling/perf_event_config.proto

#include "protos/perfetto/config/profiling/perf_event_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerfEventConfig_CallstackSampling_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerfEventConfig_Scope_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PerfEvents_Timebase_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto;
namespace perfetto {
namespace protos {
class PerfEventConfig_CallstackSamplingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerfEventConfig_CallstackSampling> _instance;
} _PerfEventConfig_CallstackSampling_default_instance_;
class PerfEventConfig_ScopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerfEventConfig_Scope> _instance;
} _PerfEventConfig_Scope_default_instance_;
class PerfEventConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerfEventConfig> _instance;
} _PerfEventConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_PerfEventConfig_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_PerfEventConfig_default_instance_;
    new (ptr) ::perfetto::protos::PerfEventConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PerfEventConfig_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PerfEventConfig_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto}, {
      &scc_info_PerfEvents_Timebase_protos_2fperfetto_2fcommon_2fperf_5fevents_2eproto.base,
      &scc_info_PerfEventConfig_CallstackSampling_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_PerfEventConfig_CallstackSampling_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_PerfEventConfig_CallstackSampling_default_instance_;
    new (ptr) ::perfetto::protos::PerfEventConfig_CallstackSampling();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerfEventConfig_CallstackSampling_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PerfEventConfig_CallstackSampling_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto}, {
      &scc_info_PerfEventConfig_Scope_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_PerfEventConfig_Scope_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_PerfEventConfig_Scope_default_instance_;
    new (ptr) ::perfetto::protos::PerfEventConfig_Scope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerfEventConfig_Scope_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PerfEventConfig_Scope_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto}, {}};

namespace perfetto {
namespace protos {
bool PerfEventConfig_UnwindMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PerfEventConfig_UnwindMode_strings[3] = {};

static const char PerfEventConfig_UnwindMode_names[] =
  "UNWIND_DWARF"
  "UNWIND_SKIP"
  "UNWIND_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PerfEventConfig_UnwindMode_entries[] = {
  { {PerfEventConfig_UnwindMode_names + 0, 12}, 2 },
  { {PerfEventConfig_UnwindMode_names + 12, 11}, 1 },
  { {PerfEventConfig_UnwindMode_names + 23, 14}, 0 },
};

static const int PerfEventConfig_UnwindMode_entries_by_number[] = {
  2, // 0 -> UNWIND_UNKNOWN
  1, // 1 -> UNWIND_SKIP
  0, // 2 -> UNWIND_DWARF
};

const std::string& PerfEventConfig_UnwindMode_Name(
    PerfEventConfig_UnwindMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PerfEventConfig_UnwindMode_entries,
          PerfEventConfig_UnwindMode_entries_by_number,
          3, PerfEventConfig_UnwindMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PerfEventConfig_UnwindMode_entries,
      PerfEventConfig_UnwindMode_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PerfEventConfig_UnwindMode_strings[idx].get();
}
bool PerfEventConfig_UnwindMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PerfEventConfig_UnwindMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PerfEventConfig_UnwindMode_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<PerfEventConfig_UnwindMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PerfEventConfig_UnwindMode PerfEventConfig::UNWIND_UNKNOWN;
constexpr PerfEventConfig_UnwindMode PerfEventConfig::UNWIND_SKIP;
constexpr PerfEventConfig_UnwindMode PerfEventConfig::UNWIND_DWARF;
constexpr PerfEventConfig_UnwindMode PerfEventConfig::UnwindMode_MIN;
constexpr PerfEventConfig_UnwindMode PerfEventConfig::UnwindMode_MAX;
constexpr int PerfEventConfig::UnwindMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class PerfEventConfig_CallstackSampling::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfEventConfig_CallstackSampling>()._has_bits_);
  static const ::perfetto::protos::PerfEventConfig_Scope& scope(const PerfEventConfig_CallstackSampling* msg);
  static void set_has_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kernel_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::perfetto::protos::PerfEventConfig_Scope&
PerfEventConfig_CallstackSampling::_Internal::scope(const PerfEventConfig_CallstackSampling* msg) {
  return *msg->scope_;
}
PerfEventConfig_CallstackSampling::PerfEventConfig_CallstackSampling(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PerfEventConfig.CallstackSampling)
}
PerfEventConfig_CallstackSampling::PerfEventConfig_CallstackSampling(const PerfEventConfig_CallstackSampling& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_scope()) {
    scope_ = new ::perfetto::protos::PerfEventConfig_Scope(*from.scope_);
  } else {
    scope_ = nullptr;
  }
  ::memcpy(&kernel_frames_, &from.kernel_frames_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_frames_) -
    reinterpret_cast<char*>(&kernel_frames_)) + sizeof(user_frames_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfEventConfig.CallstackSampling)
}

void PerfEventConfig_CallstackSampling::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerfEventConfig_CallstackSampling_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&scope_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&user_frames_) -
      reinterpret_cast<char*>(&scope_)) + sizeof(user_frames_));
}

PerfEventConfig_CallstackSampling::~PerfEventConfig_CallstackSampling() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfEventConfig.CallstackSampling)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PerfEventConfig_CallstackSampling::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scope_;
}

void PerfEventConfig_CallstackSampling::ArenaDtor(void* object) {
  PerfEventConfig_CallstackSampling* _this = reinterpret_cast< PerfEventConfig_CallstackSampling* >(object);
  (void)_this;
}
void PerfEventConfig_CallstackSampling::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PerfEventConfig_CallstackSampling::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfEventConfig_CallstackSampling& PerfEventConfig_CallstackSampling::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerfEventConfig_CallstackSampling_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PerfEventConfig_CallstackSampling::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfEventConfig.CallstackSampling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(scope_ != nullptr);
    scope_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&kernel_frames_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_frames_) -
        reinterpret_cast<char*>(&kernel_frames_)) + sizeof(user_frames_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfEventConfig_CallstackSampling::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .perfetto.protos.PerfEventConfig.Scope scope = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scope(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool kernel_frames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_kernel_frames(&has_bits);
          kernel_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.PerfEventConfig.UnwindMode user_frames = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::PerfEventConfig_UnwindMode_IsValid(val))) {
            _internal_set_user_frames(static_cast<::perfetto::protos::PerfEventConfig_UnwindMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PerfEventConfig_CallstackSampling::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PerfEventConfig.CallstackSampling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .perfetto.protos.PerfEventConfig.Scope scope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scope(this), target, stream);
  }

  // optional bool kernel_frames = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_kernel_frames(), target);
  }

  // optional .perfetto.protos.PerfEventConfig.UnwindMode user_frames = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_user_frames(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PerfEventConfig.CallstackSampling)
  return target;
}

size_t PerfEventConfig_CallstackSampling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfEventConfig.CallstackSampling)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .perfetto.protos.PerfEventConfig.Scope scope = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scope_);
    }

    // optional bool kernel_frames = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional .perfetto.protos.PerfEventConfig.UnwindMode user_frames = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_user_frames());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfEventConfig_CallstackSampling::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PerfEventConfig_CallstackSampling*>(
      &from));
}

void PerfEventConfig_CallstackSampling::MergeFrom(const PerfEventConfig_CallstackSampling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfEventConfig.CallstackSampling)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_scope()->::perfetto::protos::PerfEventConfig_Scope::MergeFrom(from._internal_scope());
    }
    if (cached_has_bits & 0x00000002u) {
      kernel_frames_ = from.kernel_frames_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_frames_ = from.user_frames_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerfEventConfig_CallstackSampling::CopyFrom(const PerfEventConfig_CallstackSampling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfEventConfig.CallstackSampling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfEventConfig_CallstackSampling::IsInitialized() const {
  return true;
}

void PerfEventConfig_CallstackSampling::InternalSwap(PerfEventConfig_CallstackSampling* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfEventConfig_CallstackSampling, user_frames_)
      + sizeof(PerfEventConfig_CallstackSampling::user_frames_)
      - PROTOBUF_FIELD_OFFSET(PerfEventConfig_CallstackSampling, scope_)>(
          reinterpret_cast<char*>(&scope_),
          reinterpret_cast<char*>(&other->scope_));
}

std::string PerfEventConfig_CallstackSampling::GetTypeName() const {
  return "perfetto.protos.PerfEventConfig.CallstackSampling";
}


// ===================================================================

class PerfEventConfig_Scope::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfEventConfig_Scope>()._has_bits_);
  static void set_has_additional_cmdline_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PerfEventConfig_Scope::PerfEventConfig_Scope(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  target_pid_(arena),
  target_cmdline_(arena),
  exclude_pid_(arena),
  exclude_cmdline_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PerfEventConfig.Scope)
}
PerfEventConfig_Scope::PerfEventConfig_Scope(const PerfEventConfig_Scope& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      target_pid_(from.target_pid_),
      target_cmdline_(from.target_cmdline_),
      exclude_pid_(from.exclude_pid_),
      exclude_cmdline_(from.exclude_cmdline_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  additional_cmdline_count_ = from.additional_cmdline_count_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfEventConfig.Scope)
}

void PerfEventConfig_Scope::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerfEventConfig_Scope_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto.base);
  additional_cmdline_count_ = 0u;
}

PerfEventConfig_Scope::~PerfEventConfig_Scope() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfEventConfig.Scope)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PerfEventConfig_Scope::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PerfEventConfig_Scope::ArenaDtor(void* object) {
  PerfEventConfig_Scope* _this = reinterpret_cast< PerfEventConfig_Scope* >(object);
  (void)_this;
}
void PerfEventConfig_Scope::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PerfEventConfig_Scope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfEventConfig_Scope& PerfEventConfig_Scope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerfEventConfig_Scope_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PerfEventConfig_Scope::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfEventConfig.Scope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_pid_.Clear();
  target_cmdline_.Clear();
  exclude_pid_.Clear();
  exclude_cmdline_.Clear();
  additional_cmdline_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfEventConfig_Scope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 target_pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_target_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_target_pid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string target_cmdline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_target_cmdline();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 exclude_pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_exclude_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_exclude_pid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string exclude_cmdline = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_exclude_cmdline();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 additional_cmdline_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_additional_cmdline_count(&has_bits);
          additional_cmdline_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PerfEventConfig_Scope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PerfEventConfig.Scope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 target_pid = 1;
  for (int i = 0, n = this->_internal_target_pid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_target_pid(i), target);
  }

  // repeated string target_cmdline = 2;
  for (int i = 0, n = this->_internal_target_cmdline_size(); i < n; i++) {
    const auto& s = this->_internal_target_cmdline(i);
    target = stream->WriteString(2, s, target);
  }

  // repeated int32 exclude_pid = 3;
  for (int i = 0, n = this->_internal_exclude_pid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_exclude_pid(i), target);
  }

  // repeated string exclude_cmdline = 4;
  for (int i = 0, n = this->_internal_exclude_cmdline_size(); i < n; i++) {
    const auto& s = this->_internal_exclude_cmdline(i);
    target = stream->WriteString(4, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 additional_cmdline_count = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_additional_cmdline_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PerfEventConfig.Scope)
  return target;
}

size_t PerfEventConfig_Scope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfEventConfig.Scope)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 target_pid = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->target_pid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_target_pid_size());
    total_size += data_size;
  }

  // repeated string target_cmdline = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(target_cmdline_.size());
  for (int i = 0, n = target_cmdline_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      target_cmdline_.Get(i));
  }

  // repeated int32 exclude_pid = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->exclude_pid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_exclude_pid_size());
    total_size += data_size;
  }

  // repeated string exclude_cmdline = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(exclude_cmdline_.size());
  for (int i = 0, n = exclude_cmdline_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      exclude_cmdline_.Get(i));
  }

  // optional uint32 additional_cmdline_count = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_additional_cmdline_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfEventConfig_Scope::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PerfEventConfig_Scope*>(
      &from));
}

void PerfEventConfig_Scope::MergeFrom(const PerfEventConfig_Scope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfEventConfig.Scope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_pid_.MergeFrom(from.target_pid_);
  target_cmdline_.MergeFrom(from.target_cmdline_);
  exclude_pid_.MergeFrom(from.exclude_pid_);
  exclude_cmdline_.MergeFrom(from.exclude_cmdline_);
  if (from._internal_has_additional_cmdline_count()) {
    _internal_set_additional_cmdline_count(from._internal_additional_cmdline_count());
  }
}

void PerfEventConfig_Scope::CopyFrom(const PerfEventConfig_Scope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfEventConfig.Scope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfEventConfig_Scope::IsInitialized() const {
  return true;
}

void PerfEventConfig_Scope::InternalSwap(PerfEventConfig_Scope* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  target_pid_.InternalSwap(&other->target_pid_);
  target_cmdline_.InternalSwap(&other->target_cmdline_);
  exclude_pid_.InternalSwap(&other->exclude_pid_);
  exclude_cmdline_.InternalSwap(&other->exclude_cmdline_);
  swap(additional_cmdline_count_, other->additional_cmdline_count_);
}

std::string PerfEventConfig_Scope::GetTypeName() const {
  return "perfetto.protos.PerfEventConfig.Scope";
}


// ===================================================================

class PerfEventConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfEventConfig>()._has_bits_);
  static const ::perfetto::protos::PerfEvents_Timebase& timebase(const PerfEventConfig* msg);
  static void set_has_timebase(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::perfetto::protos::PerfEventConfig_CallstackSampling& callstack_sampling(const PerfEventConfig* msg);
  static void set_has_callstack_sampling(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ring_buffer_read_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ring_buffer_pages(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_enqueued_footprint_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_max_daemon_memory_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_remote_descriptor_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_unwind_state_clear_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_all_cpus(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sampling_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kernel_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_additional_cmdline_count(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::perfetto::protos::PerfEvents_Timebase&
PerfEventConfig::_Internal::timebase(const PerfEventConfig* msg) {
  return *msg->timebase_;
}
const ::perfetto::protos::PerfEventConfig_CallstackSampling&
PerfEventConfig::_Internal::callstack_sampling(const PerfEventConfig* msg) {
  return *msg->callstack_sampling_;
}
void PerfEventConfig::clear_timebase() {
  if (timebase_ != nullptr) timebase_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PerfEventConfig::PerfEventConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  target_pid_(arena),
  target_cmdline_(arena),
  exclude_pid_(arena),
  exclude_cmdline_(arena),
  target_installed_by_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PerfEventConfig)
}
PerfEventConfig::PerfEventConfig(const PerfEventConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      target_pid_(from.target_pid_),
      target_cmdline_(from.target_cmdline_),
      exclude_pid_(from.exclude_pid_),
      exclude_cmdline_(from.exclude_cmdline_),
      target_installed_by_(from.target_installed_by_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_timebase()) {
    timebase_ = new ::perfetto::protos::PerfEvents_Timebase(*from.timebase_);
  } else {
    timebase_ = nullptr;
  }
  if (from._internal_has_callstack_sampling()) {
    callstack_sampling_ = new ::perfetto::protos::PerfEventConfig_CallstackSampling(*from.callstack_sampling_);
  } else {
    callstack_sampling_ = nullptr;
  }
  ::memcpy(&sampling_frequency_, &from.sampling_frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_enqueued_footprint_kb_) -
    reinterpret_cast<char*>(&sampling_frequency_)) + sizeof(max_enqueued_footprint_kb_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PerfEventConfig)
}

void PerfEventConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerfEventConfig_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&timebase_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_enqueued_footprint_kb_) -
      reinterpret_cast<char*>(&timebase_)) + sizeof(max_enqueued_footprint_kb_));
}

PerfEventConfig::~PerfEventConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PerfEventConfig)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PerfEventConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timebase_;
  if (this != internal_default_instance()) delete callstack_sampling_;
}

void PerfEventConfig::ArenaDtor(void* object) {
  PerfEventConfig* _this = reinterpret_cast< PerfEventConfig* >(object);
  (void)_this;
}
void PerfEventConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PerfEventConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfEventConfig& PerfEventConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerfEventConfig_protos_2fperfetto_2fconfig_2fprofiling_2fperf_5fevent_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PerfEventConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PerfEventConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_pid_.Clear();
  target_cmdline_.Clear();
  exclude_pid_.Clear();
  exclude_cmdline_.Clear();
  target_installed_by_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(timebase_ != nullptr);
      timebase_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(callstack_sampling_ != nullptr);
      callstack_sampling_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&sampling_frequency_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&remote_descriptor_timeout_ms_) -
        reinterpret_cast<char*>(&sampling_frequency_)) + sizeof(remote_descriptor_timeout_ms_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&unwind_state_clear_period_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_enqueued_footprint_kb_) -
        reinterpret_cast<char*>(&unwind_state_clear_period_ms_)) + sizeof(max_enqueued_footprint_kb_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerfEventConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool all_cpus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_all_cpus(&has_bits);
          all_cpus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sampling_frequency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sampling_frequency(&has_bits);
          sampling_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ring_buffer_pages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ring_buffer_pages(&has_bits);
          ring_buffer_pages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 target_pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_target_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_target_pid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string target_cmdline = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_target_cmdline();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 exclude_pid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_exclude_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_exclude_pid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string exclude_cmdline = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_exclude_cmdline();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 ring_buffer_read_period_ms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ring_buffer_read_period_ms(&has_bits);
          ring_buffer_read_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 remote_descriptor_timeout_ms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_remote_descriptor_timeout_ms(&has_bits);
          remote_descriptor_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 unwind_state_clear_period_ms = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_unwind_state_clear_period_ms(&has_bits);
          unwind_state_clear_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 additional_cmdline_count = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_additional_cmdline_count(&has_bits);
          additional_cmdline_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool kernel_frames = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_kernel_frames(&has_bits);
          kernel_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_daemon_memory_kb = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_max_daemon_memory_kb(&has_bits);
          max_daemon_memory_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.PerfEvents.Timebase timebase = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_timebase(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.PerfEventConfig.CallstackSampling callstack_sampling = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_callstack_sampling(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 max_enqueued_footprint_kb = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_max_enqueued_footprint_kb(&has_bits);
          max_enqueued_footprint_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string target_installed_by = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_target_installed_by();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PerfEventConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PerfEventConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool all_cpus = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_all_cpus(), target);
  }

  // optional uint32 sampling_frequency = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sampling_frequency(), target);
  }

  // optional uint32 ring_buffer_pages = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ring_buffer_pages(), target);
  }

  // repeated int32 target_pid = 4;
  for (int i = 0, n = this->_internal_target_pid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_target_pid(i), target);
  }

  // repeated string target_cmdline = 5;
  for (int i = 0, n = this->_internal_target_cmdline_size(); i < n; i++) {
    const auto& s = this->_internal_target_cmdline(i);
    target = stream->WriteString(5, s, target);
  }

  // repeated int32 exclude_pid = 6;
  for (int i = 0, n = this->_internal_exclude_pid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_exclude_pid(i), target);
  }

  // repeated string exclude_cmdline = 7;
  for (int i = 0, n = this->_internal_exclude_cmdline_size(); i < n; i++) {
    const auto& s = this->_internal_exclude_cmdline(i);
    target = stream->WriteString(7, s, target);
  }

  // optional uint32 ring_buffer_read_period_ms = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_ring_buffer_read_period_ms(), target);
  }

  // optional uint32 remote_descriptor_timeout_ms = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_remote_descriptor_timeout_ms(), target);
  }

  // optional uint32 unwind_state_clear_period_ms = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_unwind_state_clear_period_ms(), target);
  }

  // optional uint32 additional_cmdline_count = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_additional_cmdline_count(), target);
  }

  // optional bool kernel_frames = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_kernel_frames(), target);
  }

  // optional uint32 max_daemon_memory_kb = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_max_daemon_memory_kb(), target);
  }

  // optional .perfetto.protos.PerfEvents.Timebase timebase = 15;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::timebase(this), target, stream);
  }

  // optional .perfetto.protos.PerfEventConfig.CallstackSampling callstack_sampling = 16;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::callstack_sampling(this), target, stream);
  }

  // optional uint64 max_enqueued_footprint_kb = 17;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_max_enqueued_footprint_kb(), target);
  }

  // repeated string target_installed_by = 18;
  for (int i = 0, n = this->_internal_target_installed_by_size(); i < n; i++) {
    const auto& s = this->_internal_target_installed_by(i);
    target = stream->WriteString(18, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PerfEventConfig)
  return target;
}

size_t PerfEventConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PerfEventConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 target_pid = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->target_pid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_target_pid_size());
    total_size += data_size;
  }

  // repeated string target_cmdline = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(target_cmdline_.size());
  for (int i = 0, n = target_cmdline_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      target_cmdline_.Get(i));
  }

  // repeated int32 exclude_pid = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->exclude_pid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_exclude_pid_size());
    total_size += data_size;
  }

  // repeated string exclude_cmdline = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(exclude_cmdline_.size());
  for (int i = 0, n = exclude_cmdline_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      exclude_cmdline_.Get(i));
  }

  // repeated string target_installed_by = 18;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(target_installed_by_.size());
  for (int i = 0, n = target_installed_by_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      target_installed_by_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .perfetto.protos.PerfEvents.Timebase timebase = 15;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timebase_);
    }

    // optional .perfetto.protos.PerfEventConfig.CallstackSampling callstack_sampling = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *callstack_sampling_);
    }

    // optional uint32 sampling_frequency = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sampling_frequency());
    }

    // optional uint32 ring_buffer_pages = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ring_buffer_pages());
    }

    // optional bool all_cpus = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool kernel_frames = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 ring_buffer_read_period_ms = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ring_buffer_read_period_ms());
    }

    // optional uint32 remote_descriptor_timeout_ms = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_remote_descriptor_timeout_ms());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 unwind_state_clear_period_ms = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_unwind_state_clear_period_ms());
    }

    // optional uint32 additional_cmdline_count = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_additional_cmdline_count());
    }

    // optional uint32 max_daemon_memory_kb = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_daemon_memory_kb());
    }

    // optional uint64 max_enqueued_footprint_kb = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_max_enqueued_footprint_kb());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfEventConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PerfEventConfig*>(
      &from));
}

void PerfEventConfig::MergeFrom(const PerfEventConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PerfEventConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_pid_.MergeFrom(from.target_pid_);
  target_cmdline_.MergeFrom(from.target_cmdline_);
  exclude_pid_.MergeFrom(from.exclude_pid_);
  exclude_cmdline_.MergeFrom(from.exclude_cmdline_);
  target_installed_by_.MergeFrom(from.target_installed_by_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_timebase()->::perfetto::protos::PerfEvents_Timebase::MergeFrom(from._internal_timebase());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_callstack_sampling()->::perfetto::protos::PerfEventConfig_CallstackSampling::MergeFrom(from._internal_callstack_sampling());
    }
    if (cached_has_bits & 0x00000004u) {
      sampling_frequency_ = from.sampling_frequency_;
    }
    if (cached_has_bits & 0x00000008u) {
      ring_buffer_pages_ = from.ring_buffer_pages_;
    }
    if (cached_has_bits & 0x00000010u) {
      all_cpus_ = from.all_cpus_;
    }
    if (cached_has_bits & 0x00000020u) {
      kernel_frames_ = from.kernel_frames_;
    }
    if (cached_has_bits & 0x00000040u) {
      ring_buffer_read_period_ms_ = from.ring_buffer_read_period_ms_;
    }
    if (cached_has_bits & 0x00000080u) {
      remote_descriptor_timeout_ms_ = from.remote_descriptor_timeout_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      unwind_state_clear_period_ms_ = from.unwind_state_clear_period_ms_;
    }
    if (cached_has_bits & 0x00000200u) {
      additional_cmdline_count_ = from.additional_cmdline_count_;
    }
    if (cached_has_bits & 0x00000400u) {
      max_daemon_memory_kb_ = from.max_daemon_memory_kb_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_enqueued_footprint_kb_ = from.max_enqueued_footprint_kb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerfEventConfig::CopyFrom(const PerfEventConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PerfEventConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfEventConfig::IsInitialized() const {
  return true;
}

void PerfEventConfig::InternalSwap(PerfEventConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  target_pid_.InternalSwap(&other->target_pid_);
  target_cmdline_.InternalSwap(&other->target_cmdline_);
  exclude_pid_.InternalSwap(&other->exclude_pid_);
  exclude_cmdline_.InternalSwap(&other->exclude_cmdline_);
  target_installed_by_.InternalSwap(&other->target_installed_by_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerfEventConfig, max_enqueued_footprint_kb_)
      + sizeof(PerfEventConfig::max_enqueued_footprint_kb_)
      - PROTOBUF_FIELD_OFFSET(PerfEventConfig, timebase_)>(
          reinterpret_cast<char*>(&timebase_),
          reinterpret_cast<char*>(&other->timebase_));
}

std::string PerfEventConfig::GetTypeName() const {
  return "perfetto.protos.PerfEventConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfEventConfig_CallstackSampling* Arena::CreateMaybeMessage< ::perfetto::protos::PerfEventConfig_CallstackSampling >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PerfEventConfig_CallstackSampling >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfEventConfig_Scope* Arena::CreateMaybeMessage< ::perfetto::protos::PerfEventConfig_Scope >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PerfEventConfig_Scope >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::PerfEventConfig* Arena::CreateMaybeMessage< ::perfetto::protos::PerfEventConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PerfEventConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
