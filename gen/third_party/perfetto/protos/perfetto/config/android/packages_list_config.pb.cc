// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/android/packages_list_config.proto

#include "protos/perfetto/config/android/packages_list_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace perfetto {
namespace protos {
class PackagesListConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PackagesListConfig> _instance;
} _PackagesListConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_PackagesListConfig_protos_2fperfetto_2fconfig_2fandroid_2fpackages_5flist_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_PackagesListConfig_default_instance_;
    new (ptr) ::perfetto::protos::PackagesListConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PackagesListConfig_protos_2fperfetto_2fconfig_2fandroid_2fpackages_5flist_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PackagesListConfig_protos_2fperfetto_2fconfig_2fandroid_2fpackages_5flist_5fconfig_2eproto}, {}};

namespace perfetto {
namespace protos {

// ===================================================================

class PackagesListConfig::_Internal {
 public:
};

PackagesListConfig::PackagesListConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  package_name_filter_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.PackagesListConfig)
}
PackagesListConfig::PackagesListConfig(const PackagesListConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      package_name_filter_(from.package_name_filter_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.PackagesListConfig)
}

void PackagesListConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PackagesListConfig_protos_2fperfetto_2fconfig_2fandroid_2fpackages_5flist_5fconfig_2eproto.base);
}

PackagesListConfig::~PackagesListConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.PackagesListConfig)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PackagesListConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PackagesListConfig::ArenaDtor(void* object) {
  PackagesListConfig* _this = reinterpret_cast< PackagesListConfig* >(object);
  (void)_this;
}
void PackagesListConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PackagesListConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PackagesListConfig& PackagesListConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PackagesListConfig_protos_2fperfetto_2fconfig_2fandroid_2fpackages_5flist_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PackagesListConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.PackagesListConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  package_name_filter_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PackagesListConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string package_name_filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_package_name_filter();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PackagesListConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.PackagesListConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string package_name_filter = 1;
  for (int i = 0, n = this->_internal_package_name_filter_size(); i < n; i++) {
    const auto& s = this->_internal_package_name_filter(i);
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.PackagesListConfig)
  return target;
}

size_t PackagesListConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.PackagesListConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string package_name_filter = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(package_name_filter_.size());
  for (int i = 0, n = package_name_filter_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      package_name_filter_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PackagesListConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PackagesListConfig*>(
      &from));
}

void PackagesListConfig::MergeFrom(const PackagesListConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.PackagesListConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  package_name_filter_.MergeFrom(from.package_name_filter_);
}

void PackagesListConfig::CopyFrom(const PackagesListConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.PackagesListConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackagesListConfig::IsInitialized() const {
  return true;
}

void PackagesListConfig::InternalSwap(PackagesListConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  package_name_filter_.InternalSwap(&other->package_name_filter_);
}

std::string PackagesListConfig::GetTypeName() const {
  return "perfetto.protos.PackagesListConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::PackagesListConfig* Arena::CreateMaybeMessage< ::perfetto::protos::PackagesListConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::PackagesListConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
