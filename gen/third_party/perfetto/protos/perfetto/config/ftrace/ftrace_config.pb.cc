// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/ftrace/ftrace_config.proto

#include "protos/perfetto/config/ftrace/ftrace_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FtraceConfig_CompactSchedConfig_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto;
namespace perfetto {
namespace protos {
class FtraceConfig_CompactSchedConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FtraceConfig_CompactSchedConfig> _instance;
} _FtraceConfig_CompactSchedConfig_default_instance_;
class FtraceConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FtraceConfig> _instance;
} _FtraceConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_FtraceConfig_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_FtraceConfig_default_instance_;
    new (ptr) ::perfetto::protos::FtraceConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FtraceConfig_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FtraceConfig_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto}, {
      &scc_info_FtraceConfig_CompactSchedConfig_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_FtraceConfig_CompactSchedConfig_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_FtraceConfig_CompactSchedConfig_default_instance_;
    new (ptr) ::perfetto::protos::FtraceConfig_CompactSchedConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FtraceConfig_CompactSchedConfig_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FtraceConfig_CompactSchedConfig_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto}, {}};

namespace perfetto {
namespace protos {

// ===================================================================

class FtraceConfig_CompactSchedConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<FtraceConfig_CompactSchedConfig>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FtraceConfig_CompactSchedConfig::FtraceConfig_CompactSchedConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FtraceConfig.CompactSchedConfig)
}
FtraceConfig_CompactSchedConfig::FtraceConfig_CompactSchedConfig(const FtraceConfig_CompactSchedConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceConfig.CompactSchedConfig)
}

void FtraceConfig_CompactSchedConfig::SharedCtor() {
  enabled_ = false;
}

FtraceConfig_CompactSchedConfig::~FtraceConfig_CompactSchedConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceConfig.CompactSchedConfig)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void FtraceConfig_CompactSchedConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FtraceConfig_CompactSchedConfig::ArenaDtor(void* object) {
  FtraceConfig_CompactSchedConfig* _this = reinterpret_cast< FtraceConfig_CompactSchedConfig* >(object);
  (void)_this;
}
void FtraceConfig_CompactSchedConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FtraceConfig_CompactSchedConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FtraceConfig_CompactSchedConfig& FtraceConfig_CompactSchedConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FtraceConfig_CompactSchedConfig_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void FtraceConfig_CompactSchedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceConfig.CompactSchedConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FtraceConfig_CompactSchedConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FtraceConfig_CompactSchedConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FtraceConfig.CompactSchedConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FtraceConfig.CompactSchedConfig)
  return target;
}

size_t FtraceConfig_CompactSchedConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceConfig.CompactSchedConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FtraceConfig_CompactSchedConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FtraceConfig_CompactSchedConfig*>(
      &from));
}

void FtraceConfig_CompactSchedConfig::MergeFrom(const FtraceConfig_CompactSchedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceConfig.CompactSchedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enabled()) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void FtraceConfig_CompactSchedConfig::CopyFrom(const FtraceConfig_CompactSchedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceConfig.CompactSchedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceConfig_CompactSchedConfig::IsInitialized() const {
  return true;
}

void FtraceConfig_CompactSchedConfig::InternalSwap(FtraceConfig_CompactSchedConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

std::string FtraceConfig_CompactSchedConfig::GetTypeName() const {
  return "perfetto.protos.FtraceConfig.CompactSchedConfig";
}


// ===================================================================

class FtraceConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<FtraceConfig>()._has_bits_);
  static void set_has_buffer_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_drain_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::perfetto::protos::FtraceConfig_CompactSchedConfig& compact_sched(const FtraceConfig* msg);
  static void set_has_compact_sched(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_symbolize_ksyms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_initialize_ksyms_synchronously_for_testing(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_throttle_rss_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_disable_generic_events(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::perfetto::protos::FtraceConfig_CompactSchedConfig&
FtraceConfig::_Internal::compact_sched(const FtraceConfig* msg) {
  return *msg->compact_sched_;
}
FtraceConfig::FtraceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  ftrace_events_(arena),
  atrace_categories_(arena),
  atrace_apps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.FtraceConfig)
}
FtraceConfig::FtraceConfig(const FtraceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      ftrace_events_(from.ftrace_events_),
      atrace_categories_(from.atrace_categories_),
      atrace_apps_(from.atrace_apps_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_compact_sched()) {
    compact_sched_ = new ::perfetto::protos::FtraceConfig_CompactSchedConfig(*from.compact_sched_);
  } else {
    compact_sched_ = nullptr;
  }
  ::memcpy(&buffer_size_kb_, &from.buffer_size_kb_,
    static_cast<size_t>(reinterpret_cast<char*>(&disable_generic_events_) -
    reinterpret_cast<char*>(&buffer_size_kb_)) + sizeof(disable_generic_events_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.FtraceConfig)
}

void FtraceConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FtraceConfig_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&compact_sched_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&disable_generic_events_) -
      reinterpret_cast<char*>(&compact_sched_)) + sizeof(disable_generic_events_));
}

FtraceConfig::~FtraceConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.FtraceConfig)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void FtraceConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete compact_sched_;
}

void FtraceConfig::ArenaDtor(void* object) {
  FtraceConfig* _this = reinterpret_cast< FtraceConfig* >(object);
  (void)_this;
}
void FtraceConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FtraceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FtraceConfig& FtraceConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FtraceConfig_protos_2fperfetto_2fconfig_2fftrace_2fftrace_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void FtraceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.FtraceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ftrace_events_.Clear();
  atrace_categories_.Clear();
  atrace_apps_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(compact_sched_ != nullptr);
    compact_sched_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&buffer_size_kb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&disable_generic_events_) -
        reinterpret_cast<char*>(&buffer_size_kb_)) + sizeof(disable_generic_events_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FtraceConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string ftrace_events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ftrace_events();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string atrace_categories = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_atrace_categories();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string atrace_apps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_atrace_apps();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 buffer_size_kb = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_buffer_size_kb(&has_bits);
          buffer_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 drain_period_ms = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_drain_period_ms(&has_bits);
          drain_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.FtraceConfig.CompactSchedConfig compact_sched = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_compact_sched(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool symbolize_ksyms = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_symbolize_ksyms(&has_bits);
          symbolize_ksyms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool initialize_ksyms_synchronously_for_testing = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_initialize_ksyms_synchronously_for_testing(&has_bits);
          initialize_ksyms_synchronously_for_testing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool throttle_rss_stat = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_throttle_rss_stat(&has_bits);
          throttle_rss_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool disable_generic_events = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_disable_generic_events(&has_bits);
          disable_generic_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FtraceConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.FtraceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ftrace_events = 1;
  for (int i = 0, n = this->_internal_ftrace_events_size(); i < n; i++) {
    const auto& s = this->_internal_ftrace_events(i);
    target = stream->WriteString(1, s, target);
  }

  // repeated string atrace_categories = 2;
  for (int i = 0, n = this->_internal_atrace_categories_size(); i < n; i++) {
    const auto& s = this->_internal_atrace_categories(i);
    target = stream->WriteString(2, s, target);
  }

  // repeated string atrace_apps = 3;
  for (int i = 0, n = this->_internal_atrace_apps_size(); i < n; i++) {
    const auto& s = this->_internal_atrace_apps(i);
    target = stream->WriteString(3, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 buffer_size_kb = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_buffer_size_kb(), target);
  }

  // optional uint32 drain_period_ms = 11;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_drain_period_ms(), target);
  }

  // optional .perfetto.protos.FtraceConfig.CompactSchedConfig compact_sched = 12;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::compact_sched(this), target, stream);
  }

  // optional bool symbolize_ksyms = 13;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_symbolize_ksyms(), target);
  }

  // optional bool initialize_ksyms_synchronously_for_testing = 14;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_initialize_ksyms_synchronously_for_testing(), target);
  }

  // optional bool throttle_rss_stat = 15;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_throttle_rss_stat(), target);
  }

  // optional bool disable_generic_events = 16;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_disable_generic_events(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.FtraceConfig)
  return target;
}

size_t FtraceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.FtraceConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ftrace_events = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ftrace_events_.size());
  for (int i = 0, n = ftrace_events_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ftrace_events_.Get(i));
  }

  // repeated string atrace_categories = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(atrace_categories_.size());
  for (int i = 0, n = atrace_categories_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      atrace_categories_.Get(i));
  }

  // repeated string atrace_apps = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(atrace_apps_.size());
  for (int i = 0, n = atrace_apps_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      atrace_apps_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .perfetto.protos.FtraceConfig.CompactSchedConfig compact_sched = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *compact_sched_);
    }

    // optional uint32 buffer_size_kb = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_buffer_size_kb());
    }

    // optional uint32 drain_period_ms = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_drain_period_ms());
    }

    // optional bool symbolize_ksyms = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool initialize_ksyms_synchronously_for_testing = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool throttle_rss_stat = 15;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool disable_generic_events = 16;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FtraceConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FtraceConfig*>(
      &from));
}

void FtraceConfig::MergeFrom(const FtraceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.FtraceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ftrace_events_.MergeFrom(from.ftrace_events_);
  atrace_categories_.MergeFrom(from.atrace_categories_);
  atrace_apps_.MergeFrom(from.atrace_apps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_compact_sched()->::perfetto::protos::FtraceConfig_CompactSchedConfig::MergeFrom(from._internal_compact_sched());
    }
    if (cached_has_bits & 0x00000002u) {
      buffer_size_kb_ = from.buffer_size_kb_;
    }
    if (cached_has_bits & 0x00000004u) {
      drain_period_ms_ = from.drain_period_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      symbolize_ksyms_ = from.symbolize_ksyms_;
    }
    if (cached_has_bits & 0x00000010u) {
      initialize_ksyms_synchronously_for_testing_ = from.initialize_ksyms_synchronously_for_testing_;
    }
    if (cached_has_bits & 0x00000020u) {
      throttle_rss_stat_ = from.throttle_rss_stat_;
    }
    if (cached_has_bits & 0x00000040u) {
      disable_generic_events_ = from.disable_generic_events_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FtraceConfig::CopyFrom(const FtraceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.FtraceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtraceConfig::IsInitialized() const {
  return true;
}

void FtraceConfig::InternalSwap(FtraceConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ftrace_events_.InternalSwap(&other->ftrace_events_);
  atrace_categories_.InternalSwap(&other->atrace_categories_);
  atrace_apps_.InternalSwap(&other->atrace_apps_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FtraceConfig, disable_generic_events_)
      + sizeof(FtraceConfig::disable_generic_events_)
      - PROTOBUF_FIELD_OFFSET(FtraceConfig, compact_sched_)>(
          reinterpret_cast<char*>(&compact_sched_),
          reinterpret_cast<char*>(&other->compact_sched_));
}

std::string FtraceConfig::GetTypeName() const {
  return "perfetto.protos.FtraceConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceConfig_CompactSchedConfig* Arena::CreateMaybeMessage< ::perfetto::protos::FtraceConfig_CompactSchedConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FtraceConfig_CompactSchedConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::perfetto::protos::FtraceConfig* Arena::CreateMaybeMessage< ::perfetto::protos::FtraceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::FtraceConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
