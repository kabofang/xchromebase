// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/config/chrome/chrome_config.proto

#include "protos/perfetto/config/chrome/chrome_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace perfetto {
namespace protos {
class ChromeConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChromeConfig> _instance;
} _ChromeConfig_default_instance_;
}  // namespace protos
}  // namespace perfetto
static void InitDefaultsscc_info_ChromeConfig_protos_2fperfetto_2fconfig_2fchrome_2fchrome_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfetto::protos::_ChromeConfig_default_instance_;
    new (ptr) ::perfetto::protos::ChromeConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeConfig_protos_2fperfetto_2fconfig_2fchrome_2fchrome_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChromeConfig_protos_2fperfetto_2fconfig_2fchrome_2fchrome_5fconfig_2eproto}, {}};

namespace perfetto {
namespace protos {
bool ChromeConfig_ClientPriority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeConfig_ClientPriority_strings[3] = {};

static const char ChromeConfig_ClientPriority_names[] =
  "BACKGROUND"
  "UNKNOWN"
  "USER_INITIATED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeConfig_ClientPriority_entries[] = {
  { {ChromeConfig_ClientPriority_names + 0, 10}, 1 },
  { {ChromeConfig_ClientPriority_names + 10, 7}, 0 },
  { {ChromeConfig_ClientPriority_names + 17, 14}, 2 },
};

static const int ChromeConfig_ClientPriority_entries_by_number[] = {
  1, // 0 -> UNKNOWN
  0, // 1 -> BACKGROUND
  2, // 2 -> USER_INITIATED
};

const std::string& ChromeConfig_ClientPriority_Name(
    ChromeConfig_ClientPriority value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeConfig_ClientPriority_entries,
          ChromeConfig_ClientPriority_entries_by_number,
          3, ChromeConfig_ClientPriority_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeConfig_ClientPriority_entries,
      ChromeConfig_ClientPriority_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeConfig_ClientPriority_strings[idx].get();
}
bool ChromeConfig_ClientPriority_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeConfig_ClientPriority* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeConfig_ClientPriority_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ChromeConfig_ClientPriority>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChromeConfig_ClientPriority ChromeConfig::UNKNOWN;
constexpr ChromeConfig_ClientPriority ChromeConfig::BACKGROUND;
constexpr ChromeConfig_ClientPriority ChromeConfig::USER_INITIATED;
constexpr ChromeConfig_ClientPriority ChromeConfig::ClientPriority_MIN;
constexpr ChromeConfig_ClientPriority ChromeConfig::ClientPriority_MAX;
constexpr int ChromeConfig::ClientPriority_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ChromeConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeConfig>()._has_bits_);
  static void set_has_trace_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_privacy_filtering_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_convert_to_legacy_json(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_client_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_json_agent_label_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChromeConfig::ChromeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfetto.protos.ChromeConfig)
}
ChromeConfig::ChromeConfig(const ChromeConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  trace_config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_trace_config()) {
    trace_config_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_trace_config(),
      GetArena());
  }
  json_agent_label_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_json_agent_label_filter()) {
    json_agent_label_filter_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_json_agent_label_filter(),
      GetArena());
  }
  ::memcpy(&privacy_filtering_enabled_, &from.privacy_filtering_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_priority_) -
    reinterpret_cast<char*>(&privacy_filtering_enabled_)) + sizeof(client_priority_));
  // @@protoc_insertion_point(copy_constructor:perfetto.protos.ChromeConfig)
}

void ChromeConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChromeConfig_protos_2fperfetto_2fconfig_2fchrome_2fchrome_5fconfig_2eproto.base);
  trace_config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_agent_label_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&privacy_filtering_enabled_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&client_priority_) -
      reinterpret_cast<char*>(&privacy_filtering_enabled_)) + sizeof(client_priority_));
}

ChromeConfig::~ChromeConfig() {
  // @@protoc_insertion_point(destructor:perfetto.protos.ChromeConfig)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ChromeConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  trace_config_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  json_agent_label_filter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChromeConfig::ArenaDtor(void* object) {
  ChromeConfig* _this = reinterpret_cast< ChromeConfig* >(object);
  (void)_this;
}
void ChromeConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChromeConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChromeConfig& ChromeConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChromeConfig_protos_2fperfetto_2fconfig_2fchrome_2fchrome_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ChromeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perfetto.protos.ChromeConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      trace_config_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      json_agent_label_filter_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&privacy_filtering_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_priority_) -
        reinterpret_cast<char*>(&privacy_filtering_enabled_)) + sizeof(client_priority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string trace_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_trace_config();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool privacy_filtering_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_privacy_filtering_enabled(&has_bits);
          privacy_filtering_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool convert_to_legacy_json = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_convert_to_legacy_json(&has_bits);
          convert_to_legacy_json_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .perfetto.protos.ChromeConfig.ClientPriority client_priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::perfetto::protos::ChromeConfig_ClientPriority_IsValid(val))) {
            _internal_set_client_priority(static_cast<::perfetto::protos::ChromeConfig_ClientPriority>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string json_agent_label_filter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_json_agent_label_filter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChromeConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfetto.protos.ChromeConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string trace_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_trace_config(), target);
  }

  // optional bool privacy_filtering_enabled = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_privacy_filtering_enabled(), target);
  }

  // optional bool convert_to_legacy_json = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_convert_to_legacy_json(), target);
  }

  // optional .perfetto.protos.ChromeConfig.ClientPriority client_priority = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_client_priority(), target);
  }

  // optional string json_agent_label_filter = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_json_agent_label_filter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfetto.protos.ChromeConfig)
  return target;
}

size_t ChromeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfetto.protos.ChromeConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string trace_config = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_trace_config());
    }

    // optional string json_agent_label_filter = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_json_agent_label_filter());
    }

    // optional bool privacy_filtering_enabled = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool convert_to_legacy_json = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .perfetto.protos.ChromeConfig.ClientPriority client_priority = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_client_priority());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChromeConfig*>(
      &from));
}

void ChromeConfig::MergeFrom(const ChromeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfetto.protos.ChromeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_trace_config(from._internal_trace_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_json_agent_label_filter(from._internal_json_agent_label_filter());
    }
    if (cached_has_bits & 0x00000004u) {
      privacy_filtering_enabled_ = from.privacy_filtering_enabled_;
    }
    if (cached_has_bits & 0x00000008u) {
      convert_to_legacy_json_ = from.convert_to_legacy_json_;
    }
    if (cached_has_bits & 0x00000010u) {
      client_priority_ = from.client_priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChromeConfig::CopyFrom(const ChromeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfetto.protos.ChromeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeConfig::IsInitialized() const {
  return true;
}

void ChromeConfig::InternalSwap(ChromeConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trace_config_.Swap(&other->trace_config_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  json_agent_label_filter_.Swap(&other->json_agent_label_filter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeConfig, client_priority_)
      + sizeof(ChromeConfig::client_priority_)
      - PROTOBUF_FIELD_OFFSET(ChromeConfig, privacy_filtering_enabled_)>(
          reinterpret_cast<char*>(&privacy_filtering_enabled_),
          reinterpret_cast<char*>(&other->privacy_filtering_enabled_));
}

std::string ChromeConfig::GetTypeName() const {
  return "perfetto.protos.ChromeConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfetto::protos::ChromeConfig* Arena::CreateMaybeMessage< ::perfetto::protos::ChromeConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfetto::protos::ChromeConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
